"611eeafa283a2d1f57537fea","6120211d8e1eab16fcb7ad69","6122966a93af160af481836c","6124a4ba3df07e768bd9c90b","61275a3158c67415afb971ff","612a98181f4b6d1cf01f926c","61301fcb49db2f170cb02b93","6131f7010e926c9103558040","613867f34e206e4f573bc6ef","613a73d06cf1fcfef304d3fa","613ab1e64acd61ebd0a7116d","613f57084e80f056c78f9b7b","6140f1c4ead758f1b72bbe2f","6140ff9c5750f0081ca8d71f","6144742e57a61e489cc9e978","6147aed5b2a4f748dc2b6ba4","614b323022fcd8b7408005a6","614c80483d06dcf7ad552679","614c8e5469405530dc27b9d5","614dd6473c74b217ad73cc9c","61520b079436973e05f72d33","61548fa2b637194e04c9bc09","6155e204cc071b306458dfff","6156a440279fdf408ee663ae","6156b68cc77b48d6693b361c","615b042301e3a24311563ee4","615b1ab789b14c9996251fb4","615b41767003d4ece749ed9d","615da9ee365ab7d547b98979","615f371e6688c87e53e7acf5","61616ce2bb94584e11c911af","6163faf9d9ac4586fe776568","616494f1ae4537c01914c758","616631efeeac0979c1ba85a9","616891e25a026e1f7262116c","616eb493bb7e4ab4fa1de8d4","6170821d1e8ffb9c893b28a4","6171349b89a54d4823f9eca1","617142c2a843eef6f8f148b6","6171d922c871ba795b6a4827","6172078b966225960be2a7b5","617679054948369cb824d837","63ee5d8aaee278de46b7d4cc","6455490f7c5f35e4221a810a","64764d56699f097a96ec6e5c","64973d83e4fc64d6ae59c370","64a288758b7c82ff2d18da75","64ef422a4789bd6b6b9042ce","65032a60861e9a17bc1a7444","65089e7ce53888b0b3840c62","650aee87054446f772acdfcc");
library(paletteer);
cols <- paletteer_d("MetBrewer::Degas");
# Testing -----------------------------------------------------------------
# import testing data
data_all_testing <- read.csv("testing_preprocessed_clean.csv",header=T,sep=",");
data_all_testing <- subset(data_all_testing, select = -c(X)) # remove redundant column added by Pavlovia
data_testing <- data_all_testing[data_all_testing$sbj_ID %in% participants,]; # n = 196 participants
data_testing <- data_testing[!data_testing$sbj_ID %in% c('615b41767003d4ece749ed9d', '5e8b66490d48450346bf2755','615b042301e3a24311563ee4'),]
# make some variables factors
data_testing$sbj_ID <- as.factor(data_testing$sbj_ID);
data_testing$task <- as.factor(data_testing$task);
data_testing$item <- as.factor(data_testing$item);
data_testing$testing_condition <- as.factor(data_testing$testing_condition);
data_testing$correct <- as.logical(data_testing$correct);
# change coding: make YES into 1 and NO into 0
data_expected <- replace(data_testing$expected, data_testing$expected == 0, 'YES');
data_expected <- replace(data_expected, data_expected == 1, 'NO');
data_expected <- replace(data_expected, data_expected == 'NO', 0);
data_expected <- replace(data_expected, data_expected == 'YES', 1);
data_testing$expected <- data_expected;
data_testing$expected <- as.numeric(data_testing$expected);
data_observed <- replace(data_testing$observed, data_testing$observed == 0, 'YES');
data_observed <- replace(data_observed, data_observed == 1, 'NO');
data_observed <- replace(data_observed, data_observed == 'NO', 0);
data_observed <- replace(data_observed, data_observed == 'YES', 1);
data_testing$observed <- data_observed;
data_testing$observed <- as.numeric(data_testing$observed);
# due to technical issue: n(0M)=40, n(1M)=37, n(2M)=34
total_0M <- 40;
total_1M <- 37;
total_2M <- 34;
# 0M yes responses boxplot
data_testing_0M_yes <- aggregate(data_testing$observed[data_testing$testing_condition=='0M'], by=list(data_testing$sbj_ID[data_testing$testing_condition=='0M']), FUN = function(x) sum(x == 1));
names(data_testing_0M_yes) <- c("sbj_ID","x_0");
data_testing_0M_yes$x_0 <- data_testing_0M_yes$x_0/total_0M*100; #transform into percent
# 0M scores
data_testing_0M_means <- aggregate(data_testing$correct[data_testing$testing_condition=='0M'], list(data_testing$sbj_ID[data_testing$testing_condition=='0M']), FUN=mean, na.rm=TRUE);
names(data_testing_0M_means) <- c("sbj_ID","x_0");
# 1M yes responses boxplot
data_testing_1M_yes <- aggregate(data_testing$observed[data_testing$testing_condition=='1M'], by=list(data_testing$sbj_ID[data_testing$testing_condition=='1M']), FUN = function(x) sum(x == 1));
names(data_testing_1M_yes) <- c("sbj_ID","x_1");
data_testing_1M_yes$x_1 <- data_testing_1M_yes$x_1/total_1M*100; #transform into percent
# 1M scores
data_testing_1M_means <- aggregate(data_testing$correct[data_testing$testing_condition=='1M'], list(data_testing$sbj_ID[data_testing$testing_condition=='1M']), FUN=mean, na.rm=TRUE);
names(data_testing_1M_means) <- c("sbj_ID","x_1");
# 2M yes responses boxplot
data_testing_2M_yes <- aggregate(data_testing$observed[data_testing$testing_condition=='2M'], by=list(data_testing$sbj_ID[data_testing$testing_condition=='2M']), FUN = function(x) sum(x == 1));
names(data_testing_2M_yes) <- c("sbj_ID","x_2");
data_testing_2M_yes$x_2 <- data_testing_2M_yes$x_2/total_2M*100; #transform into percent
# 2M correct boxplot
data_testing_2M_means <- aggregate(data_testing$correct[data_testing$testing_condition=='2M'], list(data_testing$sbj_ID[data_testing$testing_condition=='2M']), FUN=mean, na.rm=TRUE);
names(data_testing_2M_means) <- c("sbj_ID","x_2");
# 2M - hits only
data_testing_2M_hits_means <- aggregate(data_testing$correct[data_testing$testing_condition=='2M'&data_testing$expected=='0'], list(data_testing$sbj_ID[data_testing$testing_condition=='2M'&data_testing$expected=='0']), FUN=mean, na.rm=TRUE);
names(data_testing_2M_hits_means) <- c("sbj_ID","x_2_hits");
# 2M - correct rejections only
data_testing_2M_rejs_means <- aggregate(data_testing$correct[data_testing$testing_condition=='2M'&data_testing$expected=='1'], list(data_testing$sbj_ID[data_testing$testing_condition=='2M'&data_testing$expected=='1']), FUN=mean, na.rm=TRUE);
names(data_testing_2M_rejs_means) <- c("sbj_ID","x_2_rejs");
# Familiarity -------------------------------------------------------------
data_all_familiarity <- read.csv("familiarity_preprocessed_clean.csv",header=T,sep=",");
data_all_familiarity <- subset(data_all_familiarity, select = -c(X)) # remove redundant column added by Pavlovia
data_familiarity <- data_all_familiarity[data_all_familiarity$sbj_ID %in% participants,]; # n = 196 participants
data_familiarity <- data_familiarity[!data_familiarity$sbj_ID %in% c('615b41767003d4ece749ed9d', '5e8b66490d48450346bf2755','615b042301e3a24311563ee4'),] # same participants excluded as for testing
# make some variables factors
data_familiarity$sbj_ID <- as.factor(data_familiarity$sbj_ID);
data_familiarity$task <- as.factor(data_familiarity$task);
data_familiarity$correct <- as.logical(data_familiarity$correct);
data_familiarity$target <- as.factor(data_familiarity$target);
data_familiarity$confound <- as.factor(data_familiarity$confound);
# familiarity accuracy boxplot
data_familiarity_means <- aggregate(data_familiarity$correct, list(data_familiarity$sbj_ID), FUN=mean);
colnames(data_familiarity_means)[colnames(data_familiarity_means)=="Group.1"]="sbj_ID";
# BLP ---------------------------------------------------------------------
data_all_BLP <- read.csv("BLP_preprocessed.csv",header=T,sep=",");
data_all_BLP <- subset(data_all_BLP, select = -c(X)) # remove redundant column added by Pavlovia
data_BLP <- data_all_BLP[data_all_BLP$sbj_ID %in% participants,]; # n = 196 participants
data_BLP <- data_BLP[!data_BLP$sbj_ID %in% c('615b41767003d4ece749ed9d','5e8b66490d48450346bf2755','615b042301e3a24311563ee4'),] # same participants excluded as for testing
data_BLP <- subset(data_BLP, select = -c(AoAgioL1, AoAgioL2, AoAgioL3, AoAgioL4, anniInstrL1, anniInstrL2, anniInstrL3, anniInstrL4, anniPaeseL1, anniPaeseL2, anniPaeseL3, anniPaeseL4, anniFamigliaL1, anniFamigliaL2, anniFamigliaL3, anniFamigliaL4, anniLavoroL1, anniLavoroL2, anniLavoroL3, anniLavoroL4, PercAmiciL1, PercAmiciL2, PercAmiciL3, PercAmiciL4, PercFamigliaL1, PercFamigliaL2, PercFamigliaL3, PercFamigliaL4, PercLavoroL1, PercLavoroL2, PercLavoroL3, PercLavoroL4, PercStessoL1, PercStessoL2, PercStessoL3, PercStessoL4, PercCalcoliL1, PercCalcoliL2, PercCalcoliL3, PercCalcoliL4, ProfParlaL1, ProfParlaL2, ProfParlaL3, ProfParlaL4, ProfCapisceL1, ProfCapisceL2, ProfCapisceL3, ProfCapisceL4, ProfLeggeL1, ProfLeggeL2, ProfLeggeL3, ProfLeggeL4, ProfScriveL1, ProfScriveL2, ProfScriveL3, ProfScriveL4, AttMiStessoL1, AttMiStessoL2, AttMiStessoL3, AttMiStessoL4, AttCulturaL1, AttCulturaL2, AttCulturaL3, AttCulturaL4, AttLivNativoL1, AttLivNativoL2, AttLivNativoL3, AttLivNativoL4, AttMadrelinguaL1, AttMadrelinguaL2, AttMadrelinguaL3, AttMadrelinguaL4));
# standardise language responses
data_BLP[data_BLP == "polish"|data_BLP == "POLISH"] <- "Polish";
data_BLP[data_BLP == "portuguese"|data_BLP == "Portugal"] <- "Portuguese";
data_BLP[data_BLP == "italian"] <- "Italian";
data_BLP[data_BLP == "spanish"] <- "Spanish";
data_BLP[data_BLP == "greek"|data_BLP=="Greece"] <- "Greek";
data_BLP[data_BLP == "french"|data_BLP=="fRANCH"] <- "French";
data_BLP[data_BLP == "arabic"] <- "Arabic";
data_BLP[data_BLP == "ENGLISH"|data_BLP == "english"|data_BLP=="english "|data_BLP == "englis"|data_BLP == "eanglish"|data_BLP == "Enlish"] <- "English";
data_BLP[data_BLP == "xhosa"|data_BLP=="XHOSA"] <- "Xhosa";
data_BLP[data_BLP == "tshivenda"] <- "Tshivenda";
data_BLP[data_BLP == "SETSWANA"] <- "Setswana";
data_BLP[data_BLP == "zulu"] <- "Zulu";
data_BLP[data_BLP == "TSWANA"] <- "Tswana";
data_BLP[data_BLP == "sotho"] <- "Sotho";
data_BLP[data_BLP == "SHONA"] <- "Shona";
data_BLP[data_BLP == "hungarian"] <- "Hungarian";
data_BLP[data_BLP == "afrikaans"|data_BLP=="AFRIKAANS"] <- "Afrikaans";
data_BLP[data_BLP == "german"|data_BLP=="GERMAN"|data_BLP=="germany"|data_BLP=="Deustch"] <- "German";
data_BLP[data_BLP == "sweedish"] <- "Swedish";
data_BLP[data_BLP == "Deutch"] <- "Dutch"; # probably - maybe Deutsch?
data_BLP[data_BLP == "SESOTHO"] <- "Sesotho";
data_BLP[data_BLP == "RUSSIAN"|data_BLP=="russian"] <- "Russian";
data_BLP[data_BLP == "tswana"] <- "Tswana";
data_BLP[data_BLP == "SEPEDI"|data_BLP=="sepedi"] <- "Sepedi";
data_BLP[data_BLP == "XItsonga"] <- "Xitsonga";
data_BLP[data_BLP == "N/A"] <- "n/a";
# correcting some participants' demographic information - correction based off of Prolific's information
data_BLP["Age"][data_BLP["sbj_ID"] == "5aa787c66219a30001c765f8"] <- "24";
data_BLP["Gender"][data_BLP["sbj_ID"] == "5aa787c66219a30001c765f8"] <- "Man";
data_BLP["Gender"][data_BLP["sbj_ID"] == "5bcd11401662020001fe82c1"] <- "Man";
data_BLP["Gender"][data_BLP["sbj_ID"] == "5e3ff59bf2160b23942ada93"] <- "Man";
data_BLP["Age"][data_BLP["sbj_ID"] == "5e577e79ce30ae13226e61ae"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "5e8c57d9b4483e012006e7aa"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5ecbb4c00bc62403dae2df59"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5ee942381a22491bbb7170f8"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5f219602670e5a0af2cf5237"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5f47e34858dd331165bf9f00"] <- "21";
data_BLP["Gender"][data_BLP["sbj_ID"] == "5f5a713d37f71112463ab4d9"] <- "Woman";
data_BLP["Age"][data_BLP["sbj_ID"] == "5f99cee5a2a7d109a1624e10"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5fa4725a186c050edc3bcc20"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "5fc2d2d79da439201ab6addc"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "5fc44d83862e3e79b02e0438"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "5fd9c5c67fa7c74ec42bb318"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "6065d7d47409810344f7e6bb"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "60883a7e91c0be66dbb96fc8"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "608c2e566d92c2aa3543e2d2"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "60e3b18d3d4205b4c52ada56"] <- "24";
data_BLP["Gender"][data_BLP["sbj_ID"] == "60e9ea97d19e613e60a994da"] <- "Man";
data_BLP["Age"][data_BLP["sbj_ID"] == "611eafa6011b0423f7d7230f"] <- "20";
data_BLP["Age"][data_BLP["sbj_ID"] == "612a98181f4b6d1cf01f926c"] <- "21";
data_BLP["Age"][data_BLP["sbj_ID"] == "61301fcb49db2f170cb02b93"] <- "25";
data_BLP["Age"][data_BLP["sbj_ID"] == "6156b68cc77b48d6693b361c"] <- "21";
data_BLP["Age"][data_BLP["sbj_ID"] == "616891e25a026e1f7262116c"] <- "22";
data_BLP["Gender"][data_BLP["sbj_ID"] == "616eb493bb7e4ab4fa1de8d4"] <- "Woman";
data_BLP["Age"][data_BLP["sbj_ID"] == "6171d922c871ba795b6a4827"] <- "23";
# make some variables factors
data_BLP$task <- as.factor(data_BLP$task)
data_BLP$sbj_ID <- as.factor(data_BLP$sbj_ID);
data_BLP$Age <- as.numeric(data_BLP$Age);
data_BLP$Gender <- as.factor(data_BLP$Gender);
data_BLP$Education <- as.factor(data_BLP$Education);
data_BLP$L1 <- as.factor(data_BLP$L1);
data_BLP$L2 <- as.factor(data_BLP$L2);
data_BLP$L3 <- as.factor(data_BLP$L3);
data_BLP$L4 <- as.factor(data_BLP$L4);
data_BLP$otherLs <- as.factor(data_BLP$otherLs);
data_BLP$AttentionL1 <- as.factor(data_BLP$AttentionL1);
data_BLP$AttentionL2 <- as.factor(data_BLP$AttentionL2);
data_BLP$AttentionL3 <- as.factor(data_BLP$AttentionL3);
data_BLP$AttentionL4 <- as.factor(data_BLP$AttentionL4);
library(toolbox);
scores_list <- combineCols(data_BLP, cols=c('L1Score','L2Score','L3Score','L4Score'),by_name=TRUE); # combine scores into 1 list
data_BLP$temp_sbjID <- c(1:193); # necessary: R doesn't like format of Prolific IDs
# multilingual balance: variance
vars <- list();
for (i in 1:193) { # calculate variance for each participant
temp <- unlist(scores_list[i]);
var <- var(temp,na.rm=TRUE);
vars <- append(vars, var)
};
data_BLP$lang_var <- vars;
data_BLP$lang_var <- as.numeric(data_BLP$lang_var);
# multilingual balance: entropy
entropies <- list();
library(DescTools);
for (i in 1:193) { # calculate entropy for each participant
temp <- unlist(scores_list[i]);
entropy <- Entropy(temp,na.rm=TRUE);
entropies <- append(entropies, entropy)
};
data_BLP$lang_ent <- entropies;
data_BLP$lang_ent <- as.numeric(data_BLP$lang_ent);
# multilingual experience: summing all language scores
data_BLP["L2Score"][is.na(data_BLP["L2Score"])] <- 0;
data_BLP["L3Score"][is.na(data_BLP["L3Score"])] <- 0;
data_BLP["L4Score"][is.na(data_BLP["L4Score"])] <- 0;
data_BLP$multi_exp <- data_BLP$L1Score + data_BLP$L2Score + data_BLP$L3Score + data_BLP$L4Score;
# L1 - L2 score
data_BLP$L1_L2_diff <- data_BLP$L1Score - data_BLP$L2Score;
# CLUSTERING #
complete_cases <- complete.cases(data_BLP)
data_filtered <- data_BLP[complete_cases, ]
#without language dominance scores
pca_varimax2 <- psych::principal(data_BLP[,19:34], nfactors=16, rotate='varimax');
data_BLP <- cbind(data_BLP, pca_varimax2$scores[,c('RC1','RC9','RC2','RC6')]);
names(data_BLP)[116:119] <- c('RC1_L3','RC9_L4','RC2_use_L1vsL2','RC6_use_L4');
# adding testing scores and BLP metrics together
library(tidyverse);
data_BLP_extracted_all <- subset(data_BLP, select=c(sbj_ID,HistoryL1Score,HistoryL2Score,HistoryL3Score,HistoryL4Score,UseL1Score,UseL2Score,UseL3Score,UseL4Score,ProficiencyL1Score,ProficiencyL2Score,ProficiencyL3Score,ProficiencyL4Score,AttitudeL1Score,AttitudeL2Score,AttitudeL3Score,AttitudeL4Score,L1Score,L2Score,L3Score,L4Score,lang_var,lang_ent,multi_exp,L1_L2_diff,RC1_L3,RC9_L4,RC2_use_L1vsL2,RC6_use_L4));
data_BLP_testing_all <- list(data_testing_2M_means,data_testing_2M_hits_means,data_testing_2M_rejs_means,data_BLP_extracted_all) %>% reduce(inner_join, by='sbj_ID');
################
# LINEAR MODEL #
################
library(lme4);
# TESTING #
data_testing_lm <- merge(data_testing, data_BLP[,c('temp_sbjID','sbj_ID','Gender','Age','lang_ent','multi_exp','L1_L2_diff','RC1_L3','RC9_L4','RC2_use_L1vsL2','RC6_use_L4')], by.x='sbj_ID',by.y='sbj_ID', all.x=T);
#2M - accuracy
data_testing_lm_2M <- subset(data_testing_lm[data_testing$testing_condition=='2M',]);
# FAMILIARITY #
data_BLP_familiarity <- merge(data_familiarity, data_BLP_extracted_all[,c('sbj_ID','lang_ent','multi_exp','L1_L2_diff','RC1_L3','RC9_L4','RC2_use_L1vsL2','RC6_use_L4')], by.x='sbj_ID',by.y='sbj_ID', all.x=T);
# new clustering analysis based on new version of Laio clustering technique
#getting all the participant IDs together
new_cluster1 <- list('2','3','4','5','6','7','8','10','12','13','14','15','16','19','20','21','22','23','24','25','27','28','29','31','32','33','35','36','38','39','41','43','44','45','46','47','48','49','50',
'51','52','53','55','56','57','58','59','60','61','63','64','66','67','68','69','72','73','74','75','76','77','78','79','81','82','83','84','87','88','89','94','95','100',
'101','102','106','107','108','110','113','114','115','117','118','120','124','125','127','128','131','132','134','135','138','141','142','143','144','145','146','148','149','150',
'153','155','156','157','158','159','160','161','162','163','165','166','167','170','171','174','176','177','179','182','183','185','187','188','189','191');
new_cluster2 <- list('11','26','34','37','42','54','62','65','92','98','105','116','123','130','136','137','139','147','169','173','175','178','190');
new_cluster3 <- list('1','9','17','18','30','40','70','71','80','86','90','96','97','99','103','111','112','126','133','152','154','186','192','193');
new_cluster4 <- list('85','93','104','109','121','122','129','140','151','172','180','181');
new_cluster5 <- list('91','119','164','168','184');
#creating separate dataframes
cluster1 <- subset(data_BLP[data_BLP$temp_sbjID %in% new_cluster1,],select=c(temp_sbjID,HistoryL1Score,HistoryL2Score,HistoryL3Score,HistoryL4Score,UseL1Score,UseL2Score,UseL3Score,UseL4Score,ProficiencyL1Score,ProficiencyL2Score,ProficiencyL3Score,ProficiencyL4Score,AttitudeL1Score,AttitudeL2Score,AttitudeL3Score,AttitudeL4Score,L1Score,L2Score,L3Score,L4Score));
# n = 129
cluster2 <- subset(data_BLP[data_BLP$temp_sbjID %in% new_cluster2,],select=c(temp_sbjID,HistoryL1Score,HistoryL2Score,HistoryL3Score,HistoryL4Score,UseL1Score,UseL2Score,UseL3Score,UseL4Score,ProficiencyL1Score,ProficiencyL2Score,ProficiencyL3Score,ProficiencyL4Score,AttitudeL1Score,AttitudeL2Score,AttitudeL3Score,AttitudeL4Score,L1Score,L2Score,L3Score,L4Score));
# n = 23
cluster3 <- subset(data_BLP[data_BLP$temp_sbjID %in% new_cluster3,],select=c(temp_sbjID,HistoryL1Score,HistoryL2Score,HistoryL3Score,HistoryL4Score,UseL1Score,UseL2Score,UseL3Score,UseL4Score,ProficiencyL1Score,ProficiencyL2Score,ProficiencyL3Score,ProficiencyL4Score,AttitudeL1Score,AttitudeL2Score,AttitudeL3Score,AttitudeL4Score,L1Score,L2Score,L3Score,L4Score));
# n = 24
cluster4 <- subset(data_BLP[data_BLP$temp_sbjID %in% new_cluster4,],select=c(temp_sbjID,HistoryL1Score,HistoryL2Score,HistoryL3Score,HistoryL4Score,UseL1Score,UseL2Score,UseL3Score,UseL4Score,ProficiencyL1Score,ProficiencyL2Score,ProficiencyL3Score,ProficiencyL4Score,AttitudeL1Score,AttitudeL2Score,AttitudeL3Score,AttitudeL4Score,L1Score,L2Score,L3Score,L4Score));
# n = 12
cluster5 <- subset(data_BLP[data_BLP$temp_sbjID %in% new_cluster5,],select=c(temp_sbjID,HistoryL1Score,HistoryL2Score,HistoryL3Score,HistoryL4Score,UseL1Score,UseL2Score,UseL3Score,UseL4Score,ProficiencyL1Score,ProficiencyL2Score,ProficiencyL3Score,ProficiencyL4Score,AttitudeL1Score,AttitudeL2Score,AttitudeL3Score,AttitudeL4Score,L1Score,L2Score,L3Score,L4Score));
#getting average of scores to find dimension pulling clusters apart
cluster1_means <- data.frame('cluster_id'='1');
for (x in 2:21) {
name <- colnames(cluster1)[x];
mean <- mean(cluster1[,x]);
cluster1_means[name] <- mean;
};
cluster2_means <- data.frame('cluster_id'='2');
for (x in 2:21) {
name <- colnames(cluster2)[x];
mean <- mean(cluster2[,x]);
cluster2_means[name] <- mean;
};
cluster3_means <- data.frame('cluster_id'='3');
for (x in 2:21) {
name <- colnames(cluster3)[x];
mean <- mean(cluster3[,x]);
cluster3_means[name] <- mean;
};
cluster4_means <- data.frame('cluster_id'='4');
for (x in 2:21) {
name <- colnames(cluster4)[x];
mean <- mean(cluster4[,x]);
cluster4_means[name] <- mean;
};
cluster5_means <- data.frame('cluster_id'='5');
for (x in 2:21) {
name <- colnames(cluster5)[x];
mean <- mean(cluster5[,x]);
cluster5_means[name] <- mean;
};
cluster_means <- rbind(cluster1_means, cluster2_means, cluster3_means, cluster4_means, cluster5_means);
# testing scores per cluster
data_BLP_extracted_all <- subset(data_BLP, select=c(temp_sbjID,sbj_ID,HistoryL1Score,HistoryL2Score,HistoryL3Score,HistoryL4Score,UseL1Score,UseL2Score,UseL3Score,UseL4Score,ProficiencyL1Score,ProficiencyL2Score,ProficiencyL3Score,ProficiencyL4Score,AttitudeL1Score,AttitudeL2Score,AttitudeL3Score,AttitudeL4Score,L1Score,L2Score,L3Score,L4Score,lang_var,lang_ent,multi_exp,L1_L2_diff,RC1_L3,RC9_L4,RC2_use_L1vsL2,RC6_use_L4));
data_BLP_extracted_all$cluster <- "1";
data_BLP_extracted_all$cluster[data_BLP_extracted_all$temp_sbjID %in% new_cluster2] <- "2";
data_BLP_extracted_all$cluster[data_BLP_extracted_all$temp_sbjID %in% new_cluster3] <- "3";
data_BLP_extracted_all$cluster[data_BLP_extracted_all$temp_sbjID %in% new_cluster4] <- "4";
data_BLP_extracted_all$cluster[data_BLP_extracted_all$temp_sbjID %in% new_cluster5] <- "5";
data_BLP_extracted_all$cluster <- as.factor(data_BLP_extracted_all$cluster);
data_BLP_testing_all <- list(data_testing_0M_means,data_testing_1M_means,data_testing_2M_means,data_BLP_extracted_all) %>% reduce(inner_join, by='sbj_ID');
data_testing_lm
View(data_testing_lm)
################################
# ANALYSIS WITH JUST CLUSTER 1 #
################################
# testing
data_testing_cluster1 <- data_testing_lm[data_testing_lm$cluster=='1'];
################################
# ANALYSIS WITH JUST CLUSTER 1 #
################################
# testing
data_testing_c1 <- data_testing_lm[data_testing_lm$cluster=='1'];
data_testing_c1_0M_yes <- aggregate(data_testing_c1$observed[data_testing_c1$testing_condition=='0M'], by=list(data_testing_c1$sbj_ID[data_testing_c1$testing_condition=='0M']), FUN = function(x) sum(x == 1));
View(data_testing_c1)
################################
# ANALYSIS WITH JUST CLUSTER 1 #
################################
# testing
data_testing_c1 <- data_testing_lm[data_testing_lm$cluster=='1',];
################################
# ANALYSIS WITH JUST CLUSTER 1 #
################################
# testing
data_testing_c1 <- data_testing_lm[,data_testing_lm$cluster=='1'];
################################
# ANALYSIS WITH JUST CLUSTER 1 #
################################
# testing
data_testing_c1 <- subset(data_testing_lm[data_testing_lm$cluster=='1']);
################################
# ANALYSIS WITH JUST CLUSTER 1 #
################################
# testing
data_testing_c1 <- subset(data_testing_lm[data_testing_lm$cluster=='1',]);
View(data_testing_c1)
################################
# ANALYSIS WITH JUST CLUSTER 1 #
################################
# testing
data_testing_c1 <- subset(data_testing_lm[data_testing_lm$cluster==1,]);
View(data_testing_lm)
# cluster lmer
data_testing_lm$cluster <- "1";
data_testing_lm$cluster[data_testing_lm$temp_sbjID %in% new_cluster2] <- "2";
data_testing_lm$cluster[data_testing_lm$temp_sbjID %in% new_cluster3] <- "3";
data_testing_lm$cluster[data_testing_lm$temp_sbjID %in% new_cluster4] <- "4";
data_testing_lm$cluster[data_testing_lm$temp_sbjID %in% new_cluster5] <- "5";
data_testing_lm$cluster <- as.factor(data_testing_lm$cluster);
################################
# ANALYSIS WITH JUST CLUSTER 1 #
################################
# testing
data_testing_c1 <- subset(data_testing_lm[data_testing_lm$cluster=="1",]);
data_testing_c1_0M_yes <- aggregate(data_testing_c1$observed[data_testing_c1$testing_condition=='0M'], by=list(data_testing_c1$sbj_ID[data_testing_c1$testing_condition=='0M']), FUN = function(x) sum(x == 1));
names(data_testing_c1_0M_yes) <- c("sbj_ID","x_0");
data_testing_c1_0M_yes$x_0 <- data_testing_c1_0M_yes$x_0/total_0M*100; #transform into percent
summary(data_testing_c1_0M_yes$x_0);
#FULL DATASET: min:12.5 Q1:40 med:50 mean:49.44 Q3:60 max:100
#CLUSTER 1: min:12.5 Q1:40 med:50 mean:48.47 Q3:57.5 max:100
t.test(data_testing_c1_0M_yes$x_0, mu=50);
#FULL DATASET: t=-0.53 p=0.60 CI=[47.37;51.52] -> not significantly different from 50%
#FULL DATASET: t=-1.22 p=0.23 CI=[45.98;50.96] -> not significantly different from 50%
boxplot(data_testing_c1_0M_yes$x, ylab = "Percent of 'yes' responses",ylim=c(0,100),yaxs="i");
abline(h=50, lty=5);
# 0M scores
data_testing_c1_0M_means <- aggregate(data_testing_c1$correct[data_testing_c1$testing_condition=='0M'], list(data_testing_c1$sbj_ID[data_testing_c1$testing_condition=='0M']), FUN=mean, na.rm=TRUE);
names(data_testing_c1_0M_means) <- c("sbj_ID","x_0");
summary(data_testing_c1_0M_means$x_0);
#FULL DATASET: min:0 Q1:0.40 med:0.50 mean:0.51 Q3:0.6 max:0.88
#CLUSTER 1: min:0 Q1:0.43 med:0.50 mean:0.52 Q3:0.6 max:0.88
var(data_testing_c1_0M_means$x_0);
#FULL DATASET: var=0.02
#CLUSTER 1: var=0.02
plot(data_testing_c1_0M_means$x_0,pch=3,ylim=c(0,1),yaxs="i");
abline(h=0.5, lty=5);
#quite a wide range of scores
hist(data_testing_c1_0M_means$x_0); # normally distributed
t.test(data_testing_c1_0M_means$x_0, mu=50);
t.test(data_testing_0M_means$x_0, mu=0.5);
t.test(data_testing_1M_means$x_1, mu=50);
t.test(data_testing_1M_means$x_1, mu=0.5);
t.test(data_testing_c1_0M_means$x_0, mu=0.5);
# 1M yes responses boxplot
data_testing_c1_1M_yes <- aggregate(data_testing_c1$observed[data_testing_c1$testing_condition=='1M'], by=list(data_testing_c1$sbj_ID[data_testing_c1$testing_condition=='1M']), FUN = function(x) sum(x == 1));
names(data_testing_c1_1M_yes) <- c("sbj_ID","x_1");
data_testing_c1_1M_yes$x_1 <- data_testing_c1_1M_yes$x_1/total_1M*100; #transform into percent
summary(data_testing_c1_1M_yes$x_1);
#FULL DATASET: min:10.8 Q1:46 med:56.8 mean:55 Q3:62.2 max:100
#CLUSTER 1: min:10.8 Q1:46 med:54.01 mean:54.3 Q3:62.2 max:100
t.test(data_testing_c1_0M_means$x_0, mu=0.5);
#FULL DATASET: min:10.8 Q1:46 med:56.8 mean:55 Q3:62.2 max:100
#CLUSTER 1: min:10.8 Q1:46 med:54.01 mean:54.3 Q3:62.2 max:100
t.test(data_testing_c1_1M_means$x_1, mu=0.5);
#FULL DATASET: min:10.8 Q1:46 med:56.8 mean:55 Q3:62.2 max:100
#CLUSTER 1: min:10.8 Q1:46 med:54.01 mean:54.3 Q3:62.2 max:100
t.test(data_testing_c1_1M_yes$x_1, mu=0.5);
#FULL DATASET: min:10.8 Q1:46 med:56.8 mean:55 Q3:62.2 max:100
#CLUSTER 1: min:10.8 Q1:46 med:54.01 mean:54.3 Q3:62.2 max:100
t.test(data_testing_c1_1M_yes$x_1, mu=50);
#FULL DATASET: t=4.94 p=1.70e-6 CI=[53.01;57.01] -> significantly above 50%
#CLUSTER 1: t=3.53 p=0.001 CI=[51.89;56.72] -> significantly above 50%
boxplot(data_testing_c1_1M_yes$x, ylab = "Percent of 'yes' responses",ylim=c(0,100),yaxs="i");
abline(h=50, lty=5);
# 1M scores
data_testing_c1_1M_means <- aggregate(data_testing_c1$correct[data_testing_c1$testing_condition=='1M'], list(data_testing_c1$sbj_ID[data_testing_c1$testing_condition=='1M']), FUN=mean, na.rm=TRUE);
names(data_testing_c1_1M_means) <- c("sbj_ID","x_1");
summary(data_testing_c1_1M_means$x_1);
#FULL DATASET: min:0.1 Q1:0.46 med:0.57 mean:0.55 Q3:0.62 max:1
#CLUSTER 1: min:0.11 Q1:0.46 med:0.54 mean:0.54 Q3:0.62 max:1
var(data_testing_c1_1M_means$x_1);
#FULL DATASET: var=0.02
#CLUSTER 1: var=0.02
plot(data_testing_c1_1M_means$x_1,pch=3,ylim=c(0,1),yaxs="i");
abline(h=0.5, lty=5);
#quite a wide range of scores
hist(data_testing_c1_1M_means$x_1); # normally distributed
t.test(data_testing_c1_1M_means$x_1, mu=0.5);
# 2M yes responses boxplot
data_testing_c1_2M_yes <- aggregate(data_testing_c1$observed[data_testing_c1$testing_condition=='2M'], by=list(data_testing_c1$sbj_ID[data_testing_c1$testing_condition=='2M']), FUN = function(x) sum(x == 1));
names(data_testing_c1_2M_yes) <- c("sbj_ID","x_2");
data_testing_c1_2M_yes$x_2 <- data_testing_c1_2M_yes$x_2/total_2M*100; #transform into percent
summary(data_testing_c1_2M_yes$x_2);
#FULL DATASET: min:11.8 Q1:55.9 med:64.7 mean:64 Q3:73.5 max:100
#CLUSTER 1: min:11.8 Q1:55.9 med:64.7 mean:63.6 Q3:73.5 max:94.12
t.test(data_testing_c1_2M_yes$x_2, mu=50);
#FULL DATASET: t=13.54 p<2.2e-16 CI=[61.98;66.06] -> significantly above 50%
#CLUSTER 1: t=11.13 p<2.2e-16 CI=[61.17;66.01] -> significantly above 50%
boxplot(data_testing_c1_2M_yes$x, ylab = "Percent of 'yes' responses",ylim=c(0,100),yaxs="i");
abline(h=50, lty=5);
# yes responses across conditions
library(tidyverse);
data_testing_c1_conditions <- list(data_testing_c1_0M_yes,data_testing_c1_1M_yes,data_testing_c1_2M_yes) %>% reduce(inner_join, by='sbj_ID');
boxplot(data_testing_c1_conditions$x_0,data_testing_c1_conditions$x_1,data_testing_c1_conditions$x_2, ylab='Percent of "yes" responses', xlab="Condition", names=c('0M','1M','2M'),ylim=c(0,100),yaxs="i");
abline(h=50, lty=5);
conditions_table <- table(data_testing_c1$testing_condition, data_testing_c1$observed);
conditions_table_c1 <- table(data_testing_c1$testing_condition, data_testing_c1$observed);
chisq.test(conditions_table_c1);
#FAMILIARITY
# familiarity accuracy boxplot
data_familiarity_c1 <- subset(data_familiarity[data_familiarity$sbj_ID %in% data_testing_c1$sbj_ID])
#FAMILIARITY
# familiarity accuracy boxplot
data_familiarity_c1 <- subset(data_familiarity[data_familiarity$sbj_ID %in% data_testing_c1$sbj_ID,])
data_familiarity_c1_means <- aggregate(data_familiarity_c1$correct, list(data_familiarity_c1$sbj_ID), FUN=mean);
colnames(data_familiarity_c1_means)[colnames(data_familiarity_c1_means)=="Group.1"]="sbj_ID";
boxplot(data_familiarity_c1_means$x, ylab = "Familiarity score");
abline(h=0.5, lty=5);
summary(data_familiarity_c1_means$x);
#FULL DATASET: min:0.29 Q1:0.50 med:0.57 mean:0.57 Q3:0.64 max:0.86
#CLUSTER 1: min:0.32 Q1:0.50 med:0.57 mean:0.57 Q3:0.64 max:0.86
hist(data_familiarity_c1_means$x); # normally distributed
t.test(data_familiarity_c1_means$x, mu=0.50);
# BLP
data_BLP_c1 <- subset(data_BLP[data_BLP$sbj_ID %in% data_testing_c1$sbj_ID,])
# lmer
# TESTING #
data_testing_c1_lm <- merge(data_testing_c1, data_BLP_c1[,c('temp_sbjID','sbj_ID','Gender','Age','lang_ent','multi_exp','L1_L2_diff','RC1_L3','RC9_L4','RC2_use_L1vsL2','RC6_use_L4')], by.x='sbj_ID',by.y='sbj_ID', all.x=T);
#all testing conditions - 'yes' responses
m30 <- glmer(observed ~ scale(trialn) + testing_condition*Gender + (1+testing_condition|sbj_ID), data=subset(data_testing_c1_lm, rt>300 & rt<3000), family='binomial');
View(data_testing_c1_lm)
View(data_BLP_c1)
View(data_testing_c1_lm)
################################
# ANALYSIS WITH JUST CLUSTER 1 #
################################
# testing
data_testing_c1 <- subset(data_testing_lm[data_testing_lm$cluster=="1",]);
View(data_testing_c1)
# lmer
# TESTING #
data_testing_c1_lm <- subset(data_testing_lm[data_testing_lm$sbj_ID %in% data_testing_c1$sbj_ID,]);
#all testing conditions - 'yes' responses
m30 <- glmer(observed ~ scale(trialn) + testing_condition*Gender + (1+testing_condition|sbj_ID), data=subset(data_testing_c1_lm, rt>300 & rt<3000), family='binomial');
m31 <- glmer(observed ~ scale(trialn) + testing_condition*scale(Age) + (1+testing_condition|sbj_ID), data=subset(data_testing_c1_lm, rt>300 & rt<3000), family='binomial');
m32 <- glmer(observed ~ scale(trialn) + testing_condition*RC1_L3 + (1+testing_condition|sbj_ID), data=subset(data_testing_c1_lm, rt>300 & rt<3000), family='binomial');
m33 <- glmer(observed ~ scale(trialn) + testing_condition*RC9_L4 + (1+testing_condition|sbj_ID), data=subset(data_testing_c1_lm, rt>300 & rt<3000), family='binomial');
m34 <- glmer(observed ~ scale(trialn) + testing_condition*RC2_use_L1vsL2 + (1+testing_condition|sbj_ID), data=subset(data_testing_c1_lm, rt>300 & rt<3000), family='binomial');
m35 <- glmer(observed ~ scale(trialn) + testing_condition*RC6_use_L4 + (1+testing_condition|sbj_ID), data=subset(data_testing_c1_lm, rt>300 & rt<3000), family='binomial');
m36 <- glmer(observed ~ scale(trialn) + testing_condition*lang_ent + (1+testing_condition|sbj_ID), data=subset(data_testing_c1_lm, rt>300 & rt<3000), family='binomial');
m37 <- glmer(observed ~ scale(trialn) + testing_condition*scale(multi_exp) + (1|sbj_ID), data=subset(data_testing_c1_lm, rt>300 & rt<3000), family='binomial');
m38 <- glmer(observed ~ scale(trialn) + testing_condition*scale(L1_L2_diff) + (1+testing_condition|sbj_ID), data=subset(data_testing_c1_lm, rt>300 & rt<3000), family='binomial');
#2M - accuracy
data_testing__c1_lm_2M <- subset(data_testing_c1_lm_2M[data_testing_c1_lm_2M$sbj_ID %in% data_testing_c1$sbj_ID,]);
#2M - accuracy
data_testing_c1_lm_2M <- subset(data_testing_c1_lm_2M[data_testing_c1_lm_2M$sbj_ID %in% data_testing_c1$sbj_ID,]);
m39 <- glmer(observed ~ scale(trialn) + expected*Gender + (1+expected|sbj_ID), data=data_testing_c1_lm_2M, family='binomial');
m40 <- glmer(observed ~ scale(trialn) + expected*scale(Age) + (1+expected|sbj_ID), data=data_testing_c1_lm_2M, family='binomial');
m41 <- glmer(observed ~ scale(trialn) + expected*RC1_L3 + (1+expected|sbj_ID), data=data_testing_c1_lm_2M, family='binomial');
m42 <- glmer(observed ~ scale(trialn) + expected*RC9_L4 + (1+expected|sbj_ID), data=data_testing_c1_lm_2M, family='binomial');
m43 <- glmer(observed ~ scale(trialn) + expected*RC2_use_L1vsL2 + (1+expected|sbj_ID), data=data_testing_c1_lm_2M, family='binomial');
m44 <- glmer(observed ~ scale(trialn) + expected*RC6_use_L4 + (1+expected|sbj_ID), data=data_testing_c1_lm_2M, family='binomial');
m45 <- glmer(observed ~ scale(trialn) + expected*lang_ent + (1+expected|sbj_ID), data=data_testing_c1_lm_2M, family='binomial');
m46 <- glmer(observed ~ scale(trialn) + expected*scale(multi_exp) + (1+expected|sbj_ID), data=data_testing_c1_lm_2M, family='binomial');
m47 <- glmer(observed ~ scale(trialn) + expected*scale(L1_L2_diff) + (1+expected|sbj_ID), data=data_testing_c1_lm_2M, family='binomial');
data_c1_BLP_familiarity <- subset(data_BLP_familiarity[data_BLP_familiarity$sbj_ID %in% data_testing_c1$sbj_ID,]);
m48 <- glmer(correct ~ scale(trialn) + RC1_L3 + (1|sbj_ID), data=data_c1_BLP_familiarity, family='binomial');
m49 <- glmer(correct ~ scale(trialn) + RC9_L4 + (1|sbj_ID), data=data_c1_BLP_familiarity, family='binomial');
m50 <- glmer(correct ~ scale(trialn) + RC2_use_L1vsL2 + (1|sbj_ID), data=data_c1_BLP_familiarity, family='binomial');
m51 <- glmer(correct ~ scale(trialn) + RC6_use_L4 + (1|sbj_ID), data=data_c1_BLP_familiarity, family='binomial');
m52 <- glmer(correct ~ scale(trialn) + lang_ent + (1|sbj_ID), data=data_c1_BLP_familiarity, family='binomial');
m53 <- glmer(correct ~ scale(trialn) + scale(multi_exp) + (1|sbj_ID), data=data_c1_BLP_familiarity, family='binomial');
m54 <- glmer(correct ~ scale(trialn) + scale(L1_L2_diff) + (1|sbj_ID), data=data_c1_BLP_familiarity, family='binomial');
summary(m30);
summary(m30);
summary(m31); # Age significant as main effect (p=0.03) and interaction (Age*1M p=0.05. Age*2M p=0.006)
summary(m32);
summary(m33);
summary(m34);
summary(m35);
summary(m36);
summary(m37);
summary(m38);
summary(m39);
m39 <- glmer(observed ~ scale(trialn) + expected*Gender + (1+expected|sbj_ID), data=data_testing_c1_lm_2M, family='binomial');
#2M - accuracy
data_testing_c1_lm_2M <- subset(data_testing_c1_lm_2M[data_testing_c1_lm_2M$sbj_ID %in% data_testing_c1$sbj_ID,]);
#2M - accuracy
data_testing_c1_lm_2M <- subset(data_testing_lm_2M[data_testing_lm_2M$sbj_ID %in% data_testing_c1$sbj_ID,]);
m39 <- glmer(observed ~ scale(trialn) + expected*Gender + (1+expected|sbj_ID), data=data_testing_c1_lm_2M, family='binomial');
# Gender non sig (p=0.13 for Other, p=0.15 for Woman)
m40 <- glmer(observed ~ scale(trialn) + expected*scale(Age) + (1+expected|sbj_ID), data=data_testing_c1_lm_2M, family='binomial');
m41 <- glmer(observed ~ scale(trialn) + expected*RC1_L3 + (1+expected|sbj_ID), data=data_testing_c1_lm_2M, family='binomial');
m42 <- glmer(observed ~ scale(trialn) + expected*RC9_L4 + (1+expected|sbj_ID), data=data_testing_c1_lm_2M, family='binomial');
m43 <- glmer(observed ~ scale(trialn) + expected*RC2_use_L1vsL2 + (1+expected|sbj_ID), data=data_testing_c1_lm_2M, family='binomial');
m44 <- glmer(observed ~ scale(trialn) + expected*RC6_use_L4 + (1+expected|sbj_ID), data=data_testing_c1_lm_2M, family='binomial');
m45 <- glmer(observed ~ scale(trialn) + expected*lang_ent + (1+expected|sbj_ID), data=data_testing_c1_lm_2M, family='binomial');
m46 <- glmer(observed ~ scale(trialn) + expected*scale(multi_exp) + (1+expected|sbj_ID), data=data_testing_c1_lm_2M, family='binomial');
m47 <- glmer(observed ~ scale(trialn) + expected*scale(L1_L2_diff) + (1+expected|sbj_ID), data=data_testing_c1_lm_2M, family='binomial');
summary(m39);
summary(m40);
summary(m41);
summary(m42);
summary(m43);
summary(m44);
summary(m45);
summary(m46);
summary(m47);
summary(m48);
summary(m49);
summary(m50);
summary(m51);
summary(m52);
summary(m53);
summary(m54);
summary(m30);
summary(m32);
summary(m32);
summary(m31);
m10 <- glmer(observed ~ scale(trialn) + expected*Gender + (1+expected|sbj_ID), data=data_testing_lm_2M, family='binomial');
summary(m10); # Gender non sig (p=0.13 for Other, p=0.15 for Woman)
summary(data_BLP$Gender)
