data_all_testing <- subset(data_all_testing, select = -c(X)) # remove redundant column added by Pavlovia
data_testing <- data_all_testing[data_all_testing$sbj_ID %in% participants,]; # n = 190 participants
View(data_all_testing)
summary(data_testing)
22920/120
data_testing$temp_sbjID <- rep(1:191, each=120); # necessary: R doesn't like format of Prolific IDs
# make some variables factors
data_testing$sbj_ID <- as.factor(data_testing$sbj_ID);
data_testing$task <- as.factor(data_testing$task);
data_testing$item <- as.factor(data_testing$item);
data_testing$testing_condition <- as.factor(data_testing$testing_condition);
data_testing$correct <- as.logical(data_testing$correct);
summary(data_testing);
# BLP ---------------------------------------------------------------------
data_all_BLP <- read.csv("exp2_BLP_preprocessed.csv",header=T,sep=",");
data_all_BLP <- subset(data_all_BLP, select = -c(X)); # remove redundant column added by Pavlovia
data_BLP <- data_all_BLP[data_all_BLP$sbj_ID %in% participants,]; # n = 92 participants
data_BLP <- data_BLP[!data_BLP$sbj_ID %in% c('667d631ef036f8ef4ff2f4f3','6488afe97766c9083ffc3171','666f0fb7d9900bb03f5d99a1','660310c1b1a7ea09dee682e2','5faacca24cd0384c1fa08be1', '65f7be6ac59662b24ac0f9b0', '664b7cd6b5a772dd1eddca37'),];
BLP_correction <- function(data_BLP)
{
data_BLP[data_BLP == "polish"] <- "Polish";
data_BLP[data_BLP == "english"|data_BLP=="ENGLISH"|data_BLP=="Englsih"|data_BLP=="Englsh"|data_BLP=="British"|data_BLP=="Engllish"|data_BLP=="ENGLISH "] <- "English";
data_BLP[data_BLP == "portuguese"|data_BLP=="Potuguese"] <- "Portuguese";
data_BLP[data_BLP =="SPANISH"|data_BLP=="Spnsh"|data_BLP=="spanish"] <- "Spanish";
data_BLP[data_BLP == "ITALIAN"|data_BLP=="italian"] <- "Italian";
data_BLP[data_BLP == "sotho"] <- "Sotho";
data_BLP[data_BLP == "Gree"|data_BLP=="GREEK"] <- "Greek";
data_BLP[data_BLP == "tshivenda"] <- "Tshivenda";
data_BLP[data_BLP == "Gujrau"] <- "Gujarati"; # to check
data_BLP[data_BLP == "ukrainian"|data_BLP=="ukranian"] <- "Ukrainian";
data_BLP[data_BLP == "SETSWANA"] <- "Setswana";
data_BLP[data_BLP == "afrikaans"] <- "Afrikaans";
data_BLP[data_BLP == "punjabi"] <- "Punjabi";
data_BLP[data_BLP == "siswati"] <- "Siswati";
data_BLP[data_BLP == "Germany"|data_BLP=="german"|data_BLP=="germany"|data_BLP=="GERMANY"] <- "German";
data_BLP[data_BLP == "russian"] <- "Russian";
data_BLP[data_BLP == "Isiulu"] <- "IsiZulu";
data_BLP[data_BLP == "ZULU"|data_BLP=="zulu"] <- "Zulu";
data_BLP[data_BLP == "northern sotho"] <- "Northern Sotho";
data_BLP[data_BLP == "chinese"] <- "Chinese";
data_BLP[data_BLP == "sesotho"] <- "Sesotho";
data_BLP[data_BLP == "sepedi"] <- "Sepedi";
data_BLP[data_BLP == "TSHIVENDA"] <- "Tshivenda";
data_BLP[data_BLP == "XHOSA"] <- "Xhosa";
data_BLP[data_BLP == "french"] <- "French";
data_BLP[data_BLP == "hungarian"] <- "Hungarian";
data_BLP[data_BLP == "POLISH"] <- "Polish";
data_BLP[data_BLP == "croatian"] <- "Croatian";
data_BLP[data_BLP == "bosnian"] <- "Bosnian";
data_BLP[data_BLP == "madarin"] <- "Mandarin";
data_BLP[data_BLP == "Icelandic and German"] <- "Icelandic";
data_BLP[data_BLP == "a little bit of russian"] <- "Russian";
data_BLP[data_BLP == "NDEBELE"] <- "Ndebele";
data_BLP[data_BLP == "urdu"] <- "Urdu";
data_BLP[data_BLP == "latvian"] <- "Latvian";
data_BLP[data_BLP == "Malayam"] <- "Malayan";
data_BLP[data_BLP == "swahili"] <- "Swahili";
data_BLP[data_BLP == "serbian"] <- "Serbian";
data_BLP[data_BLP == "SEPEDI"] <- "Sepedi";
data_BLP[data_BLP == "japanese"] <- "Japanese";
data_BLP[data_BLP == "N/A"|data_BLP=="---"] <- "n/a";
data_BLP["L1"][is.na(data_BLP["L1"])] <- "n/a";
data_BLP["L2"][is.na(data_BLP["L2"])] <- "n/a";
data_BLP["L3"][is.na(data_BLP["L3"])] <- "n/a";
data_BLP["L4"][is.na(data_BLP["L4"])] <- "n/a";
# correcting some participants' demographic information - correction based off of Prolific's information
data_BLP["Age"][data_BLP["sbj_ID"] == "60c4a402716a8f9074fcd92e"] <- "21";
data_BLP["Age"][data_BLP["sbj_ID"] == "6103cbc5310ffddfafa01661"] <- "25";
data_BLP["Age"][data_BLP["sbj_ID"] == "6598994f0e7e5db183bfe3ee"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "66168e55cb60649609600268"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "579e18fc4a84da00014c6f4f"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "5c1a6bd8f9250d0001b7c589"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "5f6f3d061214fe49ec2b9619"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "60ca0b60979a23c83652c303"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "653fb764c9aed77c01457531"] <- "20";
data_BLP["Age"][data_BLP["sbj_ID"] == "6557def45fc0ffbd46ad01de"] <- "18";
data_BLP["Age"][data_BLP["sbj_ID"] == "657bfe6e245848c8fef0b389"] <- "20";
data_BLP["Age"][data_BLP["sbj_ID"] == "65abe33e1c79ea32da32ab0f"] <- "19";
data_BLP["Age"][data_BLP["sbj_ID"] == "65f33b94cd6885d54029582d"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "6634e4d4f1950b4dcd44d4d9"] <- "19";
data_BLP["Age"][data_BLP["sbj_ID"] == "664b7cd6b5a772dd1eddca37"] <- "25";
data_BLP["Age"][data_BLP["sbj_ID"] == "6659ca4701d47b95a09ba736"] <- "19";
data_BLP["Age"][data_BLP["sbj_ID"] == "667dd7126e7a9073e0af73fd"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "6681625ff9dfa8a95bb0359d"] <- "21";
}
BLP_correction(data_BLP);
View(data_BLP)
BLP_correction(data_BLP);
View(data_BLP)
data_BLP <- BLP_correction(data_BLP);
View(data_BLP)
# BLP ---------------------------------------------------------------------
data_all_BLP <- read.csv("exp2_BLP_preprocessed.csv",header=T,sep=",");
data_all_BLP <- subset(data_all_BLP, select = -c(X)); # remove redundant column added by Pavlovia
data_BLP <- data_all_BLP[data_all_BLP$sbj_ID %in% participants,]; # n = 92 participants
data_BLP <- data_BLP[!data_BLP$sbj_ID %in% c('667d631ef036f8ef4ff2f4f3','6488afe97766c9083ffc3171','666f0fb7d9900bb03f5d99a1','660310c1b1a7ea09dee682e2','5faacca24cd0384c1fa08be1', '65f7be6ac59662b24ac0f9b0', '664b7cd6b5a772dd1eddca37'),];
data_BLP2 <- BLP_correction(data_BLP);
View(data_BLP2)
# BLP ---------------------------------------------------------------------
data_all_BLP <- read.csv("exp2_BLP_preprocessed.csv",header=T,sep=",");
data_all_BLP <- subset(data_all_BLP, select = -c(X)); # remove redundant column added by Pavlovia
data_BLP <- data_all_BLP[data_all_BLP$sbj_ID %in% participants,]; # n = 92 participants
data_BLP <- data_BLP[!data_BLP$sbj_ID %in% c('667d631ef036f8ef4ff2f4f3','6488afe97766c9083ffc3171','666f0fb7d9900bb03f5d99a1','660310c1b1a7ea09dee682e2','5faacca24cd0384c1fa08be1', '65f7be6ac59662b24ac0f9b0', '664b7cd6b5a772dd1eddca37'),];
BLP_correction <- function(data_BLP)
{
data_BLP[data_BLP == "polish"] <- "Polish";
data_BLP[data_BLP == "english"|data_BLP=="ENGLISH"|data_BLP=="Englsih"|data_BLP=="Englsh"|data_BLP=="British"|data_BLP=="Engllish"|data_BLP=="ENGLISH "] <- "English";
data_BLP[data_BLP == "portuguese"|data_BLP=="Potuguese"] <- "Portuguese";
data_BLP[data_BLP =="SPANISH"|data_BLP=="Spnsh"|data_BLP=="spanish"] <- "Spanish";
data_BLP[data_BLP == "ITALIAN"|data_BLP=="italian"] <- "Italian";
data_BLP[data_BLP == "sotho"] <- "Sotho";
data_BLP[data_BLP == "Gree"|data_BLP=="GREEK"] <- "Greek";
data_BLP[data_BLP == "tshivenda"] <- "Tshivenda";
data_BLP[data_BLP == "Gujrau"] <- "Gujarati"; # to check
data_BLP[data_BLP == "ukrainian"|data_BLP=="ukranian"] <- "Ukrainian";
data_BLP[data_BLP == "SETSWANA"] <- "Setswana";
data_BLP[data_BLP == "afrikaans"] <- "Afrikaans";
data_BLP[data_BLP == "punjabi"] <- "Punjabi";
data_BLP[data_BLP == "siswati"] <- "Siswati";
data_BLP[data_BLP == "Germany"|data_BLP=="german"|data_BLP=="germany"|data_BLP=="GERMANY"] <- "German";
data_BLP[data_BLP == "russian"] <- "Russian";
data_BLP[data_BLP == "Isiulu"] <- "IsiZulu";
data_BLP[data_BLP == "ZULU"|data_BLP=="zulu"] <- "Zulu";
data_BLP[data_BLP == "northern sotho"] <- "Northern Sotho";
data_BLP[data_BLP == "chinese"] <- "Chinese";
data_BLP[data_BLP == "sesotho"] <- "Sesotho";
data_BLP[data_BLP == "sepedi"] <- "Sepedi";
data_BLP[data_BLP == "TSHIVENDA"] <- "Tshivenda";
data_BLP[data_BLP == "XHOSA"] <- "Xhosa";
data_BLP[data_BLP == "french"] <- "French";
data_BLP[data_BLP == "hungarian"] <- "Hungarian";
data_BLP[data_BLP == "POLISH"] <- "Polish";
data_BLP[data_BLP == "croatian"] <- "Croatian";
data_BLP[data_BLP == "bosnian"] <- "Bosnian";
data_BLP[data_BLP == "madarin"] <- "Mandarin";
data_BLP[data_BLP == "Icelandic and German"] <- "Icelandic";
data_BLP[data_BLP == "a little bit of russian"] <- "Russian";
data_BLP[data_BLP == "NDEBELE"] <- "Ndebele";
data_BLP[data_BLP == "urdu"] <- "Urdu";
data_BLP[data_BLP == "latvian"] <- "Latvian";
data_BLP[data_BLP == "Malayam"] <- "Malayan";
data_BLP[data_BLP == "swahili"] <- "Swahili";
data_BLP[data_BLP == "serbian"] <- "Serbian";
data_BLP[data_BLP == "SEPEDI"] <- "Sepedi";
data_BLP[data_BLP == "japanese"] <- "Japanese";
data_BLP[data_BLP == "N/A"|data_BLP=="---"] <- "n/a";
data_BLP["L1"][is.na(data_BLP["L1"])] <- "n/a";
data_BLP["L2"][is.na(data_BLP["L2"])] <- "n/a";
data_BLP["L3"][is.na(data_BLP["L3"])] <- "n/a";
data_BLP["L4"][is.na(data_BLP["L4"])] <- "n/a";
# correcting some participants' demographic information - correction based off of Prolific's information
data_BLP["Age"][data_BLP["sbj_ID"] == "60c4a402716a8f9074fcd92e"] <- "21";
data_BLP["Age"][data_BLP["sbj_ID"] == "6103cbc5310ffddfafa01661"] <- "25";
data_BLP["Age"][data_BLP["sbj_ID"] == "6598994f0e7e5db183bfe3ee"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "66168e55cb60649609600268"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "579e18fc4a84da00014c6f4f"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "5c1a6bd8f9250d0001b7c589"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "5f6f3d061214fe49ec2b9619"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "60ca0b60979a23c83652c303"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "653fb764c9aed77c01457531"] <- "20";
data_BLP["Age"][data_BLP["sbj_ID"] == "6557def45fc0ffbd46ad01de"] <- "18";
data_BLP["Age"][data_BLP["sbj_ID"] == "657bfe6e245848c8fef0b389"] <- "20";
data_BLP["Age"][data_BLP["sbj_ID"] == "65abe33e1c79ea32da32ab0f"] <- "19";
data_BLP["Age"][data_BLP["sbj_ID"] == "65f33b94cd6885d54029582d"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "6634e4d4f1950b4dcd44d4d9"] <- "19";
data_BLP["Age"][data_BLP["sbj_ID"] == "664b7cd6b5a772dd1eddca37"] <- "25";
data_BLP["Age"][data_BLP["sbj_ID"] == "6659ca4701d47b95a09ba736"] <- "19";
data_BLP["Age"][data_BLP["sbj_ID"] == "667dd7126e7a9073e0af73fd"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "6681625ff9dfa8a95bb0359d"] <- "21";
return (data_BLP)
}
data_BLP <- BLP_correction(data_BLP);
View(data_BLP)
# BLP ---------------------------------------------------------------------
data_all_BLP <- read.csv("exp2_BLP_preprocessed.csv",header=T,sep=",");
data_all_BLP <- subset(data_all_BLP, select = -c(X)); # remove redundant column added by Pavlovia
data_BLP <- data_all_BLP[data_all_BLP$sbj_ID %in% participants,]; # n = 92 participants
data_BLP <- data_BLP[!data_BLP$sbj_ID %in% c('667d631ef036f8ef4ff2f4f3','6488afe97766c9083ffc3171','666f0fb7d9900bb03f5d99a1','660310c1b1a7ea09dee682e2','5faacca24cd0384c1fa08be1', '65f7be6ac59662b24ac0f9b0', '664b7cd6b5a772dd1eddca37'),];
BLP_correction <- function(data_BLP)
{
data_BLP[data_BLP == "polish"] <- "Polish";
data_BLP[data_BLP == "english"|data_BLP=="ENGLISH"|data_BLP=="Englsih"|data_BLP=="Englsh"|data_BLP=="British"|data_BLP=="Engllish"|data_BLP=="ENGLISH "] <- "English";
data_BLP[data_BLP == "portuguese"|data_BLP=="Potuguese"] <- "Portuguese";
data_BLP[data_BLP =="SPANISH"|data_BLP=="Spnsh"|data_BLP=="spanish"] <- "Spanish";
data_BLP[data_BLP == "ITALIAN"|data_BLP=="italian"] <- "Italian";
data_BLP[data_BLP == "sotho"] <- "Sotho";
data_BLP[data_BLP == "Gree"|data_BLP=="GREEK"] <- "Greek";
data_BLP[data_BLP == "tshivenda"] <- "Tshivenda";
data_BLP[data_BLP == "Gujrau"] <- "Gujarati"; # to check
data_BLP[data_BLP == "ukrainian"|data_BLP=="ukranian"] <- "Ukrainian";
data_BLP[data_BLP == "SETSWANA"] <- "Setswana";
data_BLP[data_BLP == "afrikaans"] <- "Afrikaans";
data_BLP[data_BLP == "punjabi"] <- "Punjabi";
data_BLP[data_BLP == "siswati"] <- "Siswati";
data_BLP[data_BLP == "Germany"|data_BLP=="german"|data_BLP=="germany"|data_BLP=="GERMANY"] <- "German";
data_BLP[data_BLP == "russian"] <- "Russian";
data_BLP[data_BLP == "Isiulu"] <- "IsiZulu";
data_BLP[data_BLP == "ZULU"|data_BLP=="zulu"] <- "Zulu";
data_BLP[data_BLP == "northern sotho"] <- "Northern Sotho";
data_BLP[data_BLP == "chinese"] <- "Chinese";
data_BLP[data_BLP == "sesotho"] <- "Sesotho";
data_BLP[data_BLP == "sepedi"] <- "Sepedi";
data_BLP[data_BLP == "TSHIVENDA"] <- "Tshivenda";
data_BLP[data_BLP == "XHOSA"] <- "Xhosa";
data_BLP[data_BLP == "french"] <- "French";
data_BLP[data_BLP == "hungarian"] <- "Hungarian";
data_BLP[data_BLP == "POLISH"] <- "Polish";
data_BLP[data_BLP == "croatian"] <- "Croatian";
data_BLP[data_BLP == "bosnian"] <- "Bosnian";
data_BLP[data_BLP == "madarin"] <- "Mandarin";
data_BLP[data_BLP == "Icelandic and German"] <- "Icelandic";
data_BLP[data_BLP == "a little bit of russian"] <- "Russian";
data_BLP[data_BLP == "NDEBELE"] <- "Ndebele";
data_BLP[data_BLP == "urdu"] <- "Urdu";
data_BLP[data_BLP == "latvian"] <- "Latvian";
data_BLP[data_BLP == "Malayam"] <- "Malayan";
data_BLP[data_BLP == "swahili"] <- "Swahili";
data_BLP[data_BLP == "serbian"] <- "Serbian";
data_BLP[data_BLP == "SEPEDI"] <- "Sepedi";
data_BLP[data_BLP == "japanese"] <- "Japanese";
data_BLP[data_BLP == "N/A"|data_BLP=="---"] <- "n/a";
data_BLP["L1"][is.na(data_BLP["L1"])] <- "n/a";
data_BLP["L2"][is.na(data_BLP["L2"])] <- "n/a";
data_BLP["L3"][is.na(data_BLP["L3"])] <- "n/a";
data_BLP["L4"][is.na(data_BLP["L4"])] <- "n/a";
# correcting some participants' demographic information - correction based off of Prolific's information
data_BLP["Age"][data_BLP["sbj_ID"] == "60c4a402716a8f9074fcd92e"] <- "21";
data_BLP["Age"][data_BLP["sbj_ID"] == "6103cbc5310ffddfafa01661"] <- "25";
data_BLP["Age"][data_BLP["sbj_ID"] == "6598994f0e7e5db183bfe3ee"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "66168e55cb60649609600268"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "579e18fc4a84da00014c6f4f"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "5c1a6bd8f9250d0001b7c589"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "5f6f3d061214fe49ec2b9619"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "60ca0b60979a23c83652c303"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "653fb764c9aed77c01457531"] <- "20";
data_BLP["Age"][data_BLP["sbj_ID"] == "6557def45fc0ffbd46ad01de"] <- "18";
data_BLP["Age"][data_BLP["sbj_ID"] == "657bfe6e245848c8fef0b389"] <- "20";
data_BLP["Age"][data_BLP["sbj_ID"] == "65abe33e1c79ea32da32ab0f"] <- "19";
data_BLP["Age"][data_BLP["sbj_ID"] == "65f33b94cd6885d54029582d"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "6634e4d4f1950b4dcd44d4d9"] <- "19";
data_BLP["Age"][data_BLP["sbj_ID"] == "664b7cd6b5a772dd1eddca37"] <- "25";
data_BLP["Age"][data_BLP["sbj_ID"] == "6659ca4701d47b95a09ba736"] <- "19";
data_BLP["Age"][data_BLP["sbj_ID"] == "667dd7126e7a9073e0af73fd"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "6681625ff9dfa8a95bb0359d"] <- "21";
return (data_BLP)
}
BLP_correction(data_BLP);
data_BLP <- BLP_correction(data_BLP);
#################### BUILDING ALL DATAFRAMES ####################
setwd("C:/Users/annal/OneDrive/Documents/GitHub/affixproject");
# participants list too many characters to be dealt by R in one line
participants1 <- list('579e18fc4a84da00014c6f4f','5b6aa4aa0d748b0001fb5260','5c1a6bd8f9250d0001b7c589','5c437f6a4fe4f800016e3d52','5c840aedbad8fb000106cb44','5d696d1c55742f001af29220','5db16ce33990ed0014564873','5e248b6f0c0b31718a9d3f31','5e2b03f0005f2a02c5a64f7b','5e6449ae5932461d728d2152','5e8b85a61e16e9057a996e36','5e9dad3fd8d8010ac6a18620','5ebd8f8679146d0a116bc257','5ecba4b6ef75d53505406d57','5ed14691e983f5067842fd20','5eee55e93867d30a7771e616','5ef0b54037a90c618ad9e97f','5eff8b9ad19111064484eff7','5f1165307d03fb0009716b8e','5f21c29511084913913af654','5f316280965ec564c886f978','5f35782429beab53ef93cc2d','5f3d119b77d8ba0009a79558','5f5a5d4618746310515e2828','5f6f3d061214fe49ec2b9619','5f8af153e27f001bcc23ffc4','5f8b724dc36e8c2ac6d5fb6e','5f9c2359530d3e067a300bd6','5faacca24cd0384c1fa08be1','5fade36bdde8092117469a42','5fb2946df797088a8c405c2e','5ff3a2554cfb7d507511d89f','5ffab69a57132749844b8020','5ffd4230d96f6b2649d31f72','60204c263941fb63d9d794bc','602d2adcef81ce6b843da09b','60379326171365000ac6ae93','6046435099c3d00becdb2dfb','604d5e61486bd0622d2102c0','6057a8fe2d302939fc759940','60907b8091341e8724ba80ed','60a18093c5c040498d3addf8','60a8bd22d03adbe92cbb9a5e','60bf28df4926a8b6391df575','60c4a402716a8f9074fcd92e','60c715c89bb47f3847a690f0','60c873a65a9883b52f70db6c','60ca0b60979a23c83652c303','60cef349a1fff159b5d4853e','60d26e7cd9f0761e4d12b9f8','60d9dfd4dcc09cf57dc92cb1','60db9c9850c39eea109ef1d3','60e586145b73b702a608bace','60e5ac4f3d93f294f5fa543b','60f9739250a5c6f6e4726336','6102ee48644f517877d64d2b','6103cbc5310ffddfafa01661','6106ac34408681f3b0d07396','610d45e26c9b141264755d3c','61118c6d3c980e8b5b50e2fa','6117bb7900c0ba81f079a4ee','611d180283c1129def9284e6','611e00dc377e4fb7a27725e8','611e125063d1a52330225838','611fd297eb06449f7f0a06b9','61200d0d71bd5c0f9f9716b2','61242dd5be1a06b174975a1f','61248a51eefb6797024ecb85','612cc44439ccefbbd5d4b278','612cd9f34adcee82f65685a1','613054cf8dffc8bbb1fc9cc4','6134d182408816f4c1284496','6135f6887f5dd1472f7d3d6e','6136a1e1159dc808ad660d89','613758e7a80409ba7f5affb6','613ca0a2040055a4e87c5d71','6148b49d6ac652cefd310332','615c1372e7e639775817487e','6166ef334de9e433e83bfb79','616ad7ac6299f99ce33cdc78','616b567b3e605b7245a9aead','61717173748006894b2b54ff','6171946a19f6673fb215c0c7','6171f219ee27aa0e23d076aa','61758dd4ab7ec0d91a929f3d','628ed30ae7ff849e8bc91c86','631a1795de5efe7d3395caa3','63c5335da2b625ab1ade7e7c','6413799cf7721ee0ce637e09','646e0d2370c16a7561ae7dcb','6488afe97766c9083ffc3171','649264e0b601af80c5677791','6492c23a1a7735dfaab2b095','6495a5f76daf70e418baf5f7','6497e970e2621e753513a695','64e7533f36d388e8b31d3309','64e8bd55c9089d5bf26c90cd','64e8c14bbe184c20cb9d0583','64e9d6f596308448ac67bb95');
participants2 <- list('64f61553b5635b5e00595923','64f7a35c5f6503caaa59f79f','64fc701b223abd16ad5c940e','650330fa0cbc534b423f41e9','6505a9adbb769aeea736a2f5','650aed9eb9cc2c717ba70c30','6511e688100fd33b378fa688','651c59ec0cb6fef4208190f5','651eda4af4a809dbba0bb002','65352001dbe3e18eae5a8300','65361483b7f9881afa9b4cda','653d2df588326f6f627b8cb5','653fb764c9aed77c01457531','654632f222cb15acd453c0d3','65523123662559399b1aa48a','6557def45fc0ffbd46ad01de','655f5b404a09c686df3b0143','655f8b959477c803eb906622','65672c69a3737224f1d0bbfa','65774d879c53cc867fbe070c','657bfe6e245848c8fef0b389','6597e935328d41ae3aeef33b','6598994f0e7e5db183bfe3ee','659ada2d6df23a57d8e56752','65a97217d4fb858939a16b0f','65a97afe116a650acc588c5b','65abe33e1c79ea32da32ab0f','65ae78fc9cd81e8e26612cb2','65b901451577b2a0f18bc7ab','65b96f3bbecf5e7d0f5853cd','65c23d4dbad7238169292b54','65cba84263ac644fa79702ca','65cf6d92ac6f7932b1470fb4','65dce7715387badaf80e875d','65e7259b24116547c5512668','65f33b94cd6885d54029582d','65f7be6ac59662b24ac0f9b0','65fae6b84fa6b3101d2ca4b1','65fb18ef1c73590e7aaf1d48','65fc949678623ac83f926940','66031000461c44484ac359a8','660310c1b1a7ea09dee682e2','660678406bba1ade08345803','6606800e185d326591af6f7a','6606c9d692990fbf223f63bb','660c0d70a8f60acced0c8cc8','660c265dce47171c0dd7d359','66156fd87e14e8a60c007e17','66168e55cb60649609600268','6616a8636a12b432e8d914b5','6617af3304fe756a213cce24','661c24ab06db7f1ff0146700','661ff04db0e4a8222d5c4dd7','66271b4aaaf60fd058302f09','6634e4d4f1950b4dcd44d4d9','6634f754adfec54a4b1aaed4','66383ecf52e239b6f2ad54f4','663a5bb8f7f79c7e04abc9b3','663e08a82c273a8ea28be4e7','664b550820b57425a150d8e2','664b7cd6b5a772dd1eddca37','664f48afa42c9a4a7ed2bb88','664f70fcf77160132d600e2c','6658f0a58f1ee667f4264a93','6659ca4701d47b95a09ba736','6659ebda18cf5c43dbcc7354','665d94712b964d877bf9f132','665f79d15be62c63a74883d6','6661bf2ef4b2d0892ad7a007','6662d40766c8aa595834461d','666306b0bf2de127943c419f','6666a56ce75a18f29904e527','6666cf176a54945ba62e8ca9','6667488c5f46f3da0c085419','666f0fb7d9900bb03f5d99a1','666fd8b3dc9f2e1de77b5db4','6672ee650699d871b742ca6b','667437b20a6f1d1ebf68714b','667972671949d2e1c0c9ff54','667d631ef036f8ef4ff2f4f3','667dd7126e7a9073e0af73fd','6681625ff9dfa8a95bb0359d','6682b6d8a001b7f57c513ecc','66844cc1407c6afd0e100482','668553fe2efd22c91cf88fb9','6685e1541643171c04ec0e35','668992b2f868cb89829346c2','6692b87aad65e83d4230c307','6693f13e028361f102a9ed86','66951e094b5bd0caf94e844f','669cc52163cce3554e97d184','615c47639c04e360b0a76f58');
participants <- c(participants1,participants2);
# d' function
dPrime <- function(sbj, expectedResp, observedResp)
{
sbjNumbers <- unique(sbj);
dprimes <- vector(length=length(sbjNumbers), mode="numeric");
log_beta <- vector(length=length(sbjNumbers), mode="numeric");
c <- vector(length=length(sbjNumbers), mode="numeric");
subjects <- vector(length=length(sbjNumbers), mode="integer");
counter <- 1;
for (s in sbjNumbers)
{
expectedRespCurrentSbj <- expectedResp[sbj==s];
observedRespCurrentSbj <- observedResp[sbj==s];
num_of_hits <- sum(observedRespCurrentSbj[expectedRespCurrentSbj==1])+.5;
num_of_fa <- sum(observedRespCurrentSbj[expectedRespCurrentSbj==0])+.5;
prop_of_hits <- num_of_hits/ (xtabs(~expectedRespCurrentSbj)[2]+1);
prop_of_fa <- num_of_fa/ (xtabs(~expectedRespCurrentSbj)[1]+1);
z_hits <- qnorm(prop_of_hits);
z_fa <- qnorm(prop_of_fa);
dprimes[counter] <- round(z_hits - z_fa, digits = 3);
log_beta[counter] <- round((z_fa^2 - z_hits^2)/2, digits = 3); #this is taken from Stanislaw and Todorov, PBR 1999. Log_beta=0 indicates no bias; negative values is bias for YES; positive values is bias for NO
c[counter] <- round( -(z_hits + z_fa)/2, digits = 3); # this is taken again from Stanislaw and Todorov, PBR 1999, who note that c "...assumes that subjects respond yes when the decision variable exceeds the criterion and no otherwise; responses are based directly on the decision variable, which some researchers regard as more plausible than assuming that responses are based on a likelihood ratio [which the assumption behind beta] (Richardson, 1994). Another advantage of c is that it is unaffected by changes in d', whereas Beta is (Ingham, 1970; Macmil- lan, 1993; McNicol, 1972, pp. 63--64)". Similarly to log_beta, c=0 is no bias, negative c is bias for YES, negative c is bias for NO.
subjects[counter] <- s;
counter <- counter + 1;
};
print(data.frame(sbj=subjects, dprime=dprimes, log_beta=log_beta, c=c));
}
# Testing -----------------------------------------------------------------
# import testing data
data_all_testing <- read.csv("exp2_testing_preprocessed.csv",header=T,sep=",");
data_all_testing <- subset(data_all_testing, select = -c(X)) # remove redundant column added by Pavlovia
data_testing <- data_all_testing[data_all_testing$sbj_ID %in% participants,]; # n = 190 participants
# all participants to be excluded:
data_testing <- data_testing[!data_testing$sbj_ID %in% c('667d631ef036f8ef4ff2f4f3','6488afe97766c9083ffc3171','666f0fb7d9900bb03f5d99a1','660310c1b1a7ea09dee682e2','5faacca24cd0384c1fa08be1', '65f7be6ac59662b24ac0f9b0', '664b7cd6b5a772dd1eddca37'),];
data_testing$temp_sbjID <- rep(1:184, each=120); # necessary: R doesn't like format of Prolific IDs
# make some variables factors
data_testing$sbj_ID <- as.factor(data_testing$sbj_ID);
data_testing$task <- as.factor(data_testing$task);
data_testing$item <- as.factor(data_testing$item);
data_testing$testing_condition <- as.factor(data_testing$testing_condition);
data_testing$correct <- as.logical(data_testing$correct);
# change coding: make YES into 1 and NO into 0
data_expected <- replace(data_testing$expected, data_testing$expected == 0, 'YES');
data_expected <- replace(data_expected, data_expected == 1, 'NO');
data_expected <- replace(data_expected, data_expected == 'NO', 0);
data_expected <- replace(data_expected, data_expected == 'YES', 1);
data_testing$expected <- data_expected;
data_testing$expected <- as.numeric(data_testing$expected);
data_observed <- replace(data_testing$observed, data_testing$observed == 0, 'YES');
data_observed <- replace(data_observed, data_observed == 1, 'NO');
data_observed <- replace(data_observed, data_observed == 'NO', 0);
data_observed <- replace(data_observed, data_observed == 'YES', 1);
data_testing$observed <- data_observed;
data_testing$observed <- as.numeric(data_testing$observed);
data_testing_rt_means <- aggregate(data_testing$rt, list(data_testing$sbj_ID), FUN=mean, na.rm=TRUE);
data_testing_0M_yes <- aggregate(data_testing$observed[data_testing$testing_condition=='0M'], by=list(data_testing$temp_sbjID[data_testing$testing_condition=='0M']), FUN = function(x) sum(x == 1));
names(data_testing_0M_yes) <- c("temp_sbjID","x_0");
data_testing_0M_yes$x_0 <- data_testing_0M_yes$x_0/40*100; #transform into percent
data_testing_0M_means <- aggregate(data_testing$correct[data_testing$testing_condition=='0M'], list(data_testing$temp_sbjID[data_testing$testing_condition=='0M']), FUN=mean, na.rm=TRUE);
names(data_testing_0M_means) <- c("temp_sbjID","x_0");
data_testing_1M_yes <- aggregate(data_testing$observed[data_testing$testing_condition=='1M'], by=list(data_testing$temp_sbjID[data_testing$testing_condition=='1M']), FUN = function(x) sum(x == 1));
names(data_testing_1M_yes) <- c("temp_sbjID","x_1");
data_testing_1M_yes$x_1 <- data_testing_1M_yes$x_1/40*100; #transform into percent
data_testing_1M_means <- aggregate(data_testing$correct[data_testing$testing_condition=='1M'], list(data_testing$temp_sbjID[data_testing$testing_condition=='1M']), FUN=mean, na.rm=TRUE);
names(data_testing_1M_means) <- c("temp_sbjID","x_1");
data_testing_2M_yes <- aggregate(data_testing$observed[data_testing$testing_condition=='2M'], by=list(data_testing$temp_sbjID[data_testing$testing_condition=='2M']), FUN = function(x) sum(x == 1));
names(data_testing_2M_yes) <- c("temp_sbjID","x_2");
data_testing_2M_yes$x_2 <- data_testing_2M_yes$x_2/40*100; #transform into percent
data_testing_2M_means <- aggregate(data_testing$correct[data_testing$testing_condition=='2M'], list(data_testing$temp_sbjID[data_testing$testing_condition=='2M']), FUN=mean, na.rm=TRUE);
names(data_testing_2M_means) <- c("temp_sbjID","x_2");
# 2M - all response types
library(tidyverse);
misses <- list();
for (i in 1:184) { # calculate misses for each participant
temp <- data_testing[data_testing$temp_sbjID==i&data_testing$testing_condition=='2M',];
miss <- temp %>%
summarize(count = sum(expected == 1 & observed == 0));
miss <- miss/40;
misses <- append(misses, miss)
};
data_testing_2M_means$misses <- misses;
data_testing_2M_means$misses <- as.numeric(data_testing_2M_means$misses);
hits <- list();
for (i in 1:184) { # calculate hits for each participant
temp <- data_testing[data_testing$temp_sbjID==i&data_testing$testing_condition=='2M',];
hit <- temp %>%
summarize(count = sum(expected == 1 & observed == 1));
hit <- hit/40
hits <- append(hits, hit)
};
data_testing_2M_means$hits <- hits;
data_testing_2M_means$hits <- as.numeric(data_testing_2M_means$hits);
rejs <- list();
for (i in 1:184) { # calculate correct rejections for each participant
temp <- data_testing[data_testing$temp_sbjID==i&data_testing$testing_condition=='2M',];
rej <- temp %>%
summarize(count = sum(expected == 0 & observed == 0));
rej <- rej/40
rejs <- append(rejs, rej)
};
data_testing_2M_means$rejs <- rejs;
data_testing_2M_means$rejs <- as.numeric(data_testing_2M_means$rejs);
alarms <- list();
for (i in 1:184) { # calculate false alarms for each participant
temp <- data_testing[data_testing$temp_sbjID==i&data_testing$testing_condition=='2M',];
alarm <- temp %>%
summarize(count = sum(expected == 0 & observed == 1));
alarm <- alarm/40
alarms <- append(alarms, alarm)
};
data_testing_2M_means$alarms <- alarms;
data_testing_2M_means$alarms <- as.numeric(data_testing_2M_means$alarms);
data_testing_2M <- data_testing[data_testing$testing_condition == '2M',];
dprimes2M <- dPrime(data_testing_2M$temp_sbjID, data_testing_2M$expected, data_testing_2M$observed);
names(dprimes2M) <- c("temp_sbjID","dprime","log_beta","c");
data_testing_2M_means$dprime <- dprimes2M$dprime;
data_testing_2M_means$c <- dprimes2M$c;
# Familiarity ----------------------------------------------------------
data_all_familiarity <- read.csv("exp2_familiarity_preprocessed.csv",header=T,sep=",");
data_all_familiarity <- subset(data_all_familiarity, select = -c(X)) # remove redundant column added by Pavlovia
data_familiarity <- data_all_familiarity[data_all_familiarity$sbj_ID %in% participants,]; # n = 187 participants
data_familiarity <- data_familiarity[!data_familiarity$sbj_ID %in% c('667d631ef036f8ef4ff2f4f3','6488afe97766c9083ffc3171','666f0fb7d9900bb03f5d99a1','660310c1b1a7ea09dee682e2','5faacca24cd0384c1fa08be1', '65f7be6ac59662b24ac0f9b0', '664b7cd6b5a772dd1eddca37'),];
# make some variables factors
data_familiarity$sbj_ID <- as.factor(data_familiarity$sbj_ID);
data_familiarity$task <- as.factor(data_familiarity$task);
data_familiarity$correct <- as.logical(data_familiarity$correct);
data_familiarity$target <- as.factor(data_familiarity$target);
data_familiarity$confound <- as.factor(data_familiarity$confound);
data_familiarity_means <- aggregate(data_familiarity$correct, list(data_familiarity$sbj_ID), FUN=mean);
colnames(data_familiarity_means)[colnames(data_familiarity_means)=="Group.1"]="sbj_ID";
# BLP -----------------------------------------------------------------
data_all_BLP <- read.csv("exp2_BLP_preprocessed.csv",header=T,sep=",");
data_all_BLP <- subset(data_all_BLP, select = -c(X)); # remove redundant column added by Pavlovia
data_BLP <- data_all_BLP[data_all_BLP$sbj_ID %in% participants,]; # n = 92 participants
data_BLP <- data_BLP[!data_BLP$sbj_ID %in% c('667d631ef036f8ef4ff2f4f3','6488afe97766c9083ffc3171','666f0fb7d9900bb03f5d99a1','660310c1b1a7ea09dee682e2','5faacca24cd0384c1fa08be1', '65f7be6ac59662b24ac0f9b0', '664b7cd6b5a772dd1eddca37'),];
BLP_correction <- function(data_BLP)
{
data_BLP[data_BLP == "polish"] <- "Polish";
data_BLP[data_BLP == "english"|data_BLP=="ENGLISH"|data_BLP=="Englsih"|data_BLP=="Englsh"|data_BLP=="British"|data_BLP=="Engllish"|data_BLP=="ENGLISH "] <- "English";
data_BLP[data_BLP == "portuguese"|data_BLP=="Potuguese"] <- "Portuguese";
data_BLP[data_BLP =="SPANISH"|data_BLP=="Spnsh"|data_BLP=="spanish"] <- "Spanish";
data_BLP[data_BLP == "ITALIAN"|data_BLP=="italian"] <- "Italian";
data_BLP[data_BLP == "sotho"] <- "Sotho";
data_BLP[data_BLP == "Gree"|data_BLP=="GREEK"] <- "Greek";
data_BLP[data_BLP == "tshivenda"] <- "Tshivenda";
data_BLP[data_BLP == "Gujrau"] <- "Gujarati"; # to check
data_BLP[data_BLP == "ukrainian"|data_BLP=="ukranian"] <- "Ukrainian";
data_BLP[data_BLP == "SETSWANA"] <- "Setswana";
data_BLP[data_BLP == "afrikaans"] <- "Afrikaans";
data_BLP[data_BLP == "punjabi"] <- "Punjabi";
data_BLP[data_BLP == "siswati"] <- "Siswati";
data_BLP[data_BLP == "Germany"|data_BLP=="german"|data_BLP=="germany"|data_BLP=="GERMANY"] <- "German";
data_BLP[data_BLP == "russian"] <- "Russian";
data_BLP[data_BLP == "Isiulu"] <- "IsiZulu";
data_BLP[data_BLP == "ZULU"|data_BLP=="zulu"] <- "Zulu";
data_BLP[data_BLP == "northern sotho"] <- "Northern Sotho";
data_BLP[data_BLP == "chinese"] <- "Chinese";
data_BLP[data_BLP == "sesotho"] <- "Sesotho";
data_BLP[data_BLP == "sepedi"] <- "Sepedi";
data_BLP[data_BLP == "TSHIVENDA"] <- "Tshivenda";
data_BLP[data_BLP == "XHOSA"] <- "Xhosa";
data_BLP[data_BLP == "french"] <- "French";
data_BLP[data_BLP == "hungarian"] <- "Hungarian";
data_BLP[data_BLP == "POLISH"] <- "Polish";
data_BLP[data_BLP == "croatian"] <- "Croatian";
data_BLP[data_BLP == "bosnian"] <- "Bosnian";
data_BLP[data_BLP == "madarin"] <- "Mandarin";
data_BLP[data_BLP == "Icelandic and German"] <- "Icelandic";
data_BLP[data_BLP == "a little bit of russian"] <- "Russian";
data_BLP[data_BLP == "NDEBELE"] <- "Ndebele";
data_BLP[data_BLP == "urdu"] <- "Urdu";
data_BLP[data_BLP == "latvian"] <- "Latvian";
data_BLP[data_BLP == "Malayam"] <- "Malayan";
data_BLP[data_BLP == "swahili"] <- "Swahili";
data_BLP[data_BLP == "serbian"] <- "Serbian";
data_BLP[data_BLP == "SEPEDI"] <- "Sepedi";
data_BLP[data_BLP == "japanese"] <- "Japanese";
data_BLP[data_BLP == "N/A"|data_BLP=="---"] <- "n/a";
data_BLP["L1"][is.na(data_BLP["L1"])] <- "n/a";
data_BLP["L2"][is.na(data_BLP["L2"])] <- "n/a";
data_BLP["L3"][is.na(data_BLP["L3"])] <- "n/a";
data_BLP["L4"][is.na(data_BLP["L4"])] <- "n/a";
# correcting some participants' demographic information - correction based off of Prolific's information
data_BLP["Age"][data_BLP["sbj_ID"] == "60c4a402716a8f9074fcd92e"] <- "21";
data_BLP["Age"][data_BLP["sbj_ID"] == "6103cbc5310ffddfafa01661"] <- "25";
data_BLP["Age"][data_BLP["sbj_ID"] == "6598994f0e7e5db183bfe3ee"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "66168e55cb60649609600268"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "579e18fc4a84da00014c6f4f"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "5c1a6bd8f9250d0001b7c589"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "5f6f3d061214fe49ec2b9619"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "60ca0b60979a23c83652c303"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "653fb764c9aed77c01457531"] <- "20";
data_BLP["Age"][data_BLP["sbj_ID"] == "6557def45fc0ffbd46ad01de"] <- "18";
data_BLP["Age"][data_BLP["sbj_ID"] == "657bfe6e245848c8fef0b389"] <- "20";
data_BLP["Age"][data_BLP["sbj_ID"] == "65abe33e1c79ea32da32ab0f"] <- "19";
data_BLP["Age"][data_BLP["sbj_ID"] == "65f33b94cd6885d54029582d"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "6634e4d4f1950b4dcd44d4d9"] <- "19";
data_BLP["Age"][data_BLP["sbj_ID"] == "664b7cd6b5a772dd1eddca37"] <- "25";
data_BLP["Age"][data_BLP["sbj_ID"] == "6659ca4701d47b95a09ba736"] <- "19";
data_BLP["Age"][data_BLP["sbj_ID"] == "667dd7126e7a9073e0af73fd"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "6681625ff9dfa8a95bb0359d"] <- "21";
return (data_BLP)
}
data_BLP <- BLP_correction(data_BLP);
library(toolbox);
scores_list <- combineCols(data_BLP, cols=c('L1Score','L2Score','L3Score','L4Score'),by_name=TRUE); # combine scores into 1 list
use_scores_list <- combineCols(data_BLP, cols=c('UseL1Score','UseL2Score','UseL3Score','UseL4Score'),by_name=TRUE); # combine use scores into 1 list
data_BLP$temp_sbjID <- c(1:184); # necessary: R doesn't like format of Prolific IDs
# multilingual balance: variance
vars <- list();
for (i in 1:184) { # calculate variance for each participant
temp <- unlist(scores_list[i]);
var <- var(temp,na.rm=TRUE);
vars <- append(vars, var)
};
data_BLP$lang_var <- vars;
data_BLP$lang_var <- as.numeric(data_BLP$lang_var);
# multilingual balance: entropy
entropies <- list();
library(DescTools);
for (i in 1:184) { # calculate entropy for each participant
temp <- unlist(scores_list[i]);
entropy <- Entropy(temp,na.rm=TRUE);
entropies <- append(entropies, entropy)
};
data_BLP$lang_ent <- entropies;
data_BLP$lang_ent <- as.numeric(data_BLP$lang_ent);
# multilingual experience: summing all language scores
data_BLP["L2Score"][is.na(data_BLP["L2Score"])] <- 0;
data_BLP["L3Score"][is.na(data_BLP["L3Score"])] <- 0;
data_BLP["L4Score"][is.na(data_BLP["L4Score"])] <- 0;
data_BLP$multi_exp <- data_BLP$L1Score + data_BLP$L2Score + data_BLP$L3Score + data_BLP$L4Score;
# L1 - L2 score
data_BLP$L1_L2_diff <- data_BLP$L1Score - data_BLP$L2Score;
# vector distances
distances <- read.csv("distances_exp2.csv",header=T,sep=",");
distances <- subset(distances, select = -c(X)); # remove redundant column added by Python
names(distances) <- c('sbj_ID','vector_distance');
data_BLP <- merge(data_BLP,distances,by="sbj_ID");
pca_varimax <- psych::principal(data_BLP[,31:46], nfactors=16, rotate='varimax');
data_BLP <- cbind(data_BLP, pca_varimax$scores[,c('RC1','RC3','RC2','RC7','RC9')]);
names(data_BLP)[117:121] <- c('RC1_L4','RC3_L3','RC2_use_L1vsL2','RC7_hist_L2','RC9_use_L4');
data_BLP_extracted_all <- subset(data_BLP, select=c(sbj_ID,temp_sbjID,Gender,Age,HistoryL1Score,HistoryL2Score,HistoryL3Score,HistoryL4Score,UseL1Score,UseL2Score,UseL3Score,UseL4Score,ProficiencyL1Score,ProficiencyL2Score,ProficiencyL3Score,ProficiencyL4Score,AttitudeL1Score,AttitudeL2Score,AttitudeL3Score,AttitudeL4Score,L1Score,L2Score,L3Score,L4Score,lang_var,lang_ent,lang_use_ent,multi_exp,L1_L2_diff,use_vector_distance,RC1_L4,RC3_L3,RC2_use_L1vsL2,RC7_hist_L2,RC9_use_L4));
data_BLP_testing_all <- list(data_testing_2M_means,data_testing_2M_hits_means,data_testing_2M_rejs_means,data_BLP_extracted_all) %>% reduce(inner_join, by='temp_sbjID');
data_BLP_testing_all <- list(data_testing_2M_means,data_BLP_extracted_all) %>% reduce(inner_join, by='temp_sbjID');
data_BLP_extracted_all <- subset(data_BLP, select=c(sbj_ID,temp_sbjID,Gender,Age,HistoryL1Score,HistoryL2Score,HistoryL3Score,HistoryL4Score,UseL1Score,UseL2Score,UseL3Score,UseL4Score,ProficiencyL1Score,ProficiencyL2Score,ProficiencyL3Score,ProficiencyL4Score,AttitudeL1Score,AttitudeL2Score,AttitudeL3Score,AttitudeL4Score,L1Score,L2Score,L3Score,L4Score,lang_var,lang_ent,multi_exp,L1_L2_diff,RC1_L4,RC3_L3,RC2_use_L1vsL2,RC7_hist_L2,RC9_use_L4));
data_BLP_testing_all <- list(data_testing_2M_means,data_BLP_extracted_all) %>% reduce(inner_join, by='temp_sbjID');
names(data_testing_2M_yes) <- c("temp_sbjID","x_2_yes");
data_BLP_testing_all <- merge(data_BLP_testing_all, data_testing_2M_yes,by="temp_sbjID");
data_BLP_testing_dprimes2M <- list(dprimes2M,data_BLP_extracted_all) %>% reduce(inner_join, by='temp_sbjID');
# LMERS
library(lme4);
library(emmeans);
# TESTING #
data_testing_lm <- merge(data_testing, data_BLP[,c('sbj_ID','sbj_ID','Gender','Age','L2Score','lang_ent','lang_use_ent','multi_exp','L1_L2_diff','use_vector_distance','RC1_L4','RC3_L3','RC2_use_L1vsL2','RC7_hist_L2','RC9_use_L4')], by.x='sbj_ID',by.y='sbj_ID', all.x=T);
# TESTING #
data_testing_lm <- merge(data_testing, data_BLP[,c('sbj_ID','sbj_ID','Gender','Age','L2Score','lang_ent','multi_exp','L1_L2_diff','vector_distance','RC1_L4','RC3_L3','RC2_use_L1vsL2','RC7_hist_L2','RC9_use_L4')], by.x='sbj_ID',by.y='sbj_ID', all.x=T);
View(data_testing_lm)
