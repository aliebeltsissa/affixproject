colour='black') +
geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2) +
scale_fill_manual(values=c("#696969", "#808080", "#a9a9a9", "#DCDCDC")) +
theme(text = element_text(family = "serif")) +
labs(y="Scores", title="Monolinguals") +
theme(legend.position = "none") +
theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
ggarrange(bi2, mono2,
ncol = 1, nrow = 2)
cog<-data.frame(Mean=c(72.72,72.03),
sd=c(2.46,2.50),
Type=as.factor(c("Bilingual","Monolingual")),
Category=c("Bilingual","Monolingual"),
Insert= c(0.0, 0.5))
cog2 <- ggplot(cog, aes(x=Category, y=Mean, fill=Category)) +
geom_bar(position=position_dodge(), stat="identity",
colour='black') +
geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2) +
scale_fill_manual(values=c("#999999", "#646464")) +
theme(text = element_text(family = "serif")) +
labs(y="Scores", title="Cognate condition") +
theme(legend.position = "none") +
theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
con<-data.frame(Mean=c(50.93,50.02),
sd=c(3.13,3.56),
Type=as.factor(c("Bilingual","Monolingual")),
Category=c("Bilingual","Monolingual"),
Insert= c(0.0, 0.5))
con2 <- ggplot(con, aes(x=Category, y=Mean, fill=Category)) +
geom_bar(position=position_dodge(), stat="identity",
colour='black') +
geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2) +
scale_fill_manual(values=c("#999999", "#646464")) +
theme(text = element_text(family = "serif")) +
labs(y="Scores", title="Control condition") +
theme(legend.position = "none") +
theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
int<-data.frame(Mean=c(60.07,59.55),
sd=c(2.68,2.82),
Type=as.factor(c("Bilingual","Monolingual")),
Category=c("Bilingual","Monolingual"),
Insert= c(0.0, 0.5))
int2 <- ggplot(int, aes(x=Category, y=Mean, fill=Category)) +
geom_bar(position=position_dodge(), stat="identity",
colour='black') +
geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2) +
scale_fill_manual(values=c("#999999", "#646464")) +
theme(text = element_text(family = "serif")) +
labs(y="Scores", title="Interlingual Homophone condition") +
theme(legend.position = "none") +
theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
sem<-data.frame(Mean=c(66.62,2.57),
sd=c(51.28,3.32),
Type=as.factor(c("Bilingual","Monolingual")),
Category=c("Bilingual","Monolingual"),
Insert= c(0.0, 0.5))
sem2 <- ggplot(sem, aes(x=Category, y=Mean, fill=Category)) +
geom_bar(position=position_dodge(), stat="identity",
colour='black') +
geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2) +
scale_fill_manual(values=c("#999999", "#646464")) +
theme(text = element_text(family = "serif")) +
labs(y="Scores", title="Semantic condition") +
theme(legend.position = "none") +
theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
ggarrange(cog2, con2, int2, sem2,
ncol = 2, nrow = 2)
sem<-data.frame(Mean=c(66.62,51.28),
sd=c(2.57,3.32),
Type=as.factor(c("Bilingual","Monolingual")),
Category=c("Bilingual","Monolingual"),
Insert= c(0.0, 0.5))
sem2 <- ggplot(sem, aes(x=Category, y=Mean, fill=Category)) +
geom_bar(position=position_dodge(), stat="identity",
colour='black') +
geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2) +
scale_fill_manual(values=c("#999999", "#646464")) +
theme(text = element_text(family = "serif")) +
labs(y="Scores", title="Semantic condition") +
theme(legend.position = "none") +
theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
ggarrange(cog2, con2, int2, sem2,
ncol = 2, nrow = 2)
bi<-data.frame(Mean=c(72.72,50.93,60.07,66.62),
sd=c(2.46,3.13,2.68,2.57),
Type=as.factor(c("Cognate","Control","Interlingual Homophone","Semantic")),
Category=c("Cognate","Control","Interlingual Homophone","Semantic"),
Insert= c(0.0, 0.1, 0.5, 1))
bi2<-ggplot(bi, aes(x=Category, y=Mean, fill=Category)) +
geom_bar(position=position_dodge(), stat="identity",
colour='black') +
geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2) +
scale_fill_manual(values=c("#696969", "#808080", "#a9a9a9", "#DCDCDC")) +
theme(text = element_text(family = "serif")) +
labs(y="Scores", title="Bilinguals") +
theme(legend.position = "none") +
theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
mono<-data.frame(Mean=c(72.03,50.02,59.55,51.28),
sd=c(2.50,3.56,2.82,3.32),
Type=as.factor(c("Cognate","Control","Interlingual Homophone","Semantic")),
Category=c("Cognate","Control","Interlingual Homophone","Semantic"),
Insert= c(0.0, 0.1, 0.5, 1))
mono2 <- ggplot(mono, aes(x=Category, y=Mean, fill=Category)) +
geom_bar(position=position_dodge(), stat="identity",
colour='black') +
geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2) +
scale_fill_manual(values=c("#696969", "#808080", "#a9a9a9", "#DCDCDC")) +
theme(text = element_text(family = "serif")) +
labs(y="Scores", title="Monolinguals") +
theme(legend.position = "none") +
theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
ggarrange(bi2, mono2,
ncol = 1, nrow = 2)
summary3<-read.csv("C:/Users/annal/OneDrive - University of Sussex/School/2021-2022/Spring term - 4th year project/Data/SummaryAnalysisByParticipant3.csv")
attach(summary3)
str(summary3)
summary3 <- summary3 %>%
gather(key = "condition", value = "scores", CogDiffCon, IntDiffCon, SemDiffCon) %>%
convert_as_factor(Participant.External.Session.ID, condition)
res.aov <- aov(scores ~ condition, data = summary3)
summary4 <- summary4 %>%
gather(key = "langexp", value = "exp", Eng_yearsused, Fr_yearsused, Eng_hoursspeaking, Fr_hoursspeaking) %>%
convert_as_factor(Participant.External.Session.ID, langexp)
summary4<-read.csv("C:/Users/annal/OneDrive - University of Sussex/School/2021-2022/Spring term - 4th year project/Data/SummaryAnalysisByParticipant4.csv")
attach(summary4)
str(summary4)
summary4 <- summary4 %>%
gather(key = "condition", value = "scores", CognateLogOdds, ControlLogOdds, InterlingualHomophoneLogOdds, SemanticLogOdds) %>%
convert_as_factor(Participant.External.Session.ID, condition)
summary4 <- summary4 %>%
gather(key = "langexp", value = "exp", Eng_yearsused, Fr_yearsused, Eng_hoursspeaking, Fr_hoursspeaking) %>%
convert_as_factor(Participant.External.Session.ID, langexp)
res.aov <- summary4 %>%
anova_test(scores ~ langexp + condition)
get_anova_table(res.aov)
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
warning = FALSE,
fig.path = "graphics/",
fig.width = 8,
fig.height = 4,
fig.retina = 2,
fig.align = "center",
fig.pos = "t",
collapse = TRUE
)
load("data/class5.RData");
library(lme4); #this is necessary for 'lmer'
library(rms); #this is necessary for 'rcs'
package.install(rms)
install.packages("rms")
library(rms); #this is necessary for 'rcs'
library(Hmisc)
install.packages("htmltools")
install.packages("htmltools")
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
warning = FALSE,
fig.path = "graphics/",
fig.width = 8,
fig.height = 4,
fig.retina = 2,
fig.align = "center",
fig.pos = "t",
collapse = TRUE
)
load("data/class5.RData");
library(lme4); #this is necessary for 'lmer'
library(rms); #this is necessary for 'rcs'
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
remove.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
warning = FALSE,
fig.path = "graphics/",
fig.width = 8,
fig.height = 4,
fig.retina = 2,
fig.align = "center",
fig.pos = "t",
collapse = TRUE
)
load("data/class5.RData");
library(lme4); #this is necessary for 'lmer'
library(rms); #this is necessary for 'rcs'
m4 <- lmer(rt ~ 1 + rcs(ticks,4)*condition + (1|sbjId) + (1|target), data=data_for_analysis);
summary(m4)[[10]]; #betas are quite crazy (high and low), and quite some variability. Lots of significance, but not easy to interpret. But wait before jumping there, let's check whether the non-linearity was worth it:
anova(m4,m3); #it does provide a nice improvement in goodness of fit, for the extra complexity that it costs (which is a lot, note -- 6 dfs)
#does the model fit the data better?
library(effects);
setwd("C:/Users/annal/OneDrive/Documents/GitHub/affixproject");
participants <- list("5aa787c66219a30001c765f8", "5ae5db897edeb000014a85ee", "5b212164cfbf200001cfb3ad", "5b213220809d160001a2c36d", "5bcd11401662020001fe82c1", "5c19254b0b9f6b00014769ee", "5c1bfabab0fcc900019d9ff4", "5caccaed2f93d700157b4782", "5cbe02ab39447e0001745a5e", "5cefe8856e0eec00015971dd", "5d9a125f1714540016a40a27", "5dab6e7d80e1780016d5bc9b", "5dcb33ab0550ef819f508abf", "5e12048c7605fe8839180a14", "5e283f8ad48ecf000ddd0724", "5e2c6968e97bec29709a53c6", "5e3ff59bf2160b23942ada93", "5e42b6421f44d3143440b25c", "5e42f03607b468000d8eb912", "5e433ed3393e971e19f4735d", "5e577e79ce30ae13226e61ae", "5e6d3324f14d262fced5bbfe", "5e87b28549538b0fdf96b318", "5e89e89bf025be000c01eead", "5e8b66490d48450346bf2755", "5e8c57d9b4483e012006e7aa", "5e8e55509422bb10abed1f54", "5e9bd025eb6b380e1d66d04c", "5ea171c1a8782801263e7540", "5ea9611edec14d052ada0bae", "5ea9cd383b32cf15448a86ac", "5eaae42f19a24d05cbd6ccb4", "5eaf1c50f3540c614eb973a5", "5eb35dff41a381156be161c2", "5eb71c59c55b3b0ce571ae7c", "5ebc0c153f8b2e04d3833423", "5ec12ed7a66dbf01c7d740c1", "5ec1c01a8ccaaa5ec0080c91", "5ec6d06c67b0da0fb6f85e83", "5ecbb4c00bc62403dae2df59", "5ecd21dec04cca02c9032485", "5ed013f88fce6e0d858b732e", "5ee623674afa60375e30eec3", "5ee83da8817af0000d47448f", "5ee942381a22491bbb7170f8", "5eef3de3fb4e031bf546d887", "5efd2964d36f63162f263795", "5f0471a92ec97b6d1aec7739", "5f09d989eff16b266fba44c0", "5f0d65ef2ad0c60009209f0f", "5f0f93938935de000855898b", "5f11c9f84078cd0888177499", "5f18a80367ef6b0bbc5f3720", "5f19fa0f3e85b20d0336258c", "5f1e8dc7e2161c86cdcd220a", "5f219602670e5a0af2cf5237", "5f33289c1fe9181376ee67d9", "5f33c58329beab1f63c0dfaa", "5f350f459bf003464a03ea5e", "5f47e34858dd331165bf9f00", "5f5a713d37f71112463ab4d9", "5f5e7de4c81d3672642cd612", "5f6cd5ce1758e90f12ae1123", "5f708f5f0d32bb66960d4473", "5f784f5b98f4963cdf902340", "5f7bd801486f5e1ce581980f", "5f858743256d25036d9fa693", "5f91dc284909fe0b08f9e2e1", "5f99cee5a2a7d109a1624e10", "5fa4258658811d03fbc6ce8b", "5fa4725a186c050edc3bcc20", "5fa5793490f10705755818c0", "5fa59d4d5a29c90da975efe9", "5fc2d2d79da439201ab6addc", "5fc44d83862e3e79b02e0438", "5fc781689771f106330abf6a", "5fd2416e5061f30735e202e9", "5fd69a0014c3b25ee539f66b", "5fd9c5c67fa7c74ec42bb318", "5fdbf74c5474cd11e39eeaf3", "5fe2308a91773957e88b89be", "600e0dadada7da69afc5b3de", "600f0f9c3bfcdc077c924e51", "60123adc24c9f126819861b6", "601705a0246e51313e8ed38e", "601951245f481e000980504f", "601b5c79e845ac360826c9df", "601ffb441dc6d959b855eea5", "602bb123612bfe330818d4ef", "6042a56575ab0c1ccffc3152", "60491025dd8eb31e48a0ca8d", "60536ffae4f98513b671f482", "605aa0bb5fb71bbcf0808892", "60645fe61129208791535d15", "6065d7d47409810344f7e6bb", "60664619eac28843177fee96", "60670ac0fc7e169231369ab1", "606dc21c1ce7dc64af9d81fb", "6074768dc48e0753011d3d72", "607ea5504e74d104da5a108a", "60883a7e91c0be66dbb96fc8", "608858869a591bd129fbbc6c", "608c2e566d92c2aa3543e2d2", "608c64e14968cdd8dcbe1be4", "6092e2aac56871319199b6a5", "6093cacf9a39751eedd55916", "60957b300f08087b0af0031c", "60a3fe2d888e7a090d6d8f82", "60a68725b2b424dc0d7ce793", "60b7b8126c0c4524e913236e", "60bbe0da43325dadf2b1b6a9", "60c49e68081928c86ba7b98a", "60d478e72e8251287b641b2d", "60d7605d7af8d66774061717", "60db4aed5dd7b87124f51341", "60dee3200c7c3355c62326d9", "60e12640be1b69b66053d55b", "60e3b18d3d4205b4c52ada56", "60e9ea97d19e613e60a994da", "60eb26fb8db6845a14fe5a91", "60ec51c51a3158a50ded8a3e", "60edd136d544e7c8f5fac8a7", "60f030dca19a06db1b50d16a", "60f56f0103876eae7c0d870f", "60f579085ebf24f9c80f223e", "60f6b8f8e574e14634ead43e", "60f88d7fef1959734061e5a7", "60fd0f49858465796afd5da9", "6100174f92a7a0e5141b195e", "61001b6892ebd05a24fe82e1", "61055020201a7da5a704f7dd", "6107d788163252e3b5c348e3", "610834993bac40f050062896", "610958b8473c7b96e4bd207d", "610a52647a452dee7ca89360", "610d2275ba5f1ee0fdcee3e8", "610f2eabb45be8717fc155e0", "61125e23136464bd2cbbefc9", "61143bd22a1649da3b52ae32", "611bdb0fed7c9df6dce28c3f", "611cebb780fbae98c5bcc84d", "611dc53f0098557586e89b17", "611e7d1295185bf6f56fd951", "611e9c16e90a0d4c6f0d8df5", "611eafa6011b0423f7d7230f",
"611eeafa283a2d1f57537fea", "6120211d8e1eab16fcb7ad69", "6122966a93af160af481836c", "6124a4ba3df07e768bd9c90b", "61275a3158c67415afb971ff", "612a98181f4b6d1cf01f926c", "61301fcb49db2f170cb02b93", "6131f7010e926c9103558040", "613867f34e206e4f573bc6ef", "613a73d06cf1fcfef304d3fa", "613ab1e64acd61ebd0a7116d", "613f57084e80f056c78f9b7b", "6140f1c4ead758f1b72bbe2f", "6140ff9c5750f0081ca8d71f", "6144742e57a61e489cc9e978", "6147aed5b2a4f748dc2b6ba4", "614b323022fcd8b7408005a6", "614c80483d06dcf7ad552679", "614c8e5469405530dc27b9d5", "614dd6473c74b217ad73cc9c", "61520b079436973e05f72d33", "61548fa2b637194e04c9bc09", "6155e204cc071b306458dfff", "6156a440279fdf408ee663ae", "6156b68cc77b48d6693b361c", "615b042301e3a24311563ee4", "615b1ab789b14c9996251fb4", "615b41767003d4ece749ed9d", "615da9ee365ab7d547b98979", "615f371e6688c87e53e7acf5", "61616ce2bb94584e11c911af", "6163faf9d9ac4586fe776568", "616494f1ae4537c01914c758", "616631efeeac0979c1ba85a9", "616891e25a026e1f7262116c", "616eb493bb7e4ab4fa1de8d4", "6170821d1e8ffb9c893b28a4", "6171349b89a54d4823f9eca1", "617142c2a843eef6f8f148b6", "6171d922c871ba795b6a4827", "6172078b966225960be2a7b5", "617679054948369cb824d837", "63ee5d8aaee278de46b7d4cc", "6455490f7c5f35e4221a810a", "64764d56699f097a96ec6e5c", "64973d83e4fc64d6ae59c370", "64a288758b7c82ff2d18da75", "64ef422a4789bd6b6b9042ce", "65032a60861e9a17bc1a7444", "65089e7ce53888b0b3840c62", "650aee87054446f772acdfcc");
# Testing -----------------------------------------------------------------
# import testing data
data_all_testing <- read.csv("testing_preprocessed_clean.csv",header=T,sep=",");
data_all_testing <- subset(data_all_testing, select = -c(X)) # remove redundant column added by Pavlovia
data_testing <- data_all_testing[data_all_testing$sbj_ID %in% participants,]; # n = 196 participants
data_testing <- data_testing[!data_testing$sbj_ID %in% c('615b41767003d4ece749ed9d', '5e8b66490d48450346bf2755','615b042301e3a24311563ee4'),]
# make some variables factors
data_testing$sbj_ID <- as.factor(data_testing$sbj_ID);
data_testing$task <- as.factor(data_testing$task);
data_testing$item <- as.factor(data_testing$item);
data_testing$testing_condition <- as.factor(data_testing$testing_condition);
data_testing$correct <- as.logical(data_testing$correct);
# 0M yes responses boxplot
data_testing_0M_yes <- aggregate(data_testing$observed[data_testing$testing_condition=='0M'], by=list(data_testing$sbj_ID[data_testing$testing_condition=='0M']), FUN = function(x) sum(x == 0));
colnames(data_testing_0M_yes)[colnames(data_testing_0M_yes)=="Group.1"]="sbj_ID";
colnames(data_testing_0M_yes)[colnames(data_testing_0M_yes)=="x"]="x_0";
# 0M scores
data_testing_0M_means <- aggregate(data_testing$correct[data_testing$testing_condition=='0M'], list(data_testing$sbj_ID[data_testing$testing_condition=='0M']), FUN=mean, na.rm=TRUE);
colnames(data_testing_0M_means)[colnames(data_testing_0M_means)=="Group.1"]="sbj_ID";
colnames(data_testing_0M_means)[colnames(data_testing_0M_means)=="x"]="x_0";
# 1M yes responses boxplot
data_testing_1M_yes <- aggregate(data_testing$observed[data_testing$testing_condition=='1M'], by=list(data_testing$sbj_ID[data_testing$testing_condition=='1M']), FUN = function(x) sum(x == 0));
colnames(data_testing_1M_yes)[colnames(data_testing_1M_yes)=="Group.1"]="sbj_ID";
colnames(data_testing_1M_yes)[colnames(data_testing_1M_yes)=="x"]="x_1";
# 1M scores
data_testing_1M_means <- aggregate(data_testing$correct[data_testing$testing_condition=='1M'], list(data_testing$sbj_ID[data_testing$testing_condition=='1M']), FUN=mean, na.rm=TRUE);
colnames(data_testing_1M_means)[colnames(data_testing_1M_means)=="Group.1"]="sbj_ID";
colnames(data_testing_1M_means)[colnames(data_testing_1M_means)=="x"]="x_1";
# 2M yes responses boxplot
data_testing_2M_yes <- aggregate(data_testing$observed[data_testing$testing_condition=='2M'], by=list(data_testing$sbj_ID[data_testing$testing_condition=='2M']), FUN = function(x) sum(x == 0));
colnames(data_testing_2M_yes)[colnames(data_testing_2M_yes)=="Group.1"]="sbj_ID";
colnames(data_testing_2M_yes)[colnames(data_testing_2M_yes)=="x"]="x_2";
# yes responses across conditions
library(tidyverse);
data_testing_conditions <- list(data_testing_0M_yes,data_testing_1M_yes,data_testing_2M_yes) %>% reduce(inner_join, by='sbj_ID');
# 2M correct boxplot
data_testing_2M_means <- aggregate(data_testing$correct[data_testing$testing_condition=='2M'], list(data_testing$sbj_ID[data_testing$testing_condition=='2M']), FUN=mean, na.rm=TRUE);
colnames(data_testing_2M_means)[colnames(data_testing_2M_means)=="Group.1"]="sbj_ID";
colnames(data_testing_2M_means)[colnames(data_testing_2M_means)=="x"]="x_2";
# yes responses across conditions
library(tidyverse);
data_testing_conditions_scores <- list(data_testing_0M_means,data_testing_1M_means,data_testing_2M_means) %>% reduce(inner_join, by='sbj_ID');
# 2M - hits only
data_testing_2M_hits_means <- aggregate(data_testing$correct[data_testing$testing_condition=='2M'&data_testing$expected=='0'], list(data_testing$sbj_ID[data_testing$testing_condition=='2M'&data_testing$expected=='0']), FUN=mean, na.rm=TRUE);
colnames(data_testing_2M_hits_means)[colnames(data_testing_2M_hits_means)=="Group.1"]="sbj_ID";
# 2M - correct rejections only
data_testing_2M_rejs_means <- aggregate(data_testing$correct[data_testing$testing_condition=='2M'&data_testing$expected=='1'], list(data_testing$sbj_ID[data_testing$testing_condition=='2M'&data_testing$expected=='1']), FUN=mean, na.rm=TRUE);
colnames(data_testing_2M_rejs_means)[colnames(data_testing_2M_rejs_means)=="Group.1"]="sbj_ID";
# BLP ---------------------------------------------------------------------
data_all_BLP <- read.csv("BLP_preprocessed.csv",header=T,sep=",");
data_all_BLP <- subset(data_all_BLP, select = -c(X)) # remove redundant column added by Pavlovia
data_BLP <- data_all_BLP[data_all_BLP$sbj_ID %in% participants,]; # n = 196 participants
data_BLP <- data_BLP[!data_BLP$sbj_ID %in% c('615b41767003d4ece749ed9d','5e8b66490d48450346bf2755','615b042301e3a24311563ee4'),] # same participants excluded as for testing
data_BLP <- subset(data_BLP, select = -c(AoAgioL1, AoAgioL2, AoAgioL3, AoAgioL4, anniInstrL1, anniInstrL2, anniInstrL3, anniInstrL4, anniPaeseL1, anniPaeseL2, anniPaeseL3, anniPaeseL4, anniFamigliaL1, anniFamigliaL2, anniFamigliaL3, anniFamigliaL4, anniLavoroL1, anniLavoroL2, anniLavoroL3, anniLavoroL4, PercAmiciL1, PercAmiciL2, PercAmiciL3, PercAmiciL4, PercFamigliaL1, PercFamigliaL2, PercFamigliaL3, PercFamigliaL4, PercLavoroL1, PercLavoroL2, PercLavoroL3, PercLavoroL4, PercStessoL1, PercStessoL2, PercStessoL3, PercStessoL4, PercCalcoliL1, PercCalcoliL2, PercCalcoliL3, PercCalcoliL4, ProfParlaL1, ProfParlaL2, ProfParlaL3, ProfParlaL4, ProfCapisceL1, ProfCapisceL2, ProfCapisceL3, ProfCapisceL4, ProfLeggeL1, ProfLeggeL2, ProfLeggeL3, ProfLeggeL4, ProfScriveL1, ProfScriveL2, ProfScriveL3, ProfScriveL4, AttMiStessoL1, AttMiStessoL2, AttMiStessoL3, AttMiStessoL4, AttCulturaL1, AttCulturaL2, AttCulturaL3, AttCulturaL4, AttLivNativoL1, AttLivNativoL2, AttLivNativoL3, AttLivNativoL4, AttMadrelinguaL1, AttMadrelinguaL2, AttMadrelinguaL3, AttMadrelinguaL4));
# standardise language responses
data_BLP[data_BLP == "polish"|data_BLP == "POLISH"] <- "Polish";
data_BLP[data_BLP == "portuguese"|data_BLP == "Portugal"] <- "Portuguese";
data_BLP[data_BLP == "italian"] <- "Italian";
data_BLP[data_BLP == "spanish"] <- "Spanish";
data_BLP[data_BLP == "greek"|data_BLP=="Greece"] <- "Greek";
data_BLP[data_BLP == "french"|data_BLP=="fRANCH"] <- "French";
data_BLP[data_BLP == "arabic"] <- "Arabic";
data_BLP[data_BLP == "ENGLISH"|data_BLP == "english"|data_BLP=="english "|data_BLP == "englis"|data_BLP == "eanglish"|data_BLP == "Enlish"] <- "English";
data_BLP[data_BLP == "xhosa"|data_BLP=="XHOSA"] <- "Xhosa";
data_BLP[data_BLP == "tshivenda"] <- "Tshivenda";
data_BLP[data_BLP == "SETSWANA"] <- "Setswana";
data_BLP[data_BLP == "zulu"] <- "Zulu";
data_BLP[data_BLP == "TSWANA"] <- "Tswana";
data_BLP[data_BLP == "sotho"] <- "Sotho";
data_BLP[data_BLP == "SHONA"] <- "Shona";
data_BLP[data_BLP == "hungarian"] <- "Hungarian";
data_BLP[data_BLP == "afrikaans"|data_BLP=="AFRIKAANS"] <- "Afrikaans";
data_BLP[data_BLP == "german"|data_BLP=="GERMAN"|data_BLP=="germany"|data_BLP=="Deustch"] <- "German";
data_BLP[data_BLP == "sweedish"] <- "Swedish";
data_BLP[data_BLP == "Deutch"] <- "Dutch"; # probably - maybe Deutsch?
data_BLP[data_BLP == "SESOTHO"] <- "Sesotho";
data_BLP[data_BLP == "RUSSIAN"|data_BLP=="russian"] <- "Russian";
data_BLP[data_BLP == "tswana"] <- "Tswana";
data_BLP[data_BLP == "SEPEDI"|data_BLP=="sepedi"] <- "Sepedi";
data_BLP[data_BLP == "XItsonga"] <- "Xitsonga";
data_BLP[data_BLP == "N/A"] <- "n/a";
# correcting some participants' demographic information - correction based off of Prolific's information
data_BLP["Age"][data_BLP["sbj_ID"] == "5aa787c66219a30001c765f8"] <- "24";
data_BLP["Gender"][data_BLP["sbj_ID"] == "5aa787c66219a30001c765f8"] <- "Man";
data_BLP["Gender"][data_BLP["sbj_ID"] == "5bcd11401662020001fe82c1"] <- "Man";
data_BLP["Gender"][data_BLP["sbj_ID"] == "5e3ff59bf2160b23942ada93"] <- "Man";
data_BLP["Age"][data_BLP["sbj_ID"] == "5e577e79ce30ae13226e61ae"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "5e8c57d9b4483e012006e7aa"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5ecbb4c00bc62403dae2df59"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5ee942381a22491bbb7170f8"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5f219602670e5a0af2cf5237"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5f47e34858dd331165bf9f00"] <- "21";
data_BLP["Gender"][data_BLP["sbj_ID"] == "5f5a713d37f71112463ab4d9"] <- "Woman";
data_BLP["Age"][data_BLP["sbj_ID"] == "5f99cee5a2a7d109a1624e10"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5fa4725a186c050edc3bcc20"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "5fc2d2d79da439201ab6addc"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "5fc44d83862e3e79b02e0438"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "5fd9c5c67fa7c74ec42bb318"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "6065d7d47409810344f7e6bb"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "60883a7e91c0be66dbb96fc8"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "608c2e566d92c2aa3543e2d2"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "60e3b18d3d4205b4c52ada56"] <- "24";
data_BLP["Gender"][data_BLP["sbj_ID"] == "60e9ea97d19e613e60a994da"] <- "Man";
data_BLP["Age"][data_BLP["sbj_ID"] == "611eafa6011b0423f7d7230f"] <- "20";
data_BLP["Age"][data_BLP["sbj_ID"] == "612a98181f4b6d1cf01f926c"] <- "21";
data_BLP["Age"][data_BLP["sbj_ID"] == "61301fcb49db2f170cb02b93"] <- "25";
data_BLP["Age"][data_BLP["sbj_ID"] == "6156b68cc77b48d6693b361c"] <- "21";
data_BLP["Age"][data_BLP["sbj_ID"] == "616891e25a026e1f7262116c"] <- "22";
data_BLP["Gender"][data_BLP["sbj_ID"] == "616eb493bb7e4ab4fa1de8d4"] <- "Woman";
data_BLP["Age"][data_BLP["sbj_ID"] == "6171d922c871ba795b6a4827"] <- "23";
# make some variables factors
data_BLP$task <- as.factor(data_BLP$task)
data_BLP$sbj_ID <- as.factor(data_BLP$sbj_ID);
data_BLP$Age <- as.numeric(data_BLP$Age);
data_BLP$Gender <- as.factor(data_BLP$Gender);
data_BLP$Education <- as.factor(data_BLP$Education);
data_BLP$L1 <- as.factor(data_BLP$L1);
data_BLP$L2 <- as.factor(data_BLP$L2);
data_BLP$L3 <- as.factor(data_BLP$L3);
data_BLP$L4 <- as.factor(data_BLP$L4);
data_BLP$otherLs <- as.factor(data_BLP$otherLs);
data_BLP$AttentionL1 <- as.factor(data_BLP$AttentionL1);
data_BLP$AttentionL2 <- as.factor(data_BLP$AttentionL2);
data_BLP$AttentionL3 <- as.factor(data_BLP$AttentionL3);
data_BLP$AttentionL4 <- as.factor(data_BLP$AttentionL4);
library(toolbox);
data_BLP$temp_sbjID <- c(1:193); # necessary: R doesn't like format of Prolific IDs
scores_list <- combineCols(data_BLP, cols=c('L1Score','L2Score','L3Score','L4Score'),by_name=TRUE); # combine scores into 1 list
# multilingual balance: variance
vars <- list();
for (i in 1:193) { # calculate variance for each participant
temp <- unlist(scores_list[i]);
var <- var(temp,na.rm=TRUE);
vars <- append(vars, var)
};
data_BLP$lang_var <- vars;
data_BLP$lang_var <- as.numeric(data_BLP$lang_var);
# multilingual balance: entropy
entropies <- list();
library(DescTools);
for (i in 1:193) { # calculate entropy for each participant
temp <- unlist(scores_list[i]);
entropy <- Entropy(temp,na.rm=TRUE);
entropies <- append(entropies, entropy)
};
data_BLP$lang_ent <- entropies;
data_BLP$lang_ent <- as.numeric(data_BLP$lang_ent);
# multilingual experience: summing all language scores
data_BLP["L2Score"][is.na(data_BLP["L2Score"])] <- 0;
data_BLP["L3Score"][is.na(data_BLP["L3Score"])] <- 0;
data_BLP["L4Score"][is.na(data_BLP["L4Score"])] <- 0;
data_BLP$multi_exp <- data_BLP$L1Score + data_BLP$L2Score + data_BLP$L3Score + data_BLP$L4Score;
# L1 - L2 score
data_BLP$L1_L2_diff <- data_BLP$L1Score - data_BLP$L2Score;
var(data_BLP$L1Score); # var = 369.41
var(data_BLP$L2Score); # var = 1167.72
var(data_BLP$L3Score); # var = 2066.13
var(data_BLP$L4Score); # var = 980.75
# count number of participants in each category
#monolinguals: n=4
data_BLP_monos <- subset(data_BLP[data_BLP$L2Score==0,]);
#bilinguals: n=80
data_BLP_bis <- subset(data_BLP[data_BLP$L2Score!=0&data_BLP$L3Score==0,]);
#trilinguals: n=58
data_BLP_tris <- subset(data_BLP[data_BLP$L2Score!=0&data_BLP$L3Score!=0&data_BLP$L4Score==0,]);
#quadrilinguals: n=51
data_BLP_quadris <- subset(data_BLP[data_BLP$L2Score!=0&data_BLP$L3Score!=0&data_BLP$L4Score!=0,]);
# CLUSTERING
complete_cases <- complete.cases(data_BLP)
data_filtered <- data_BLP[complete_cases, ]
#without language dominance scores
pca_varimax2 <- psych::principal(data_BLP[,19:34], nfactors=16, rotate='varimax');
pca_varimax2
pca_varimax2
# monolinguals
#without language dominance scores
data_BLP_monos <- data_BLP_monos[, !is.na(colSums(data_BLP_monos != 0)) & colSums(data_BLP_monos != 0) > 0];
data_BLP_monos <- subset(data_BLP_monos, select = -c(AttentionL2,AttentionL3,AttentionL4));
# count number of participants in each category
#monolinguals: n=4
data_BLP_monos <- subset(data_BLP[data_BLP$L2Score==0,]);
data_BLP_monos <- subset(data_BLP_monos, select = -c(AttentionL2,AttentionL3,AttentionL4));
pca_varimax3 <- psych::principal(data_BLP_monos[,13:17], nfactors=5, rotate='varimax');
View(data_BLP_monos)
colnames(data_BLP_monos)
pca_varimax3 <- psych::principal(data_BLP_monos[,16:31], nfactors=5, rotate='varimax');
is.na(data_BLP_monos[,16])
is.na(data_BLP_monos[,17])
is.na(data_BLP_monos[,18])
is.na(data_BLP_monos[,19])
is.na(data_BLP_monos[,20])
is.na(data_BLP_monos[,21])
is.na(data_BLP_monos[,22])
is.na(data_BLP_monos[,23])
is.na(data_BLP_monos[,24])
is.na(data_BLP_monos[,25])
is.na(data_BLP_monos[,26])
is.na(data_BLP_monos[,27])
is.na(data_BLP_monos[,28])
is.na(data_BLP_monos[,29])
is.na(data_BLP_monos[,30])
is.na(data_BLP_monos[,31])
#bilinguals: n=80
data_BLP_bis <- subset(data_BLP[data_BLP$L2Score!=0&data_BLP$L3Score==0,]);
#trilinguals: n=58
data_BLP_tris <- subset(data_BLP[data_BLP$L2Score!=0&data_BLP$L3Score!=0&data_BLP$L4Score==0,]);
#quadrilinguals: n=51
data_BLP_quadris <- subset(data_BLP[data_BLP$L2Score!=0&data_BLP$L3Score!=0&data_BLP$L4Score!=0,]);
data_BLP_bis <- subset(data_BLP_bis, select = -c(AttentionL3,AttentionL4));
pca_varimax4 <- psych::principal(data_BLP_bis[,15:22], nfactors=8, rotate='varimax');
colnames(data_BLP_bis)
pca_varimax4 <- psych::principal(data_BLP_bis[,17:32], nfactors=8, rotate='varimax');
# bilinguals
#without language dominance scores
data_BLP_bis <- data_BLP_bis[, !is.na(colSums(data_BLP_bis != 0)) & colSums(data_BLP_bis != 0) > 0];
data_BLP_bis <- subset(data_BLP_bis, select = -c(AttentionL3,AttentionL4));
pca_varimax4 <- psych::principal(data_BLP_bis[,17:32], nfactors=8, rotate='varimax');
# monolinguals
#without language dominance scores
data_BLP_monos <- data_BLP_monos[, !is.na(colSums(data_BLP_monos != 0)) & colSums(data_BLP_monos != 0) > 0];
data_BLP_monos <- subset(data_BLP_monos, select = -c(AttentionL2,AttentionL3,AttentionL4));
pca_varimax3 <- psych::principal(data_BLP_monos[,16:31], nfactors=5, rotate='varimax');
pca_varimax4
View(data_BLP_bis)
colnames((data_BLP_bis))
colnames(data_BLP_monos)
pca_varimax3 <- psych::principal(data_BLP_monos[,13:16], nfactors=5, rotate='varimax');
pca_varimax4 <- psych::principal(data_BLP_bis[,15:22], nfactors=8, rotate='varimax');
data_BLP_tris <- subset(data_BLP_tris, select = -c(AttentionL4));
pca_varimax5 <- psych::principal(data_BLP_tris[,15:26], nfactors=12, rotate='varimax');
colnames(data_BLP_tris)
pca_varimax4 <- psych::principal(data_BLP_bis[,18:33], nfactors=8, rotate='varimax');
pca_varimax5 <- psych::principal(data_BLP_tris[,18:33], nfactors=12, rotate='varimax');
# trilinguals
#without language dominance scores
data_BLP_tris <- data_BLP_tris[, !is.na(colSums(data_BLP_tris != 0)) & colSums(data_BLP_tris != 0) > 0];
data_BLP_tris <- subset(data_BLP_tris, select = -c(AttentionL4));
pca_varimax5 <- psych::principal(data_BLP_tris[,18:33], nfactors=12, rotate='varimax');
# quadrilinguals
#without language dominance scores
data_BLP_quadris <- data_BLP_quadris[, !is.na(colSums(data_BLP_quadris != 0)) & colSums(data_BLP_quadris != 0) > 0];
pca_varimax6 <- psych::principal(data_BLP_quadris[,17:32], nfactors=16, rotate='varimax');
pca_varimax4
# count number of participants in each category
#monolinguals: n=4
data_BLP_monos <- subset(data_BLP[data_BLP$L2Score==0,]);
# monolinguals
#without language dominance scores
data_BLP_monos <- data_BLP_monos[, !is.na(colSums(data_BLP_monos != 0)) & colSums(data_BLP_monos != 0) > 0];
data_BLP_monos <- subset(data_BLP_monos, select = -c(AttentionL2,AttentionL3,AttentionL4));
pca_varimax3 <- psych::principal(data_BLP_monos[,13:16], nfactors=5, rotate='varimax');
# bilinguals
#without language dominance scores
data_BLP_bis <- data_BLP_bis[, !is.na(colSums(data_BLP_bis != 0)) & colSums(data_BLP_bis != 0) > 0];
data_BLP_bis <- subset(data_BLP_bis, select = -c(AttentionL3,AttentionL4));
#bilinguals: n=80
data_BLP_bis <- subset(data_BLP[data_BLP$L2Score!=0&data_BLP$L3Score==0,]);
#trilinguals: n=58
data_BLP_tris <- subset(data_BLP[data_BLP$L2Score!=0&data_BLP$L3Score!=0&data_BLP$L4Score==0,]);
#quadrilinguals: n=51
data_BLP_quadris <- subset(data_BLP[data_BLP$L2Score!=0&data_BLP$L3Score!=0&data_BLP$L4Score!=0,]);
# bilinguals
#without language dominance scores
data_BLP_bis <- data_BLP_bis[, !is.na(colSums(data_BLP_bis != 0)) & colSums(data_BLP_bis != 0) > 0];
data_BLP_bis <- subset(data_BLP_bis, select = -c(AttentionL3,AttentionL4));
pca_varimax4 <- psych::principal(data_BLP_bis[,15:22], nfactors=8, rotate='varimax');
pca_varimax4
# trilinguals
#without language dominance scores
data_BLP_tris <- data_BLP_tris[, !is.na(colSums(data_BLP_tris != 0)) & colSums(data_BLP_tris != 0) > 0];
data_BLP_tris <- subset(data_BLP_tris, select = -c(AttentionL4));
pca_varimax5 <- psych::principal(data_BLP_tris[,18:33], nfactors=12, rotate='varimax');
pca_varimax5
colnames(data_BLP_tris)
pca_varimax5 <- psych::principal(data_BLP_tris[,15:26], nfactors=12, rotate='varimax');
pca_varimax5
# quadrilinguals
#without language dominance scores
data_BLP_quadris <- data_BLP_quadris[, !is.na(colSums(data_BLP_quadris != 0)) & colSums(data_BLP_quadris != 0) > 0];
pca_varimax6 <- psych::principal(data_BLP_quadris[,17:32], nfactors=16, rotate='varimax');
pca_varimax6
