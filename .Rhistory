theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
sem<-data.frame(Mean=c(69.66,49.83),
sd=c(2.45,2.29),
Type=as.factor(c("Bilingual","Monolingual")),
Category=c("Bilingual","Monolingual"),
Insert= c(0.0, 0.5))
sem2 <- ggplot(sem, aes(x=Category, y=Mean, fill=Category)) +
geom_bar(position=position_dodge(), stat="identity",
colour='black') +
geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2) +
scale_fill_manual(values=c("#999999", "#646464")) +
theme(text = element_text(family = "serif")) +
labs(y="Scores", title="Semantic condition") +
theme(legend.position = "none") +
theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
ggarrange(cog2, con2, int2, sem2,
ncol = 2, nrow = 2)
bi<-data.frame(Mean=c(84.07,38.69,52.41,69.66),
sd=c(12.22,17.54,16.74,13.21),
Type=as.factor(c("Cognate","Control","Interlingual Homophone","Semantic")),
Category=c("Cognate","Control","Interlingual Homophone","Semantic"),
Insert= c(0.0, 0.1, 0.5, 1))
bi2<-ggplot(bi, aes(x=Category, y=Mean, fill=Category)) +
geom_bar(position=position_dodge(), stat="identity",
colour='black') +
geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2) +
scale_fill_manual(values=c("#696969", "#808080", "#a9a9a9", "#DCDCDC")) +
theme(text = element_text(family = "serif")) +
labs(y="Scores", title="Bilinguals") +
theme(legend.position = "none") +
theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
bi2
mono<-data.frame(Mean=c(79.83,47.13,57.39,49.83),
sd=c(3.26,2.73,2.31,2.29),
Type=as.factor(c("Cognate","Control","Interlingual Homophone","Semantic")),
Category=c("Cognate","Control","Interlingual Homophone","Semantic"),
Insert= c(0.0, 0.1, 0.5, 1))
mono2 <- ggplot(mono, aes(x=Category, y=Mean, fill=Category)) +
geom_bar(position=position_dodge(), stat="identity",
colour='black') +
geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2) +
scale_fill_manual(values=c("#696969", "#808080", "#a9a9a9", "#DCDCDC")) +
theme(text = element_text(family = "serif")) +
labs(y="Scores", title="Monolinguals") +
theme(legend.position = "none") +
theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
ggarrange(bi2, mono2,
ncol = 1, nrow = 2)
bi<-data.frame(Mean=c(84.07,38.69,52.41,69.66),
sd=c(2.27,3.26,3.11,2.45),
Type=as.factor(c("Cognate","Control","Interlingual Homophone","Semantic")),
Category=c("Cognate","Control","Interlingual Homophone","Semantic"),
Insert= c(0.0, 0.1, 0.5, 1))
bi<-data.frame(Mean=c(84.07,38.69,52.41,69.66),
sd=c(2.27,3.26,3.11,2.45),
Type=as.factor(c("Cognate","Control","Interlingual Homophone","Semantic")),
Category=c("Cognate","Control","Interlingual Homophone","Semantic"),
Insert= c(0.0, 0.1, 0.5, 1))
bi2<-ggplot(bi, aes(x=Category, y=Mean, fill=Category)) +
geom_bar(position=position_dodge(), stat="identity",
colour='black') +
geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2) +
scale_fill_manual(values=c("#696969", "#808080", "#a9a9a9", "#DCDCDC")) +
theme(text = element_text(family = "serif")) +
labs(y="Scores", title="Bilinguals") +
theme(legend.position = "none") +
theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
bi2
mono<-data.frame(Mean=c(79.83,47.13,57.39,49.83),
sd=c(3.26,2.73,2.31,2.29),
Type=as.factor(c("Cognate","Control","Interlingual Homophone","Semantic")),
Category=c("Cognate","Control","Interlingual Homophone","Semantic"),
Insert= c(0.0, 0.1, 0.5, 1))
mono2 <- ggplot(mono, aes(x=Category, y=Mean, fill=Category)) +
geom_bar(position=position_dodge(), stat="identity",
colour='black') +
geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2) +
scale_fill_manual(values=c("#696969", "#808080", "#a9a9a9", "#DCDCDC")) +
theme(text = element_text(family = "serif")) +
labs(y="Scores", title="Monolinguals") +
theme(legend.position = "none") +
theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
ggarrange(bi2, mono2,
ncol = 1, nrow = 2)
cog<-data.frame(Mean=c(72.72,72.03),
sd=c(2.46,2.50),
Type=as.factor(c("Bilingual","Monolingual")),
Category=c("Bilingual","Monolingual"),
Insert= c(0.0, 0.5))
cog2 <- ggplot(cog, aes(x=Category, y=Mean, fill=Category)) +
geom_bar(position=position_dodge(), stat="identity",
colour='black') +
geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2) +
scale_fill_manual(values=c("#999999", "#646464")) +
theme(text = element_text(family = "serif")) +
labs(y="Scores", title="Cognate condition") +
theme(legend.position = "none") +
theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
con<-data.frame(Mean=c(50.93,50.02),
sd=c(3.13,3.56),
Type=as.factor(c("Bilingual","Monolingual")),
Category=c("Bilingual","Monolingual"),
Insert= c(0.0, 0.5))
con2 <- ggplot(con, aes(x=Category, y=Mean, fill=Category)) +
geom_bar(position=position_dodge(), stat="identity",
colour='black') +
geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2) +
scale_fill_manual(values=c("#999999", "#646464")) +
theme(text = element_text(family = "serif")) +
labs(y="Scores", title="Control condition") +
theme(legend.position = "none") +
theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
int<-data.frame(Mean=c(60.07,59.55),
sd=c(2.68,2.82),
Type=as.factor(c("Bilingual","Monolingual")),
Category=c("Bilingual","Monolingual"),
Insert= c(0.0, 0.5))
int2 <- ggplot(int, aes(x=Category, y=Mean, fill=Category)) +
geom_bar(position=position_dodge(), stat="identity",
colour='black') +
geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2) +
scale_fill_manual(values=c("#999999", "#646464")) +
theme(text = element_text(family = "serif")) +
labs(y="Scores", title="Interlingual Homophone condition") +
theme(legend.position = "none") +
theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
sem<-data.frame(Mean=c(66.62,2.57),
sd=c(51.28,3.32),
Type=as.factor(c("Bilingual","Monolingual")),
Category=c("Bilingual","Monolingual"),
Insert= c(0.0, 0.5))
sem2 <- ggplot(sem, aes(x=Category, y=Mean, fill=Category)) +
geom_bar(position=position_dodge(), stat="identity",
colour='black') +
geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2) +
scale_fill_manual(values=c("#999999", "#646464")) +
theme(text = element_text(family = "serif")) +
labs(y="Scores", title="Semantic condition") +
theme(legend.position = "none") +
theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
ggarrange(cog2, con2, int2, sem2,
ncol = 2, nrow = 2)
sem<-data.frame(Mean=c(66.62,51.28),
sd=c(2.57,3.32),
Type=as.factor(c("Bilingual","Monolingual")),
Category=c("Bilingual","Monolingual"),
Insert= c(0.0, 0.5))
sem2 <- ggplot(sem, aes(x=Category, y=Mean, fill=Category)) +
geom_bar(position=position_dodge(), stat="identity",
colour='black') +
geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2) +
scale_fill_manual(values=c("#999999", "#646464")) +
theme(text = element_text(family = "serif")) +
labs(y="Scores", title="Semantic condition") +
theme(legend.position = "none") +
theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
ggarrange(cog2, con2, int2, sem2,
ncol = 2, nrow = 2)
bi<-data.frame(Mean=c(72.72,50.93,60.07,66.62),
sd=c(2.46,3.13,2.68,2.57),
Type=as.factor(c("Cognate","Control","Interlingual Homophone","Semantic")),
Category=c("Cognate","Control","Interlingual Homophone","Semantic"),
Insert= c(0.0, 0.1, 0.5, 1))
bi2<-ggplot(bi, aes(x=Category, y=Mean, fill=Category)) +
geom_bar(position=position_dodge(), stat="identity",
colour='black') +
geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2) +
scale_fill_manual(values=c("#696969", "#808080", "#a9a9a9", "#DCDCDC")) +
theme(text = element_text(family = "serif")) +
labs(y="Scores", title="Bilinguals") +
theme(legend.position = "none") +
theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
mono<-data.frame(Mean=c(72.03,50.02,59.55,51.28),
sd=c(2.50,3.56,2.82,3.32),
Type=as.factor(c("Cognate","Control","Interlingual Homophone","Semantic")),
Category=c("Cognate","Control","Interlingual Homophone","Semantic"),
Insert= c(0.0, 0.1, 0.5, 1))
mono2 <- ggplot(mono, aes(x=Category, y=Mean, fill=Category)) +
geom_bar(position=position_dodge(), stat="identity",
colour='black') +
geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2) +
scale_fill_manual(values=c("#696969", "#808080", "#a9a9a9", "#DCDCDC")) +
theme(text = element_text(family = "serif")) +
labs(y="Scores", title="Monolinguals") +
theme(legend.position = "none") +
theme(axis.title.x = element_blank()) +
theme(axis.text.x = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 100)
ggarrange(bi2, mono2,
ncol = 1, nrow = 2)
summary3<-read.csv("C:/Users/annal/OneDrive - University of Sussex/School/2021-2022/Spring term - 4th year project/Data/SummaryAnalysisByParticipant3.csv")
attach(summary3)
str(summary3)
summary3 <- summary3 %>%
gather(key = "condition", value = "scores", CogDiffCon, IntDiffCon, SemDiffCon) %>%
convert_as_factor(Participant.External.Session.ID, condition)
res.aov <- aov(scores ~ condition, data = summary3)
summary4 <- summary4 %>%
gather(key = "langexp", value = "exp", Eng_yearsused, Fr_yearsused, Eng_hoursspeaking, Fr_hoursspeaking) %>%
convert_as_factor(Participant.External.Session.ID, langexp)
summary4<-read.csv("C:/Users/annal/OneDrive - University of Sussex/School/2021-2022/Spring term - 4th year project/Data/SummaryAnalysisByParticipant4.csv")
attach(summary4)
str(summary4)
summary4 <- summary4 %>%
gather(key = "condition", value = "scores", CognateLogOdds, ControlLogOdds, InterlingualHomophoneLogOdds, SemanticLogOdds) %>%
convert_as_factor(Participant.External.Session.ID, condition)
summary4 <- summary4 %>%
gather(key = "langexp", value = "exp", Eng_yearsused, Fr_yearsused, Eng_hoursspeaking, Fr_hoursspeaking) %>%
convert_as_factor(Participant.External.Session.ID, langexp)
res.aov <- summary4 %>%
anova_test(scores ~ langexp + condition)
get_anova_table(res.aov)
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
warning = FALSE,
fig.path = "graphics/",
fig.width = 8,
fig.height = 4,
fig.retina = 2,
fig.align = "center",
fig.pos = "t",
collapse = TRUE
)
load("data/class5.RData");
library(lme4); #this is necessary for 'lmer'
library(rms); #this is necessary for 'rcs'
package.install(rms)
install.packages("rms")
library(rms); #this is necessary for 'rcs'
library(Hmisc)
install.packages("htmltools")
install.packages("htmltools")
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
warning = FALSE,
fig.path = "graphics/",
fig.width = 8,
fig.height = 4,
fig.retina = 2,
fig.align = "center",
fig.pos = "t",
collapse = TRUE
)
load("data/class5.RData");
library(lme4); #this is necessary for 'lmer'
library(rms); #this is necessary for 'rcs'
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
remove.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
warning = FALSE,
fig.path = "graphics/",
fig.width = 8,
fig.height = 4,
fig.retina = 2,
fig.align = "center",
fig.pos = "t",
collapse = TRUE
)
load("data/class5.RData");
library(lme4); #this is necessary for 'lmer'
library(rms); #this is necessary for 'rcs'
m4 <- lmer(rt ~ 1 + rcs(ticks,4)*condition + (1|sbjId) + (1|target), data=data_for_analysis);
summary(m4)[[10]]; #betas are quite crazy (high and low), and quite some variability. Lots of significance, but not easy to interpret. But wait before jumping there, let's check whether the non-linearity was worth it:
anova(m4,m3); #it does provide a nice improvement in goodness of fit, for the extra complexity that it costs (which is a lot, note -- 6 dfs)
#does the model fit the data better?
library(effects);
###########
# PILOT 5 #
###########
setwd("C:/Users/annal/OneDrive/Documents/GitHub/affixproject")
# TESTING
# import testing data
data_pilot_testing <- read.csv("testing_preprocessed.csv",header=T,sep=",");
data_pilot_testing <- subset(data_pilot_testing, select = -c(X)) # remove redundant column added by Pavlovia
data_pilot5_testing <- subset(data_pilot_testing, sbj_ID=='58f50400f4ce600001016db5'|sbj_ID=='5b715800b31d480001eda165'|sbj_ID=='5be84b9a40b06b0001370c9f'|sbj_ID=='5c5baaec192d350001d5c8e4'|sbj_ID=='5ed02ffb8090240f93ab74ad'|sbj_ID=='5ee25b060f0ccf35b31431af'|sbj_ID=='5eff6828a958150135ede8a4'|sbj_ID=='5f5282f98bb76c54f2c603a7'|sbj_ID=='5f60713e595007000a8e1da7'|sbj_ID=='5fbbdd11ff4568d9cc3536fb'|sbj_ID=='5fc65d9cc4575b0b47981de8'|sbj_ID=='5fd0c81fc79aef1882cbee94'|sbj_ID=='5fdf808af53c7a7e9199b430'|sbj_ID=='603e0fefed5529d4b14e3546'|sbj_ID=='605de3af48d7a575adb95b09'|sbj_ID=='60b87f3ca1dbf6bb340c9bb0'|sbj_ID=='60bb62cbaccd206e3502516e'|sbj_ID=='60d8873c18e520a7d5ae555f'|sbj_ID=='60fd0845a9a6b47d7adfea22'|sbj_ID=='60fd913b3fd4aeea9829cff3'|sbj_ID=='61086c2bfda98ba5d75b9db4'|sbj_ID=='611d33d7cc16fdd812b1a4c4'|sbj_ID=='6127f94d2af664941ae3bf4f'|sbj_ID=='612b5ed8c3b1fcb978aad0a8'|sbj_ID=='6136aa846e80ebd7daf6e148'|sbj_ID=='614e230ff8700b32ea648508'|sbj_ID=='61533ead92c280c34cc22482'|sbj_ID=='6172a1d4cffa5162140cc8c2'|sbj_ID=='64526929d8f9b780b29d4d8d'|sbj_ID=='648b962b8fdb1fa686213ac1');
# make some variables factors
data_pilot5_testing$sbj_ID <- as.factor(data_pilot5_testing$sbj_ID);
data_pilot5_testing$task <- as.factor(data_pilot5_testing$task);
data_pilot5_testing$item <- as.factor(data_pilot5_testing$item);
data_pilot5_testing$testing_condition <- as.factor(data_pilot5_testing$testing_condition);
data_pilot5_testing$correct <- as.logical(data_pilot5_testing$correct);
# 0M yes responses boxplot
data_pilot5_testing_0M_yes <- aggregate(data_pilot5_testing$observed[data_pilot5_testing$testing_condition=='0M'], by=list(data_pilot5_testing$sbj_ID[data_pilot5_testing$testing_condition=='0M']), FUN = function(x) sum(x == 0));
data_pilot5_testing_0M_yes$x <- (data_pilot5_testing_0M_yes$x)*10/4;
colnames(data_pilot5_testing_0M_yes)[colnames(data_pilot5_testing_0M_yes)=="Group.1"]="sbj_ID";
colnames(data_pilot5_testing_0M_yes)[colnames(data_pilot5_testing_0M_yes)=="x"]="x_0";
# 1M yes responses boxplot
data_pilot5_testing_1M_yes <- aggregate(data_pilot5_testing$observed[data_pilot5_testing$testing_condition=='1M'], by=list(data_pilot5_testing$sbj_ID[data_pilot5_testing$testing_condition=='1M']), FUN = function(x) sum(x == 0));
data_pilot5_testing_1M_yes$x <- (data_pilot5_testing_1M_yes$x)*10/4;
colnames(data_pilot5_testing_1M_yes)[colnames(data_pilot5_testing_1M_yes)=="Group.1"]="sbj_ID";
colnames(data_pilot5_testing_1M_yes)[colnames(data_pilot5_testing_1M_yes)=="x"]="x_1";
# 2M yes responses boxplot
data_pilot5_testing_2M_yes <- aggregate(data_pilot5_testing$observed[data_pilot5_testing$testing_condition=='2M'], by=list(data_pilot5_testing$sbj_ID[data_pilot5_testing$testing_condition=='2M']), FUN = function(x) sum(x == 0));
data_pilot5_testing_2M_yes$x <- (data_pilot5_testing_2M_yes$x)*10/4;
colnames(data_pilot5_testing_2M_yes)[colnames(data_pilot5_testing_2M_yes)=="x"]="x_2";
# yes responses across conditions
library(tidyverse);
data_pilot5_testing_conditions <- list(data_pilot5_testing_0M_yes,data_pilot5_testing_1M_yes,data_pilot5_testing_2M_yes) %>% reduce(inner_join, by='sbj_ID');
# 2M correct boxplot
data_pilot5_testing_2M_means <- aggregate(data_pilot5_testing$correct[data_pilot5_testing$testing_condition=='2M'], list(data_pilot5_testing$sbj_ID[data_pilot5_testing$testing_condition=='2M']), FUN=sum, na.rm=TRUE);
data_pilot5_testing_2M_means$x<-(data_pilot5_testing_2M_means$x)*10/4;
colnames(data_pilot5_testing_2M_means)[colnames(data_pilot5_testing_2M_means)=="Group.1"]="sbj_ID";
# testing d'
dprimes <- dPrime(data_pilot5_testing$sbj_ID, data_pilot5_testing$expected, data_pilot5_testing$observed);
# d' function
dPrime <- function(sbj, expectedResp, observedResp)
{
sbjNumbers <- unique(sbj);
dprimes <- vector(length=length(sbjNumbers), mode="numeric");
log_beta <- vector(length=length(sbjNumbers), mode="numeric");
c <- vector(length=length(sbjNumbers), mode="numeric");
subjects <- vector(length=length(sbjNumbers), mode="integer");
counter <- 1;
for (s in sbjNumbers)
{
contingencyTable <- xtabs(~ expectedResp[sbj==s] + observedResp[sbj==s]);
percVector <- contingencyTable[,2] / xtabs(~ expectedResp[sbj==s]);
nTrials <- length(expectedResp);
zhr <- ifelse( percVector[2]==1, qnorm( 1-(1/(2*nTrials))), qnorm(percVector[2]));
zfar <- ifelse(percVector[1]==0, qnorm( 1/(2*nTrials) ), qnorm(percVector[1]));
dprimes[counter] <- round(zhr - zfar, digits = 3);
log_beta[counter] <- round((zfar^2 - zhr^2)/2, digits = 3); #this is taken from Stanislaw and Todorov, PBR 1999. Log_beta=0 indicates no bias; negative values is bias for YES; positive values is bias for NO
c[counter] <- round( -(zhr + zfar)/2, digits = 3); # this is taken again from Stanislaw and Todorov, PBR 1999, who note that c "...assumes that subjects respond yes when the decision variable exceeds the criterion and no otherwise; responses are based directly on the decision variable, which some researchers regard as more plausible than assuming that responses are based on a likelihood ratio [which the assumption behind beta] (Richardson, 1994). Another advantage of c is that it is unaffected by changes in d', whereas {3 is not (Ingham, 1970; Macmil- lan, 1993; McNicol, 1972, pp. 63--64)". Similarly to log_beta, c=0 is no bias, negative c is bias for YES, negative c is bias for NO.
subjects[counter] <- s;
counter <- counter + 1;
};
print(data.frame(sbj=subjects, dprime=dprimes, log_beta=log_beta, c=c));
}
# testing d'
dprimes <- dPrime(data_pilot5_testing$sbj_ID, data_pilot5_testing$expected, data_pilot5_testing$observed);
# testing RTs
library(paletteer);
cols <- paletteer_d("khroma::smooth_rainbow");
IDs <- list(data_pilot5_testing$sbj_ID);
IDs <- sapply(IDs, unique);
data_pilot5_testing_rt_means <- aggregate(data_pilot5_testing$rt, list(data_pilot5_testing$sbj_ID), FUN=mean, na.rm=TRUE);
# testing accuracy*RTs
cor(data_pilot5_testing_2M_means$x, data_pilot5_testing_rt_means$x); # r = -0.20
# testing strategy
pilot5_strats <- list(data_pilot5_testing$strategy);
pilot5_strats <- sapply(pilot5_strats, unique);
# FAMILIARITY
data_pilot_familiarity <- read.csv("familiarity_preprocessed.csv",header=T,sep=",");
data_pilot5_familiarity <- subset(data_pilot_familiarity, select = -c(X)) # remove redundant column added by Pavlovia
data_pilot5_familiarity <- subset(data_pilot5_familiarity, sbj_ID=='58f50400f4ce600001016db5'|sbj_ID=='5b715800b31d480001eda165'|sbj_ID=='5be84b9a40b06b0001370c9f'|sbj_ID=='5c5baaec192d350001d5c8e4'|sbj_ID=='5ed02ffb8090240f93ab74ad'|sbj_ID=='5ee25b060f0ccf35b31431af'|sbj_ID=='5eff6828a958150135ede8a4'|sbj_ID=='5f5282f98bb76c54f2c603a7'|sbj_ID=='5f60713e595007000a8e1da7'|sbj_ID=='5fbbdd11ff4568d9cc3536fb'|sbj_ID=='5fc65d9cc4575b0b47981de8'|sbj_ID=='5fd0c81fc79aef1882cbee94'|sbj_ID=='5fdf808af53c7a7e9199b430'|sbj_ID=='603e0fefed5529d4b14e3546'|sbj_ID=='605de3af48d7a575adb95b09'|sbj_ID=='60b87f3ca1dbf6bb340c9bb0'|sbj_ID=='60bb62cbaccd206e3502516e'|sbj_ID=='60d8873c18e520a7d5ae555f'|sbj_ID=='60fd0845a9a6b47d7adfea22'|sbj_ID=='60fd913b3fd4aeea9829cff3'|sbj_ID=='61086c2bfda98ba5d75b9db4'|sbj_ID=='611d33d7cc16fdd812b1a4c4'|sbj_ID=='6127f94d2af664941ae3bf4f'|sbj_ID=='612b5ed8c3b1fcb978aad0a8'|sbj_ID=='6136aa846e80ebd7daf6e148'|sbj_ID=='614e230ff8700b32ea648508'|sbj_ID=='61533ead92c280c34cc22482'|sbj_ID=='6172a1d4cffa5162140cc8c2'|sbj_ID=='64526929d8f9b780b29d4d8d'|sbj_ID=='648b962b8fdb1fa686213ac1');
# make some variables factors
data_pilot5_familiarity$sbj_ID <- as.factor(data_pilot5_familiarity$sbj_ID);
data_pilot5_familiarity$task <- as.factor(data_pilot5_familiarity$task);
data_pilot5_familiarity$correct <- as.logical(data_pilot5_familiarity$correct);
data_pilot5_familiarity$target <- as.factor(data_pilot5_familiarity$target);
data_pilot5_familiarity$confound <- as.factor(data_pilot5_familiarity$confound);
data_pilot5_familiarity_means <- aggregate(data_pilot5_familiarity$correct, list(data_pilot5_familiarity$sbj_ID), FUN=sum);
data_pilot5_familiarity_means$x<-(data_pilot5_familiarity_means$x)*10/3;
# familiarity RTs
IDs <- list(data_pilot5_familiarity$sbj_ID);
IDs <- sapply(IDs, unique);
data_pilot5_familiarity_rt_means <- aggregate(data_pilot5_familiarity$rt, list(data_pilot5_familiarity$sbj_ID), FUN=mean, na.rm=TRUE);
# familiarity accuracy*RTs
cor(data_pilot5_familiarity_means$x, data_pilot5_familiarity_rt_means$x); # r = 0.11
# BLP
data_pilots_BLP <- read.csv("BLP_preprocessed.csv",header=T,sep=",");
data_pilots_BLP <- subset(data_pilots_BLP, select = -c(X)) # remove redundant column added by Pavlovia
data_pilot5_BLP <- subset(data_pilots_BLP, sbj_ID=='58f50400f4ce600001016db5'|sbj_ID=='5b715800b31d480001eda165'|sbj_ID=='5be84b9a40b06b0001370c9f'|sbj_ID=='5c5baaec192d350001d5c8e4'|sbj_ID=='5ed02ffb8090240f93ab74ad'|sbj_ID=='5ee25b060f0ccf35b31431af'|sbj_ID=='5eff6828a958150135ede8a4'|sbj_ID=='5f5282f98bb76c54f2c603a7'|sbj_ID=='5f60713e595007000a8e1da7'|sbj_ID=='5fbbdd11ff4568d9cc3536fb'|sbj_ID=='5fc65d9cc4575b0b47981de8'|sbj_ID=='5fd0c81fc79aef1882cbee94'|sbj_ID=='5fdf808af53c7a7e9199b430'|sbj_ID=='603e0fefed5529d4b14e3546'|sbj_ID=='605de3af48d7a575adb95b09'|sbj_ID=='60b87f3ca1dbf6bb340c9bb0'|sbj_ID=='60bb62cbaccd206e3502516e'|sbj_ID=='60d8873c18e520a7d5ae555f'|sbj_ID=='60fd0845a9a6b47d7adfea22'|sbj_ID=='60fd913b3fd4aeea9829cff3'|sbj_ID=='61086c2bfda98ba5d75b9db4'|sbj_ID=='611d33d7cc16fdd812b1a4c4'|sbj_ID=='6127f94d2af664941ae3bf4f'|sbj_ID=='612b5ed8c3b1fcb978aad0a8'|sbj_ID=='6136aa846e80ebd7daf6e148'|sbj_ID=='614e230ff8700b32ea648508'|sbj_ID=='61533ead92c280c34cc22482'|sbj_ID=='6172a1d4cffa5162140cc8c2'|sbj_ID=='64526929d8f9b780b29d4d8d'|sbj_ID=='648b962b8fdb1fa686213ac1');
data_pilot5_BLP <- subset(data_pilot5_BLP, select = -c(AoAgioL1, AoAgioL2, AoAgioL3, AoAgioL4, anniInstrL1, anniInstrL2, anniInstrL3, anniInstrL4, anniPaeseL1, anniPaeseL2, anniPaeseL3, anniPaeseL4, anniFamigliaL1, anniFamigliaL2, anniFamigliaL3, anniFamigliaL4, anniLavoroL1, anniLavoroL2, anniLavoroL3, anniLavoroL4, PercAmiciL1, PercAmiciL2, PercAmiciL3, PercAmiciL4, PercFamigliaL1, PercFamigliaL2, PercFamigliaL3, PercFamigliaL4, PercLavoroL1, PercLavoroL2, PercLavoroL3, PercLavoroL4, PercStessoL1, PercStessoL2, PercStessoL3, PercStessoL4, PercCalcoliL1, PercCalcoliL2, PercCalcoliL3, PercCalcoliL4, ProfParlaL1, ProfParlaL2, ProfParlaL3, ProfParlaL4, ProfCapisceL1, ProfCapisceL2, ProfCapisceL3, ProfCapisceL4, ProfLeggeL1, ProfLeggeL2, ProfLeggeL3, ProfLeggeL4, ProfScriveL1, ProfScriveL2, ProfScriveL3, ProfScriveL4, AttMiStessoL1, AttMiStessoL2, AttMiStessoL3, AttMiStessoL4, AttCulturaL1, AttCulturaL2, AttCulturaL3, AttCulturaL4, AttLivNativoL1, AttLivNativoL2, AttLivNativoL3, AttLivNativoL4, AttMadrelinguaL1, AttMadrelinguaL2, AttMadrelinguaL3, AttMadrelinguaL4));
# standardise language responses
data_pilot5_BLP[data_pilot5_BLP == "polish"] <- "Polish";
data_pilot5_BLP[data_pilot5_BLP == "spanish"] <- "Spanish";
data_pilot5_BLP[data_pilot5_BLP == "hindi"] <- "Hindi";
data_pilot5_BLP[data_pilot5_BLP == "english" | data_pilot5_BLP == "engish"] <- "English";
data_pilot5_BLP[data_pilot5_BLP == "sepedi"] <- "Sepedi";
data_pilot5_BLP[data_pilot5_BLP == "sesotho"] <- "Sesotho";
data_pilot5_BLP[data_pilot5_BLP == "german"] <- "German";
data_pilot5_BLP[data_pilot5_BLP == "french"] <- "French";
data_pilot5_BLP[data_pilot5_BLP == "italian"] <- "Italian";
data_pilot5_BLP[data_pilot5_BLP == "setwana"] <- "Setwana";
data_pilot5_BLP[data_pilot5_BLP == "N/A"] <- "n/a";
# make some variables factors
data_pilot5_BLP$sbj_ID <- as.factor(data_pilot5_BLP$sbj_ID);
data_pilot5_BLP$Gender <- as.factor(data_pilot5_BLP$Gender);
data_pilot5_BLP$Education <- as.factor(data_pilot5_BLP$Education);
data_pilot5_BLP$L1 <- as.factor(data_pilot5_BLP$L1);
data_pilot5_BLP$L2 <- as.factor(data_pilot5_BLP$L2);
data_pilot5_BLP$L3 <- as.factor(data_pilot5_BLP$L3);
data_pilot5_BLP$L4 <- as.factor(data_pilot5_BLP$L4);
data_pilot5_BLP$otherLs <- as.factor(data_pilot5_BLP$otherLs);
data_pilot5_BLP$AttentionL1 <- as.factor(data_pilot5_BLP$AttentionL1);
data_pilot5_BLP$AttentionL2 <- as.factor(data_pilot5_BLP$AttentionL2);
data_pilot5_BLP$AttentionL3 <- as.factor(data_pilot5_BLP$AttentionL3);
data_pilot5_BLP$AttentionL4 <- as.factor(data_pilot5_BLP$AttentionL4);
library(toolbox);
scores_list <- combineCols(data_pilot5_BLP, cols=c('L1Score','L2Score','L3Score','L4Score'),by_name=TRUE); # combine scores into 1 list
data_pilot5_BLP$temp_sbjID <- c(1:30); # necessary: R doesn't like format of Prolific IDs
# multilingual balance: variance
vars <- list();
for (i in 1:30) { # calculate variance for each participant
temp <- unlist(scores_list[i]);
var <- var(temp,na.rm=TRUE);
vars <- append(vars, var)
};
data_pilot5_BLP$lang_var <- vars;
data_pilot5_BLP$lang_var <- as.numeric(data_pilot5_BLP$lang_var);
# multilingual balance: entropy
entropies <- list();
library(DescTools);
for (i in 1:30) { # calculate entropy for each participant
temp <- unlist(scores_list[i]);
entropy <- Entropy(temp,na.rm=TRUE);
entropies <- append(entropies, entropy)
};
data_pilot5_BLP$lang_ent <- entropies;
data_pilot5_BLP$lang_ent <- as.numeric(data_pilot5_BLP$lang_ent);
# corr of variance & entropy
cor(unlist(data_pilot5_BLP$lang_var),unlist(data_pilot5_BLP$lang_ent),method="pearson"); # r = -0.89 so strongly negatively correlated
# multilingual experience: summing all language scores
data_pilot5_BLP["L2Score"][is.na(data_pilot5_BLP["L2Score"])] <- 0;
data_pilot5_BLP["L3Score"][is.na(data_pilot5_BLP["L3Score"])] <- 0;
data_pilot5_BLP["L4Score"][is.na(data_pilot5_BLP["L4Score"])] <- 0;
data_pilot5_BLP$multi_exp <- data_pilot5_BLP$L1Score + data_pilot5_BLP$L2Score + data_pilot5_BLP$L3Score + data_pilot5_BLP$L4Score;
# L1 - L2 score
data_pilot5_BLP$L1_L2_diff <- data_pilot5_BLP$L1Score - data_pilot5_BLP$L2Score;
# corr of variance & accuracy
cor(data_pilot5_testing_2M_means$x, data_pilot5_BLP$lang_var); # r = 0.02
# corr of entropy & accuracy
cor(data_pilot5_testing_2M_means$x, data_pilot5_BLP$lang_ent); # r = 0.11
# corr of multilingual experience & accuracy
cor(data_pilot5_testing_means$x, data_pilot5_BLP$multi_exp); # r = -0.32
data_pilot5_testing_rt_means <- aggregate(data_pilot5_testing$rt, list(data_pilot5_testing$sbj_ID), FUN=mean, na.rm=TRUE);
# corr of multilingual experience & accuracy
cor(data_pilot5_testing_2M_means$x, data_pilot5_BLP$multi_exp); # r = -0.32
# corr of L1-L2 score & accuracy
cor(data_pilot5_testing_2M_means$x, data_pilot5_BLP$L1_L2_diff); # r = -0.26
# TESTING
# import testing data
data_pilot4_testing <- read.csv("testing_preprocessed.csv",header=T,sep=",");
data_pilot4_testing <- subset(data_pilot4_testing, select = -c(X)) # remove redundant column added by Pavlovia
# make some variables factors
data_pilot4_testing$sbj_ID <- as.factor(data_pilot4_testing$sbj_ID);
data_pilot4_testing$task <- as.factor(data_pilot4_testing$task);
data_pilot4_testing$item <- as.factor(data_pilot4_testing$item);
data_pilot4_testing$correct <- as.logical(data_pilot4_testing$correct);
summary(data_pilot4_testing);
# boxplot of all pilot 4 testing data
data_pilot4_testing_means <- aggregate(data_pilot4_testing$correct[complete.cases(data_pilot4_testing$correct)], list(data_pilot4_testing$sbj_ID[complete.cases(data_pilot4_testing$correct)]), FUN=sum);
data_pilot4_testing_means$x<-(data_pilot4_testing_means$x)*10/4;
data_pilot4.2_testing <- subset(data_pilot4_testing, sbj_ID=='60f1846c851ee5a978a0e015'|sbj_ID=='60fd703ecd62eb39eb07c328'|sbj_ID=='60ddf71e95896d2595f0e1a5'|sbj_ID=='605c9355001a5eb6d51e657d'|sbj_ID=='5f11ccbc1a1a2c08b4a99efb'|sbj_ID=='5fb3f38909fc360164f7c98d'|sbj_ID=='60a45e33f404ba8cb7a19cfe'|sbj_ID=='608abc6251feb3ddc3b2e01d'|sbj_ID=='608edc13472b2dbc27b369fa'|sbj_ID=='612d5712d75b6c46b4cefc63'|sbj_ID=='5e82e99b37d333a1474dda93'|sbj_ID=='613d091096ca434d703f77c5'|sbj_ID=='609568823ff056b77e565445'|sbj_ID=='5e80c7d61a07dd7b0d8f0111'|sbj_ID=='59aaf4b1321f870001d16f6c'|sbj_ID=='6048158f62550615002408af'|sbj_ID=='6161f43ddd46e845e7b3fab8'|sbj_ID=='5ec806f532fe7d2afa2e315b'|sbj_ID=='5e99d95e0f50aa04266ad4ad'|sbj_ID=='5c5e04ca6539fe00016e1afa');
# pilot 4.2
# testing boxplot
data_pilot4.2_testing_means <- aggregate(data_pilot4.2_testing$correct, list(data_pilot4.2_testing$sbj_ID), FUN=sum, na.rm=TRUE);
data_pilot4.2_testing_means$x<-(data_pilot4.2_testing_means$x)*10/4;
# testing d'
dprimes <- dPrime(data_pilot4.2_testing$sbj_ID, data_pilot4.2_testing$expected, data_pilot4.2_testing$observed);
summary(dprimes);
# testing d'
dprimes <- dPrime(data_pilot5_testing$sbj_ID, data_pilot5_testing$expected, data_pilot5_testing$observed);
summary(dprimes);
