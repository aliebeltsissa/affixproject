scores_list[[i]] <- data_pilot4.1_BLP[i,]
}
scores_list
# multilingual balance: variance
scores_list <- list();
for(i in 1:4) {
scores_list[[i]] <- data_pilot4.1_BLP[(107+i),]
}
scores_list
scores_list[[i]] <- data_pilot4.1_BLP[,(107+i)]
scores_list
data <- data.frame(x1 = 5:9,         # Create example data
x2 = letters[2:6],
x3 = "X")
my_list2 <- list()
for(i in 1:ncol(data)) {             # Using for-loop to add columns to list
my_list2[[i]] <- data[i]
}
my_list2
my_list2[[i]] <- data[,i]
for(i in 1:ncol(data)) {             # Using for-loop to add columns to list
my_list2[[i]] <- data[,i]
}
my_list2
my_list2[[i]] <- data[i,]
my_list2 <- list()
for(i in 1:ncol(data)) {             # Using for-loop to add columns to list
my_list2[[i]] <- data[i,]
}
my_list2
# multilingual balance: variance
scores_list <- list();
for(i in 1:4) {
scores_list[[i]] <- data_pilot4.1_BLP[(107+i),]
}
cores_list
scores_list
# multilingual balance: variance
scores_list <- combineCols(data_pilot4.1_BLP, cols=c('L1Score','L2Score','L3Score','L4Score'),by_name=TRUE)
# multilingual balance: variance
library(toolbox)
install.packages(toolbox)
install.packages("toolbox")
# multilingual balance: variance
library(toolbox);
scores_list <- combineCols(data_pilot4.1_BLP, cols=c('L1Score','L2Score','L3Score','L4Score'),by_name=TRUE)
scores_list
data_pilot4.1_BLP$lang_var <- var(scores_list);
data_pilot4.1_BLP$lang_var <- var(scores_list,na.rm=TRUE);
View(scores_list)
typeof(scores_list[1])
typeof(scores_list[[1]])
typeof(scores_list)
scores_list <- unlist(scores_list);
data_pilot4.1_BLP$lang_var <- var(scores_list,na.rm=TRUE);
View(data_pilot4.1_BLP)
# BLP
data_pilot4.1_BLP <- subset(data_pilot4.1, task=='BLP',select=-c(trialn,target,confound,expected,observed,correct,rt,item));
# remove datapoints if participant doesn't know additional languages
data_pilot4.1_BLP$langfilter1 <- TRUE;
data_pilot4.1_BLP$langfilter2 <- TRUE;
data_pilot4.1_BLP$langfilter3 <- TRUE;
data_pilot4.1_BLP$langfilter4 <- TRUE;
data_pilot4.1_BLP$langfilter2[data_pilot4.1_BLP$L2Score==0] <- FALSE;
data_pilot4.1_BLP$langfilter3[data_pilot4.1_BLP$L3Score==0] <- FALSE;
data_pilot4.1_BLP$langfilter4[data_pilot4.1_BLP$L4Score==0] <- FALSE;
data_pilot4.1_BLP$L2Score[data_pilot4.1_BLP$langfilter2==FALSE] <- NA;
data_pilot4.1_BLP$L3Score[data_pilot4.1_BLP$langfilter3==FALSE] <- NA;
data_pilot4.1_BLP$L4Score[data_pilot4.1_BLP$langfilter4==FALSE] <- NA;
ok2 <- ! is.na(data_pilot4.1_BLP$L2Score);
ok3 <- ! is.na(data_pilot4.1_BLP$L3Score);
ok4 <- ! is.na(data_pilot4.1_BLP$L4Score);
scores_list <- combineCols(data_pilot4.1_BLP, cols=c('L1Score','L2Score','L3Score','L4Score'),by_name=TRUE);
scores_list <- unlist(scores_list);
data_pilot4.1_BLP$lang_var <- var(scores_list,na.rm=TRUE);
View(data_pilot4.1_BLP)
scores_list <- combineCols(data_pilot4.1_BLP, cols=c('L1Score','L2Score','L3Score','L4Score'),by_name=TRUE);
scores <- list();
for (i in 1:20) {
temp <- unlist(scores_list[i]);
scores <- scores + temp
};
scores <- list();
for (i in 1:20) {
temp <- unlist(scores_list[i]);
scores <- append(scores, temp)
};
scores
temp
typeof(temp)
is.atomic(temp)
data_pilot4.1_BLP$lang_var <- var(scores,na.rm=TRUE);
is.atomic(scores)
typeof(scores)
scores_list <- combineCols(data_pilot4.1_BLP, cols=c('L1Score','L2Score','L3Score','L4Score'),by_name=TRUE);
scores_list
vars <- list();
for (i in 1:20) {
temp <- unlist(scores_list[i]);
var <- var(temp,na.rm=TRUE)
vars <- append(vars, temp)
};
vars
temp
var(temp)
var(temp,na.rm=TRUE)
vars <- list();
for (i in 1:20) {
temp <- unlist(scores_list[i]);
var <- var(temp,na.rm=TRUE)
vars <- append(vars, var)
};
vars
data_pilot4.1_BLP$lang_var <- vars;
View(data_pilot4.1_BLP)
data <- c(216.85,61.926)
var(data)
# multilingual experience: summing all language scores
data_pilot4.1_BLP["L2Score"][is.na(data_pilot4.1_BLP["L2Score"])] <- 0
data_pilot4.1_BLP["L3Score"][is.na(data_pilot4.1_BLP["L3Score"])] <- 0
data_pilot4.1_BLP["L4Score"][is.na(data_pilot4.1_BLP["L4Score"])] <- 0
data_pilot4.1_BLP$multi_exp <- data_pilot4.1_BLP$L1Score + data_pilot4.1_BLP$L2Score + data_pilot4.1_BLP$L3Score + data_pilot4.1_BLP$L4Score
# L1 - L2 score
data_pilot4.1_BLP$L1_L2_diff <- data_pilot4.1_BLP$L1Score - data_pilot4.1_BLP$L2Score
View(data_pilot4.1_BLP)
# BLP
data_pilot4.2_BLP <- subset(data_pilot4.2, task=='BLP',select=-c(trialn,target,confound,expected,observed,correct,rt,item));
# remove datapoints if participant doesn't know additional languages
data_pilot4.2_BLP$langfilter1 <- TRUE;
data_pilot4.2_BLP$langfilter2 <- TRUE;
data_pilot4.2_BLP$langfilter3 <- TRUE;
data_pilot4.2_BLP$langfilter4 <- TRUE;
data_pilot4.2_BLP$langfilter2[data_pilot4.2_BLP$L2Score==0] <- FALSE;
data_pilot4.2_BLP$langfilter3[data_pilot4.2_BLP$L3Score==0] <- FALSE;
data_pilot4.2_BLP$langfilter4[data_pilot4.2_BLP$L4Score==0] <- FALSE;
data_pilot4.2_BLP$L2Score[data_pilot4.2_BLP$langfilter2==FALSE] <- NA;
data_pilot4.2_BLP$L3Score[data_pilot4.2_BLP$langfilter3==FALSE] <- NA;
data_pilot4.2_BLP$L4Score[data_pilot4.2_BLP$langfilter4==FALSE] <- NA;
ok2 <- ! is.na(data_pilot4.2_BLP$L2Score);
ok3 <- ! is.na(data_pilot4.2_BLP$L3Score);
ok4 <- ! is.na(data_pilot4.2_BLP$L4Score);
# multilingual balance: variance
scores_list <- combineCols(data_pilot4.2_BLP, cols=c('L1Score','L2Score','L3Score','L4Score'),by_name=TRUE); # combine scores into 1 list
vars <- list();
for (i in 1:20) { # calculate variance for each participant
temp <- unlist(scores_list[i]);
var <- var(temp,na.rm=TRUE)
vars <- append(vars, var)
};
data_pilot4.2_BLP$lang_var <- vars;
# multilingual experience: summing all language scores
data_pilot4.2_BLP["L2Score"][is.na(data_pilot4.2_BLP["L2Score"])] <- 0;
data_pilot4.2_BLP["L3Score"][is.na(data_pilot4.2_BLP["L3Score"])] <- 0;
data_pilot4.2_BLP["L4Score"][is.na(data_pilot4.2_BLP["L4Score"])] <- 0;
data_pilot4.2_BLP$multi_exp <- data_pilot4.2_BLP$L1Score + data_pilot4.2_BLP$L2Score + data_pilot4.2_BLP$L3Score + data_pilot4.2_BLP$L4Score;
# L1 - L2 score
data_pilot4.2_BLP$L1_L2_diff <- data_pilot4.2_BLP$L1Score - data_pilot4.2_BLP$L2Score
View(data_pilot4.2_BLP)
# plot language scores per participant
data_pilot4.1_BLP$temp_sbjID <- c(1:20) # necessary: R doesn't like format of Prolific IDs
plot(data_pilot4.1_BLP$temp_sbjID,data_pilot4.1_BLP$lang_var)
plot(data_pilot4.1_BLP$temp_sbjID,data_pilot4.1_BLP$lang_var,pch=19)
plot(data_pilot4.1_BLP$temp_sbjID,data_pilot4.1_BLP$lang_var,pch=19,xlab="Subject number",ylab="Language score variance")
# plot language scores per participant
data_pilot4.2_BLP$temp_sbjID <- c(1:20) # necessary: R doesn't like format of Prolific IDs
plot(data_pilot4.1_BLP$temp_sbjID,data_pilot4.1_BLP$L1_L2_diff,pch=19,xlab="Subject number",ylab="Score difference of L1 and L2")
plot(data_pilot4.1_BLP$temp_sbjID,data_pilot4.1_BLP$L1_L2_diff,pch=19,xlab="Subject number",ylab="Score difference of L1 and L2",ylim=c(0,218))
plot(data_pilot4.1_BLP$temp_sbjID,data_pilot4.1_BLP$multi_exp,pch=19,xlab="Subject number",ylab="Amount of total multilingual experience (out of 872)",ylim=c(0,872));
# BLP
data_pilot4.2_BLP <- subset(data_pilot4.2, task=='BLP',select=-c(trialn,target,confound,expected,observed,correct,rt,item));
# remove datapoints if participant doesn't know additional languages
data_pilot4.2_BLP$langfilter1 <- TRUE;
data_pilot4.2_BLP$langfilter2 <- TRUE;
data_pilot4.2_BLP$langfilter3 <- TRUE;
data_pilot4.2_BLP$langfilter4 <- TRUE;
data_pilot4.2_BLP$langfilter2[data_pilot4.2_BLP$L2Score==0] <- FALSE;
data_pilot4.2_BLP$langfilter3[data_pilot4.2_BLP$L3Score==0] <- FALSE;
data_pilot4.2_BLP$langfilter4[data_pilot4.2_BLP$L4Score==0] <- FALSE;
data_pilot4.2_BLP$L2Score[data_pilot4.2_BLP$langfilter2==FALSE] <- NA;
data_pilot4.2_BLP$L3Score[data_pilot4.2_BLP$langfilter3==FALSE] <- NA;
data_pilot4.2_BLP$L4Score[data_pilot4.2_BLP$langfilter4==FALSE] <- NA;
ok2 <- ! is.na(data_pilot4.2_BLP$L2Score);
ok3 <- ! is.na(data_pilot4.2_BLP$L3Score);
ok4 <- ! is.na(data_pilot4.2_BLP$L4Score);
# multilingual balance: variance
scores_list <- combineCols(data_pilot4.2_BLP, cols=c('L1Score','L2Score','L3Score','L4Score'),by_name=TRUE); # combine scores into 1 list
vars <- list();
for (i in 1:20) { # calculate variance for each participant
temp <- unlist(scores_list[i]);
var <- var(temp,na.rm=TRUE);
vars <- append(vars, var)
};
data_pilot4.2_BLP$lang_var <- vars;
plot(data_pilot4.2_BLP$temp_sbjID,data_pilot4.2_BLP$lang_var,pch=19,xlab="Subject number",ylab="Language score variance");
length(data_pilot4.2_BLP$temp_sbjID)
# plot language scores per participant
data_pilot4.2_BLP$temp_sbjID <- c(1:20) # necessary: R doesn't like format of Prolific IDs
plot(data_pilot4.2_BLP$temp_sbjID,data_pilot4.2_BLP$lang_var,pch=19,xlab="Subject number",ylab="Language score variance");
plot(data_pilot4.2_BLP$temp_sbjID,data_pilot4.2_BLP$lang_var,pch=19,xlab="Subject number",ylab="Language score variance",ylim=c(0,13000));
plot(data_pilot4.2_BLP$temp_sbjID,data_pilot4.2_BLP$lang_var,pch=19,xlab="Subject number",ylab="Language score variance",ylim=c(0,13000),yaxs="i");
plot(data_pilot4.1_BLP$temp_sbjID,data_pilot4.1_BLP$lang_var,pch=19,xlab="Subject number",ylab="Language score variance",ylim=c(0,13000),yaxs="i");
# multilingual experience: summing all language scores
data_pilot4.2_BLP["L2Score"][is.na(data_pilot4.2_BLP["L2Score"])] <- 0;
data_pilot4.2_BLP["L3Score"][is.na(data_pilot4.2_BLP["L3Score"])] <- 0;
data_pilot4.2_BLP["L4Score"][is.na(data_pilot4.2_BLP["L4Score"])] <- 0;
data_pilot4.2_BLP$multi_exp <- data_pilot4.2_BLP$L1Score + data_pilot4.2_BLP$L2Score + data_pilot4.2_BLP$L3Score + data_pilot4.2_BLP$L4Score;
plot(data_pilot4.1_BLP$temp_sbjID,data_pilot4.1_BLP$multi_exp,pch=19,xlab="Subject number",ylab="Amount of total multilingual experience (out of 872)",ylim=c(0,872));
plot(data_pilot4.1_BLP$temp_sbjID,data_pilot4.1_BLP$multi_exp,pch=19,xlab="Subject number",ylab="Amount of total multilingual experience (out of 872)",ylim=c(0,872),yaxs="i");
# L1 - L2 score
data_pilot4.2_BLP$L1_L2_diff <- data_pilot4.2_BLP$L1Score - data_pilot4.2_BLP$L2Score;
plot(data_pilot4.2_BLP$temp_sbjID,data_pilot4.2_BLP$L1_L2_diff,pch=19,xlab="Subject number",ylab="Score difference of L1 and L2",ylim=c(0,218))
plot(data_pilot4.2_BLP$temp_sbjID,data_pilot4.2_BLP$L1_L2_diff,pch=19,xlab="Subject number",ylab="Score difference of L1 and L2",ylim=c(0,218),yaxs="i");)
# testing accuracy*RTs
plot(data_pilot4.1_testing$correct,data_pilot4.1_testing$rt)
# testing
data_pilot4.1_testing <- subset(data_pilot4.1, task=='testing',select=c(sbj_ID,task,trialn,expected,observed,correct,rt,item,testing_strategy));
# testing boxplot
data_pilot4.1_testing_means <- aggregate(data_pilot4.1_testing$correct, list(data_pilot4.1_testing$sbj_ID), FUN=sum);
data_pilot4.1_testing_means$x<-(data_pilot4.1_testing_means$x)*10/4;
# testing accuracy*RTs
plot(data_pilot4.1_testing$correct,data_pilot4.1_testing$rt)
View(data_pilot4.1_testing_means)
# testing boxplot
data_pilot4.1_testing_means <- aggregate(data_pilot4.1_testing$correct, list(data_pilot4.1_testing$sbj_ID), FUN=sum);
data_pilot4.1_testing_means$x<-(data_pilot4.1_testing_means$x)*10/4;
View(data_pilot4.1_testing_means)
boxplot(data_pilot4.1_testing_means$x, ylab = "Accuracy score (in %)");
# split into different pilot 4 versions: 4.1 is with 4 training reps, 4.1 is with 8
data_pilot4.1 <- subset(data_pilot4, sbj_ID=='5fb7b8880045d6396a86c803'|sbj_ID=='5f4cc4ea00dba58ecd5a98a4'|sbj_ID=='615c43b800752a4f3d0fd1f0'|sbj_ID=='6175a0a52e748285b3476b27'|sbj_ID=='60b55a6d44e17d6f0b810cdd'|sbj_ID=='60d87fdab51e54fe4863f97f'|sbj_ID=='60ba2011cd8052508d401296'|sbj_ID=='5ee7b7c9eef92207297a0ad4'|sbj_ID=='614060a52d7c64c27ef9887c'|sbj_ID=='5d97c38dce449e001244dc15'|sbj_ID=='5ed54d02957bee0c0de36cac'|sbj_ID=='61158a5c1d8390415ff117a8'|sbj_ID=='5e823b35726b2a9508db127c'|sbj_ID=='5caca6b4a9acb200011a6547'|sbj_ID=='5cf14e1eb4397d0001f94e20'|sbj_ID=='5cb4adc019ee7300189e8547'|sbj_ID=='5f3161410f87706425490ae1'|sbj_ID=='5e8783b0fde5153fbd9dca43'|sbj_ID=='60c9c6e1728092717b93abde'|sbj_ID=='5feb64b3341f42bb63200e36');
# testing
data_pilot4.1_testing <- subset(data_pilot4.1, task=='testing',select=c(sbj_ID,task,trialn,expected,observed,correct,rt,item,testing_strategy));
# testing boxplot
data_pilot4.1_testing_means <- aggregate(data_pilot4.1_testing$correct, list(data_pilot4.1_testing$sbj_ID), FUN=sum);
data_pilot4.1_testing_means$x<-(data_pilot4.1_testing_means$x)*10/4;
boxplot(data_pilot4.1_testing_means$x, ylab = "Accuracy score (in %)");
View(data_pilot4.1_testing_means)
# testing boxplot
data_pilot4.1_testing_means <- aggregate(data_pilot4.1_testing$correct, list(data_pilot4.1_testing$sbj_ID), FUN=sum);
View(data_pilot4.1_testing_means)
###########
# PILOT 4 #
###########
setwd("C:/Users/annal/OneDrive/Documents/GitHub/affixproject")
data_pilot4 <- read.csv("Prolific_preprocessed.csv",header=T,sep=",");
data_pilot4 = subset(data_pilot4, select = -c(X)) # remove redundant column added by Pavlovia
# standardise language responses
data_pilot4[data_pilot4 == "italiano" | data_pilot4 == "italiana" | data_pilot4 == "Italiano" | data_pilot4 == "Italiana"] <- "Italian";
data_pilot4[data_pilot4 == "portoghese" | data_pilot4 == "Portoghese" | data_pilot4 == "Portuguese"] <- "Portuguese";
data_pilot4[data_pilot4 == "Francese" | data_pilot4 == "francese"] <- "French";
data_pilot4[data_pilot4 == "inglese" | data_pilot4 == "Inglese"] <- "English";
data_pilot4[data_pilot4 == "Spagnolo" | data_pilot4 == "spagnolo"] <- "Spanish";
data_pilot4[data_pilot4 == "Bulgaro"] <- "Bulgarian";
data_pilot4[data_pilot4 == "Coreano"] <- "Korean";
data_pilot4[data_pilot4 == "Piemontese"] <- "Piedmontese";
data_pilot4[data_pilot4 == "napoletano"] <- "Neapolitan";
data_pilot4[data_pilot4 == "Dialetto di Carovigno"] <- "Carovignian dialect";
data_pilot4[data_pilot4 == "russo"] <- "Russian";
data_pilot4[data_pilot4 == "Cinese"] <- "Chinese";
data_pilot4[data_pilot4 == "tedesco" | data_pilot4 == "Tedesco"] <- "German"
# make some variables factors
data_pilot4$sbj_ID <- as.factor(data_pilot4$sbj_ID);
data_pilot4$task <- as.factor(data_pilot4$task);
data_pilot4$target <- as.factor(data_pilot4$target);
data_pilot4$confound <- as.factor(data_pilot4$confound);
data_pilot4$item <- as.factor(data_pilot4$item);
data_pilot4$correct <- as.logical(data_pilot4$correct);
data_pilot4$Sex <- as.factor(data_pilot4$Sex);
data_pilot4$Education <- as.factor(data_pilot4$Education);
data_pilot4$L1 <- as.factor(data_pilot4$L1);
data_pilot4$L2 <- as.factor(data_pilot4$L2);
data_pilot4$L3 <- as.factor(data_pilot4$L3);
data_pilot4$L4 <- as.factor(data_pilot4$L4);
data_pilot4$otherLs <- as.factor(data_pilot4$otherLs);
data_pilot4$AttentionL1 <- as.factor(data_pilot4$AttentionL1);
data_pilot4$AttentionL2 <- as.factor(data_pilot4$AttentionL2);
data_pilot4$AttentionL3 <- as.factor(data_pilot4$AttentionL3);
data_pilot4$AttentionL4 <- as.factor(data_pilot4$AttentionL4);
# split into different pilot 4 versions: 4.1 is with 4 training reps, 4.1 is with 8
data_pilot4.1 <- subset(data_pilot4, sbj_ID=='5fb7b8880045d6396a86c803'|sbj_ID=='5f4cc4ea00dba58ecd5a98a4'|sbj_ID=='615c43b800752a4f3d0fd1f0'|sbj_ID=='6175a0a52e748285b3476b27'|sbj_ID=='60b55a6d44e17d6f0b810cdd'|sbj_ID=='60d87fdab51e54fe4863f97f'|sbj_ID=='60ba2011cd8052508d401296'|sbj_ID=='5ee7b7c9eef92207297a0ad4'|sbj_ID=='614060a52d7c64c27ef9887c'|sbj_ID=='5d97c38dce449e001244dc15'|sbj_ID=='5ed54d02957bee0c0de36cac'|sbj_ID=='61158a5c1d8390415ff117a8'|sbj_ID=='5e823b35726b2a9508db127c'|sbj_ID=='5caca6b4a9acb200011a6547'|sbj_ID=='5cf14e1eb4397d0001f94e20'|sbj_ID=='5cb4adc019ee7300189e8547'|sbj_ID=='5f3161410f87706425490ae1'|sbj_ID=='5e8783b0fde5153fbd9dca43'|sbj_ID=='60c9c6e1728092717b93abde'|sbj_ID=='5feb64b3341f42bb63200e36');
data_pilot4.2 <- subset(data_pilot4, sbj_ID=='60f1846c851ee5a978a0e015'|sbj_ID=='60fd703ecd62eb39eb07c328'|sbj_ID=='60ddf71e95896d2595f0e1a5'|sbj_ID=='605c9355001a5eb6d51e657d'|sbj_ID=='5f11ccbc1a1a2c08b4a99efb'|sbj_ID=='5fb3f38909fc360164f7c98d'|sbj_ID=='60a45e33f404ba8cb7a19cfe'|sbj_ID=='608abc6251feb3ddc3b2e01d'|sbj_ID=='608edc13472b2dbc27b369fa'|sbj_ID=='612d5712d75b6c46b4cefc63'|sbj_ID=='5e82e99b37d333a1474dda93'|sbj_ID=='613d091096ca434d703f77c5'|sbj_ID=='609568823ff056b77e565445'|sbj_ID=='5e80c7d61a07dd7b0d8f0111'|sbj_ID=='59aaf4b1321f870001d16f6c'|sbj_ID=='6048158f62550615002408af'|sbj_ID=='6161f43ddd46e845e7b3fab8'|sbj_ID=='5ec806f532fe7d2afa2e315b'|sbj_ID=='5e99d95e0f50aa04266ad4ad'|sbj_ID=='5c5e04ca6539fe00016e1afa');
# testing
data_pilot4.1_testing <- subset(data_pilot4.1, task=='testing',select=c(sbj_ID,task,trialn,expected,observed,correct,rt,item,testing_strategy));
# testing boxplot
data_pilot4.1_testing_means <- aggregate(data_pilot4.1_testing$correct, list(data_pilot4.1_testing$sbj_ID), FUN=sum);
data_pilot4.1_testing_means$x <- (data_pilot4.1_testing_means$x)*10/4;
boxplot(data_pilot4.1_testing_means$x, ylab = "Accuracy score (in %)");
View(data_pilot4.1_testing_means)
# testing boxplot
data_pilot4.1_testing_means <- aggregate(data_pilot4.1_testing$correct, list(data_pilot4.1_testing$sbj_ID), FUN=sum);
View(data_pilot4.1_testing_means)
217+62
217/279
62/279
0.78*log2(0.78)
0.22*log2(0.22)
-0.28+(-0.48)
View(data_pilot4.1_testing)
View(data_pilot4.1_testing_means)
# testing boxplot
data_pilot4.1_testing_means <- aggregate(data_pilot4.1_testing$correct, list(data_pilot4.1_testing$sbj_ID), FUN=sum);
View(data_pilot4.1_testing_means)
summary(data_pilot4.1_testing)
TRUE
int(TRUE)
as.integer(TRUE)
# BLP
data_pilot4.1_BLP <- subset(data_pilot4.1, task=='BLP',select=-c(trialn,target,confound,expected,observed,correct,rt,item));
# remove datapoints if participant doesn't know additional languages
data_pilot4.1_BLP$langfilter1 <- TRUE;
data_pilot4.1_BLP$langfilter2 <- TRUE;
data_pilot4.1_BLP$langfilter3 <- TRUE;
data_pilot4.1_BLP$langfilter4 <- TRUE;
data_pilot4.1_BLP$langfilter2[data_pilot4.1_BLP$L2Score==0] <- FALSE;
data_pilot4.1_BLP$langfilter3[data_pilot4.1_BLP$L3Score==0] <- FALSE;
data_pilot4.1_BLP$langfilter4[data_pilot4.1_BLP$L4Score==0] <- FALSE;
data_pilot4.1_BLP$L2Score[data_pilot4.1_BLP$langfilter2==FALSE] <- NA;
data_pilot4.1_BLP$L3Score[data_pilot4.1_BLP$langfilter3==FALSE] <- NA;
data_pilot4.1_BLP$L4Score[data_pilot4.1_BLP$langfilter4==FALSE] <- NA;
ok2 <- ! is.na(data_pilot4.1_BLP$L2Score);
ok3 <- ! is.na(data_pilot4.1_BLP$L3Score);
ok4 <- ! is.na(data_pilot4.1_BLP$L4Score);
# plot language scores per participant
data_pilot4.1_BLP$temp_sbjID <- c(1:20) # necessary: R doesn't like format of Prolific IDs
scores_list <- combineCols(data_pilot4.1_BLP, cols=c('L1Score','L2Score','L3Score','L4Score'),by_name=TRUE); # combine scores into 1 list
library(DescTools);
# multilingual balance: entropy
entropies <- list();
library(DescTools);
for (i in 1:20) { # calculate entropy for each participant
temp <- unlist(scores_list[i]);
sum <- sum(temp,na.rm=TRUE);
entropy <- Entropy(temp);
entropies <- append(entropies, entropy)
};
data_pilot4.1_BLP$lang_ent <- entropies;
View(data_pilot4.1_BLP)
for (i in 1:20) { # calculate entropy for each participant
temp <- unlist(scores_list[i]);
sum <- sum(temp,na.rm=TRUE);
entropy <- Entropy(table(temp,useNA="no"));
entropies <- append(entropies, entropy)
};
data_pilot4.1_BLP$lang_ent <- entropies;
View(entropies)
for (i in 1:20) { # calculate entropy for each participant
temp <- unlist(scores_list[i]);
sum <- sum(temp,na.rm=TRUE);
entropy <- Entropy(table(temp,useNA="ifany"));
entropies <- append(entropies, entropy)
};
data_pilot4.1_BLP$lang_ent <- entropies;
for (i in 1:20) { # calculate entropy for each participant
temp <- unlist(scores_list[i]);
sum <- sum(temp,na.rm=TRUE);
entropy <- Entropy(table(temp,useNA="always"));
entropies <- append(entropies, entropy)
};
data_pilot4.1_BLP$lang_ent <- entropies;
for (i in 1:20) { # calculate entropy for each participant
temp <- unlist(scores_list[i]);
sum <- sum(temp,na.rm=TRUE);
entropy <- Entropy(table(temp,useNA="no"));
entropies <- append(entropies, entropy)
};
data_pilot4.1_BLP$lang_ent <- entropies;
# multilingual balance: entropy
entropies <- list();
for (i in 1:20) { # calculate entropy for each participant
temp <- unlist(scores_list[i]);
sum <- sum(temp,na.rm=TRUE);
entropy <- Entropy(table(temp,useNA="no"));
entropies <- append(entropies, entropy)
};
data_pilot4.1_BLP$lang_ent <- entropies;
View(data_pilot4.1_BLP)
View(entropies)
# multilingual balance: entropy
#compute Shannon entropy
entropy <- function(target) {
freq <- table(target)/length(target)
# vectorize
vec <- as.data.frame(freq)[,2]
#drop 0 to avoid NaN resulting from log2
vec<-vec[vec>0]
#compute entropy
-sum(vec * log2(vec))
}
entropy(data_pilot4.1_BLP$L1Score)
0.25*log2(0.25)
(-0.5)*4
test <- c(2,2,2,2)
entropy(test)
log2(0.25)
entropies <- list();
for (i in 1:20) { # calculate entropy for each participant
temp <- unlist(scores_list[i]);
sum <- sum(temp,na.rm=TRUE);
entropy <- entropy(temp);
entropies <- append(entropies, entropy)
};
# multilingual balance: entropy
#compute Shannon entropy
entropy <- function(target) {
freq <- table(target)/length(target)
# vectorize
vec <- as.data.frame(freq)[,2]
#drop 0 to avoid NaN resulting from log2
vec<-vec[vec>0]
#compute entropy
-sum(vec * log2(vec))
};
entropies <- list();
for (i in 1:20) { # calculate entropy for each participant
temp <- unlist(scores_list[i]);
sum <- sum(temp,na.rm=TRUE);
entropy <- entropy(temp);
entropies <- append(entropies, entropy)
};
# multilingual balance: entropy
#compute Shannon entropy
entropy <- function(target) {
freq <- table(target)/length(target)
# vectorize
vec <- as.data.frame(freq)[,2]
#drop 0 to avoid NaN resulting from log2
vec<-vec[vec>0]
#compute entropy
-sum(vec * log2(vec))
};
entropies <- list();
for (i in 1:20) { # calculate entropy for each participant
temp <- unlist(scores_list[i]);
sum <- sum(temp,na.rm=TRUE);
ent <- entropy(temp);
entropies <- append(entropies, ent)
};
data_pilot4.1_BLP$lang_ent <- entropies;
View(data_pilot4.1_BLP)
entropies <- list();
for (i in 1:20) { # calculate entropy for each participant
temp <- unlist(scores_list[i]);
ent <- entropy(temp);
ent2 <- Entropy(table(temp,useNA = "no"))
entropies <- append(entropies, ent2)
};
data_pilot4.1_BLP$lang_ent2 <- entropies;
View(data_pilot4.1_BLP)
# BLP
data_pilot4.1_BLP <- subset(data_pilot4.1, task=='BLP',select=-c(trialn,target,confound,expected,observed,correct,rt,item));
# plot language scores per participant
data_pilot4.1_BLP$temp_sbjID <- c(1:20) # necessary: R doesn't like format of Prolific IDs
scores_list <- combineCols(data_pilot4.1_BLP, cols=c('L1Score','L2Score','L3Score','L4Score'),by_name=TRUE); # combine scores into 1 list
vars <- list();
for (i in 1:20) { # calculate variance for each participant
temp <- unlist(scores_list[i]);
var <- var(temp,na.rm=TRUE);
vars <- append(vars, var)
};
data_pilot4.1_BLP$lang_var <- vars;
# multilingual balance: entropy
entropies <- list();
for (i in 1:20) { # calculate entropy for each participant
temp <- unlist(scores_list[i]);
entropy <- Entropy(table(temp,useNA = "no"))
entropies <- append(entropies, entropy)
};
data_pilot4.1_BLP$lang_ent <- entropies;
View(data_pilot4.1_BLP)
test <- c(1,2,3,4)
Entropy(test)
# plot language scores per participant
data_pilot4.1_BLP$temp_sbjID <- c(1:20) # necessary: R doesn't like format of Prolific IDs
# multilingual balance: variance
library(toolbox);
scores_list <- combineCols(data_pilot4.1_BLP, cols=c('L1Score','L2Score','L3Score','L4Score'),by_name=TRUE); # combine scores into 1 list
vars <- list();
for (i in 1:20) { # calculate variance for each participant
temp <- unlist(scores_list[i]);
var <- var(temp,na.rm=TRUE);
vars <- append(vars, var)
};
data_pilot4.1_BLP$lang_var <- vars;
# multilingual balance: entropy
entropies <- list();
test <- c(1,2,3,4)
Entropy(test)
library(DescTools);
for (i in 1:20) { # calculate entropy for each participant
temp <- unlist(scores_list[i]);
entropy <- Entropy(table(temp,useNA = "no"))
entropies <- append(entropies, entropy)
};
data_pilot4.1_BLP$lang_ent <- entropies;
# corr of variance & entropy
cor(data_pilot4.1_BLP$lang_var,data_pilot4.1_BLP$lang_ent)
typeof(data_pilot4.1_BLP$lang_var)
data_pilot4.1_BLP$lang_var
typeof(data_pilot4.1_BLP$lang_ent)
typeof(data_pilot4.1_BLP$temp_sbjID)
as.double(data_pilot4.1_BLP$lang_var);
as.double(data_pilot4.1_BLP$lang_ent);
# corr of variance & entropy
cor(data_pilot4.1_BLP$lang_var,data_pilot4.1_BLP$lang_ent,method="pearson");
as.numeric(data_pilot4.1_BLP$lang_var);
as.numeric(data_pilot4.1_BLP$lang_ent);
# corr of variance & entropy
cor(data_pilot4.1_BLP$lang_var,data_pilot4.1_BLP$lang_ent,method="pearson");
typeof(data_pilot4.1_BLP$lang_var)
# corr of variance & entropy
cor(unlist(data_pilot4.1_BLP$lang_var),data_pilot4.1_BLP$lang_ent,method="pearson");
# corr of variance & entropy
cor(unlist(data_pilot4.1_BLP$lang_var),unlist(data_pilot4.1_BLP$lang_ent),method="pearson");
