# 2M - correct rejections only
data_testing_2M_rejs_means <- aggregate(data_testing$correct[data_testing$testing_condition=='2M'&data_testing$expected=='1'], list(data_testing$sbj_ID[data_testing$testing_condition=='2M'&data_testing$expected=='1']), FUN=mean, na.rm=TRUE);
colnames(data_testing_2M_rejs_means)[colnames(data_testing_2M_rejs_means)=="Group.1"]="sbj_ID";
colnames(data_testing_2M_rejs_means)[colnames(data_testing_2M_rejs_means)=="x"]="x_2_rejs";
# Familiarity -------------------------------------------------------------
data_all_familiarity <- read.csv("familiarity_preprocessed_clean.csv",header=T,sep=",");
data_all_familiarity <- subset(data_all_familiarity, select = -c(X)) # remove redundant column added by Pavlovia
data_familiarity <- data_all_familiarity[data_all_familiarity$sbj_ID %in% participants,]; # n = 196 participants
data_familiarity <- data_familiarity[!data_familiarity$sbj_ID %in% c('615b41767003d4ece749ed9d', '5e8b66490d48450346bf2755','615b042301e3a24311563ee4'),] # same participants excluded as for testing
# make some variables factors
data_familiarity$sbj_ID <- as.factor(data_familiarity$sbj_ID);
data_familiarity$task <- as.factor(data_familiarity$task);
data_familiarity$correct <- as.logical(data_familiarity$correct);
data_familiarity$target <- as.factor(data_familiarity$target);
data_familiarity$confound <- as.factor(data_familiarity$confound);
# familiarity accuracy boxplot
data_familiarity_means <- aggregate(data_familiarity$correct, list(data_familiarity$sbj_ID), FUN=mean);
colnames(data_familiarity_means)[colnames(data_familiarity_means)=="Group.1"]="sbj_ID";
# BLP ---------------------------------------------------------------------
data_all_BLP <- read.csv("BLP_preprocessed.csv",header=T,sep=",");
data_all_BLP <- subset(data_all_BLP, select = -c(X)) # remove redundant column added by Pavlovia
data_BLP <- data_all_BLP[data_all_BLP$sbj_ID %in% participants,]; # n = 196 participants
data_BLP <- data_BLP[!data_BLP$sbj_ID %in% c('615b41767003d4ece749ed9d','5e8b66490d48450346bf2755','615b042301e3a24311563ee4'),] # same participants excluded as for testing
data_BLP <- subset(data_BLP, select = -c(AoAgioL1, AoAgioL2, AoAgioL3, AoAgioL4, anniInstrL1, anniInstrL2, anniInstrL3, anniInstrL4, anniPaeseL1, anniPaeseL2, anniPaeseL3, anniPaeseL4, anniFamigliaL1, anniFamigliaL2, anniFamigliaL3, anniFamigliaL4, anniLavoroL1, anniLavoroL2, anniLavoroL3, anniLavoroL4, PercAmiciL1, PercAmiciL2, PercAmiciL3, PercAmiciL4, PercFamigliaL1, PercFamigliaL2, PercFamigliaL3, PercFamigliaL4, PercLavoroL1, PercLavoroL2, PercLavoroL3, PercLavoroL4, PercStessoL1, PercStessoL2, PercStessoL3, PercStessoL4, PercCalcoliL1, PercCalcoliL2, PercCalcoliL3, PercCalcoliL4, ProfParlaL1, ProfParlaL2, ProfParlaL3, ProfParlaL4, ProfCapisceL1, ProfCapisceL2, ProfCapisceL3, ProfCapisceL4, ProfLeggeL1, ProfLeggeL2, ProfLeggeL3, ProfLeggeL4, ProfScriveL1, ProfScriveL2, ProfScriveL3, ProfScriveL4, AttMiStessoL1, AttMiStessoL2, AttMiStessoL3, AttMiStessoL4, AttCulturaL1, AttCulturaL2, AttCulturaL3, AttCulturaL4, AttLivNativoL1, AttLivNativoL2, AttLivNativoL3, AttLivNativoL4, AttMadrelinguaL1, AttMadrelinguaL2, AttMadrelinguaL3, AttMadrelinguaL4));
# standardise language responses
data_BLP[data_BLP == "polish"|data_BLP == "POLISH"] <- "Polish";
data_BLP[data_BLP == "portuguese"|data_BLP == "Portugal"] <- "Portuguese";
data_BLP[data_BLP == "italian"] <- "Italian";
data_BLP[data_BLP == "spanish"] <- "Spanish";
data_BLP[data_BLP == "greek"|data_BLP=="Greece"] <- "Greek";
data_BLP[data_BLP == "french"|data_BLP=="fRANCH"] <- "French";
data_BLP[data_BLP == "arabic"] <- "Arabic";
data_BLP[data_BLP == "ENGLISH"|data_BLP == "english"|data_BLP=="english "|data_BLP == "englis"|data_BLP == "eanglish"|data_BLP == "Enlish"] <- "English";
data_BLP[data_BLP == "xhosa"|data_BLP=="XHOSA"] <- "Xhosa";
data_BLP[data_BLP == "tshivenda"] <- "Tshivenda";
data_BLP[data_BLP == "SETSWANA"] <- "Setswana";
data_BLP[data_BLP == "zulu"] <- "Zulu";
data_BLP[data_BLP == "TSWANA"] <- "Tswana";
data_BLP[data_BLP == "sotho"] <- "Sotho";
data_BLP[data_BLP == "SHONA"] <- "Shona";
data_BLP[data_BLP == "hungarian"] <- "Hungarian";
data_BLP[data_BLP == "afrikaans"|data_BLP=="AFRIKAANS"] <- "Afrikaans";
data_BLP[data_BLP == "german"|data_BLP=="GERMAN"|data_BLP=="germany"|data_BLP=="Deustch"] <- "German";
data_BLP[data_BLP == "sweedish"] <- "Swedish";
data_BLP[data_BLP == "Deutch"] <- "Dutch"; # probably - maybe Deutsch?
data_BLP[data_BLP == "SESOTHO"] <- "Sesotho";
data_BLP[data_BLP == "RUSSIAN"|data_BLP=="russian"] <- "Russian";
data_BLP[data_BLP == "tswana"] <- "Tswana";
data_BLP[data_BLP == "SEPEDI"|data_BLP=="sepedi"] <- "Sepedi";
data_BLP[data_BLP == "XItsonga"] <- "Xitsonga";
data_BLP[data_BLP == "N/A"] <- "n/a";
# correcting some participants' demographic information - correction based off of Prolific's information
data_BLP["Age"][data_BLP["sbj_ID"] == "5aa787c66219a30001c765f8"] <- "24";
data_BLP["Gender"][data_BLP["sbj_ID"] == "5aa787c66219a30001c765f8"] <- "Man";
data_BLP["Gender"][data_BLP["sbj_ID"] == "5bcd11401662020001fe82c1"] <- "Man";
data_BLP["Gender"][data_BLP["sbj_ID"] == "5e3ff59bf2160b23942ada93"] <- "Man";
data_BLP["Age"][data_BLP["sbj_ID"] == "5e577e79ce30ae13226e61ae"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "5e8c57d9b4483e012006e7aa"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5ecbb4c00bc62403dae2df59"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5ee942381a22491bbb7170f8"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5f219602670e5a0af2cf5237"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5f47e34858dd331165bf9f00"] <- "21";
data_BLP["Gender"][data_BLP["sbj_ID"] == "5f5a713d37f71112463ab4d9"] <- "Woman";
data_BLP["Age"][data_BLP["sbj_ID"] == "5f99cee5a2a7d109a1624e10"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5fa4725a186c050edc3bcc20"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "5fc2d2d79da439201ab6addc"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "5fc44d83862e3e79b02e0438"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "5fd9c5c67fa7c74ec42bb318"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "6065d7d47409810344f7e6bb"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "60883a7e91c0be66dbb96fc8"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "608c2e566d92c2aa3543e2d2"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "60e3b18d3d4205b4c52ada56"] <- "24";
data_BLP["Gender"][data_BLP["sbj_ID"] == "60e9ea97d19e613e60a994da"] <- "Man";
data_BLP["Age"][data_BLP["sbj_ID"] == "611eafa6011b0423f7d7230f"] <- "20";
data_BLP["Age"][data_BLP["sbj_ID"] == "612a98181f4b6d1cf01f926c"] <- "21";
data_BLP["Age"][data_BLP["sbj_ID"] == "61301fcb49db2f170cb02b93"] <- "25";
data_BLP["Age"][data_BLP["sbj_ID"] == "6156b68cc77b48d6693b361c"] <- "21";
data_BLP["Age"][data_BLP["sbj_ID"] == "616891e25a026e1f7262116c"] <- "22";
data_BLP["Gender"][data_BLP["sbj_ID"] == "616eb493bb7e4ab4fa1de8d4"] <- "Woman";
data_BLP["Age"][data_BLP["sbj_ID"] == "6171d922c871ba795b6a4827"] <- "23";
# make some variables factors
data_BLP$task <- as.factor(data_BLP$task)
data_BLP$sbj_ID <- as.factor(data_BLP$sbj_ID);
data_BLP$Age <- as.numeric(data_BLP$Age);
data_BLP$Gender <- as.factor(data_BLP$Gender);
data_BLP$Education <- as.factor(data_BLP$Education);
data_BLP$L1 <- as.factor(data_BLP$L1);
data_BLP$L2 <- as.factor(data_BLP$L2);
data_BLP$L3 <- as.factor(data_BLP$L3);
data_BLP$L4 <- as.factor(data_BLP$L4);
data_BLP$otherLs <- as.factor(data_BLP$otherLs);
data_BLP$AttentionL1 <- as.factor(data_BLP$AttentionL1);
data_BLP$AttentionL2 <- as.factor(data_BLP$AttentionL2);
data_BLP$AttentionL3 <- as.factor(data_BLP$AttentionL3);
data_BLP$AttentionL4 <- as.factor(data_BLP$AttentionL4);
summary(data_BLP);
library(toolbox);
scores_list <- combineCols(data_BLP, cols=c('L1Score','L2Score','L3Score','L4Score'),by_name=TRUE); # combine scores into 1 list
data_BLP$temp_sbjID <- c(1:193); # necessary: R doesn't like format of Prolific IDs
# multilingual balance: variance
vars <- list();
for (i in 1:193) { # calculate variance for each participant
temp <- unlist(scores_list[i]);
var <- var(temp,na.rm=TRUE);
vars <- append(vars, var)
};
data_BLP$lang_var <- vars;
data_BLP$lang_var <- as.numeric(data_BLP$lang_var);
# multilingual balance: entropy
entropies <- list();
library(DescTools);
for (i in 1:193) { # calculate entropy for each participant
temp <- unlist(scores_list[i]);
entropy <- Entropy(temp,na.rm=TRUE);
entropies <- append(entropies, entropy)
};
data_BLP$lang_ent <- entropies;
data_BLP$lang_ent <- as.numeric(data_BLP$lang_ent);
# multilingual experience: summing all language scores
data_BLP["L2Score"][is.na(data_BLP["L2Score"])] <- 0;
data_BLP["L3Score"][is.na(data_BLP["L3Score"])] <- 0;
data_BLP["L4Score"][is.na(data_BLP["L4Score"])] <- 0;
data_BLP$multi_exp <- data_BLP$L1Score + data_BLP$L2Score + data_BLP$L3Score + data_BLP$L4Score;
# L1 - L2 score
data_BLP$L1_L2_diff <- data_BLP$L1Score - data_BLP$L2Score;
# CLUSTERING #
complete_cases <- complete.cases(data_BLP)
data_filtered <- data_BLP[complete_cases, ]
#without language dominance scores
pca_varimax2 <- psych::principal(data_BLP[,19:34], nfactors=16, rotate='varimax');
data_BLP <- cbind(data_BLP, pca_varimax2$scores[,c('RC1','RC9','RC2','RC6')]);
names(data_BLP)[116:119] <- c('RC1_L3','RC9_L4','RC2_use_L1vsL2','RC6_use_L4');
# adding testing scores and BLP metrics together
library(tidyverse);
data_BLP_extracted_all <- subset(data_BLP, select=c(sbj_ID,HistoryL1Score,HistoryL2Score,HistoryL3Score,HistoryL4Score,UseL1Score,UseL2Score,UseL3Score,UseL4Score,ProficiencyL1Score,ProficiencyL2Score,ProficiencyL3Score,ProficiencyL4Score,AttitudeL1Score,AttitudeL2Score,AttitudeL3Score,AttitudeL4Score,L1Score,L2Score,L3Score,L4Score,lang_var,lang_ent,multi_exp,L1_L2_diff,RC1_L3,RC9_L4,RC2_use_L1vsL2,RC6_use_L4));
data_BLP_testing_all <- list(data_testing_2M_means,data_testing_2M_hits_means,data_testing_2M_rejs_means,data_BLP_extracted_all) %>% reduce(inner_join, by='sbj_ID');
######################
# DENSITY CLUSTERING #
######################
library(viridis);
density_peak_clustering <- function(scores,
sbjId, #these are the "objects"
dimensions, #this would be the item in a psychological experiment
threshold=.2
)
{
#this just checks that the scores are numbers
if (!is.numeric(scores)) stop('The score vector should be numeric');
#this arranges the input data into a dataframe, in the wide format cause that's what the function 'dist', which we'll use below, needs
temp <- data.frame(dimension=dimensions, sbjId=sbjId, score=scores);
tempWide <- reshape(temp, timevar="dimension", idvar="sbjId", direction="wide");
#this method doesn't handle well missing data, so here I substitute them with the mean for that dimension
for (j in 2:ncol(tempWide))
{
tempWide[,j][is.na(tempWide[,j])] <- rep(mean(tempWide[,j], na.rm=T), length(tempWide[,j][is.na(tempWide[,j])]));
};
#this prepares the core data frame:
density_peaks <- data.frame(subject=tempWide$sbjId, ro=rep(0,length(tempWide$sbjId)), delta=rep(0,length(tempWide$sbjId)), cluster=rep(0,length(tempWide$sbjId)));
#this computes the distance between points
distances <- as.matrix(dist(tempWide[,2:ncol(tempWide)]));
rownames(distances) <- tempWide$sbjId;
colnames(distances) <- tempWide$sbjId;
#this computes the density for each point, ro in R&L2014 terminology
temp <- ifelse(distances > threshold*median(distances, na.rm=T), 0, 1); #here we take the median of the distance distribution as a reference point, but the method should be robust with respect to this arbitrary choice
density_peaks$ro <- rowSums(temp, na.rm=T);
#this computes the distance to the closest, higher-density point
for(j in 1:nrow(density_peaks)) density_peaks$delta[j] <- min(distances[j,which(density_peaks$ro>density_peaks$ro[j])]);
#delta is 'Inf' by definition for the highest-density point, so we change it with max(delta)
density_peaks$delta[density_peaks$ro==max(density_peaks$ro)] <- max(density_peaks$delta[density_peaks$delta!=Inf], na.rm=T);
#plot the decision plot
with(density_peaks, plot(jitter(ro,2), jitter(delta,2), type="n", axes=F, xlab='Number of relative neighbours (ro)', ylab='Minimal distance to higher density point (delta)'));
axis(1);
axis(2);
with(density_peaks, text(jitter(ro,2), jitter(delta,2), as.character(subject)));
#ask the user to identify the cluster centres
print("Pick up your cluster centres. Press ENTER when done.");
scan(what="character") ->> centres;
#assign the cluster centres their cluster ID
clusterCounter <- 1;
for (j in 1:length(centres))
{
density_peaks$cluster[density_peaks$subject==centres[j]] <- clusterCounter;
clusterCounter <- clusterCounter+1;
};
#assign all the other points their cluster ID
unassignedPoints <- which(density_peaks$cluster==0);
unassignedPoints <- unassignedPoints[order(density_peaks$ro[unassignedPoints], decreasing=T)]; #here I order the unassigned points based on their density. This eliminates the risk that points are passed through the cluster assignment algorithm when its neighbours are still all unassigned themselves.
for (j in unassignedPoints)
{
nearestHigherDensityNeighbour <- which(distances[j,] == min(distances[j,which(density_peaks$ro>density_peaks$ro[j])]));
density_peaks[j,'cluster'] <- density_peaks[nearestHigherDensityNeighbour,'cluster'];
}
#this plots the points, color-coded by cluster, in a compressed, 2D space (via Multidimensional scaling)
temp <- cmdscale(distances, k=2);
plot(temp[,1], temp[,2], bty='n', xlab='(Multidimensional scaling)', ylab='', main='', type='n');
cluster_colors <- viridis(length(centres));
for (j in 1:length(centres)) text(temp[density_peaks$cluster==j,1], temp[density_peaks$cluster==j,2], density_peaks$subject[density_peaks$cluster==j], col=cluster_colors[j]);
# create the dataframe with delta, ro, and sbjId
result <- data.frame(cluster = density_peaks$cluster, delta = density_peaks$delta, ro = density_peaks$ro, sbjId = density_peaks$subject)
# return the result
return(result)
}
data_BLP_clustering <- subset(data_BLP, select=c(temp_sbjID,RC1_L3,RC9_L4,RC2_use_L1vsL2,RC6_use_L4));
data_clustering <- data.frame();
sbj_ID <- as.character(data_BLP_clustering$temp_sbjID);
for (x in 1:193) {
temp_sbj_ID = sbj_ID[x]
RC1_L3 = data_BLP_clustering[x,2]
RC9_L4 = data_BLP_clustering[x,3]
RC2_use_L1vsL2 = data_BLP_clustering[x,4]
RC6_use_L4 = data_BLP_clustering[x,5]
temp <- data.frame('sbj_ID'=rep(temp_sbj_ID,4),
'scores'=c(RC1_L3,RC9_L4,RC2_use_L1vsL2,RC6_use_L4),
'dimensions'=c('RC1_L3','RC9_L4','RC2_use_L1vsL2','RC6_use_L4'))
data_clustering <- rbind(data_clustering,temp)
};
summary(data_clustering);
result <- density_peak_clustering(data_clustering$scores,data_clustering$sbj_ID,data_clustering$dimensions);
summary(data_clustering)
summary(data_BLP_clustering)
pca_varimax2
write.csv(data_BLP,file='/data_BLP.csv', row.names=TRUE)
library(readr)
write_csv(data_BLP, "/data_BLP.csv")
write_csv(data_BLP, "C:/Users/annal/OneDrive/Documents/GitHub/affixproject/data_BLP.csv")
new_cluster1 <- list('2','3','4','5','6','7','8','10','12','13','14','15','16','19','20','21','22','23','24','25','27','28','29','31','32','33','35','36','38','39','41','43','44','45','46','47','48','49','50',
'51','52','53','55','56','57','58','59','60','61','63','64','66','67','68','69','72','73','74','75','76','77','78','79','81','82','83','84','87','88','89','94','95','100',
'101','102','106','107','108','110','113','114','115','117','118','120','124','125','127','128','131','132','134','135','138','141','142','143','144','145','146','148','149','150',
'153','155','156','157','158','159','160','161','162','163','165','166','167','170','171','174','176','177','179','182','183','185','187','188','189','191');
new_cluster2 <- list('11','26','34','37','42','54','62','65','92','98','105','116','123','130','136','137','139','147','169','173','175','178','190');
new_cluster3 <- list('1','9','17','18','30','40','70','71','80','86','90','96','97','99','103','111','112','126','133','152','154','186','192','193');
new_cluster4 <- list('85','93','104','109','121','122','129','140','151','172','180','181');
new_cluster5 <- list('91','119','164','168','184');
cluster1 <- data_BLP[data_BLP$temp_sbjID %in% new_cluster1,];
cluster2 <- data_BLP[data_BLP$temp_sbjID %in% new_cluster2,];
cluster3 <- data_BLP[data_BLP$temp_sbjID %in% new_cluster3,];
cluster4 <- data_BLP[data_BLP$temp_sbjID %in% new_cluster4,];
cluster5 <- data_BLP[data_BLP$temp_sbjID %in% new_cluster5,];
summary(cluster1)
summary(cluster2)
summary(cluster3$task)
summary(cluster4$task)
summary(cluster5$task)
colnames(cluster1)
cluster1 <- subset(data_BLP[data_BLP$temp_sbjID %in% new_cluster1,],select=c(temp_sbjID,HistoryL1Score,HistoryL2Score,HistoryL3Score,HistoryL4Score,UseL1Score,UseL2Score,UseL3Score,UseL4Score,ProficiencyL1Score,ProficiencyL2Score,ProficiencyL3Score,ProficiencyL4Score,AttitudeL1Score,AttitudeL2Score,AttitudeL3Score,AttitudeL4Score,L1Score,L2Score,L3Score,L4Score));
# n = 129
cluster2 <- subset(data_BLP[data_BLP$temp_sbjID %in% new_cluster2,],select=c(temp_sbjID,HistoryL1Score,HistoryL2Score,HistoryL3Score,HistoryL4Score,UseL1Score,UseL2Score,UseL3Score,UseL4Score,ProficiencyL1Score,ProficiencyL2Score,ProficiencyL3Score,ProficiencyL4Score,AttitudeL1Score,AttitudeL2Score,AttitudeL3Score,AttitudeL4Score,L1Score,L2Score,L3Score,L4Score));
# n = 23
cluster3 <- subset(data_BLP[data_BLP$temp_sbjID %in% new_cluster3,],select=c(temp_sbjID,HistoryL1Score,HistoryL2Score,HistoryL3Score,HistoryL4Score,UseL1Score,UseL2Score,UseL3Score,UseL4Score,ProficiencyL1Score,ProficiencyL2Score,ProficiencyL3Score,ProficiencyL4Score,AttitudeL1Score,AttitudeL2Score,AttitudeL3Score,AttitudeL4Score,L1Score,L2Score,L3Score,L4Score));
# n = 24
cluster4 <- subset(data_BLP[data_BLP$temp_sbjID %in% new_cluster4,],select=c(temp_sbjID,HistoryL1Score,HistoryL2Score,HistoryL3Score,HistoryL4Score,UseL1Score,UseL2Score,UseL3Score,UseL4Score,ProficiencyL1Score,ProficiencyL2Score,ProficiencyL3Score,ProficiencyL4Score,AttitudeL1Score,AttitudeL2Score,AttitudeL3Score,AttitudeL4Score,L1Score,L2Score,L3Score,L4Score));
# n = 12
cluster5 <- subset(data_BLP[data_BLP$temp_sbjID %in% new_cluster5,],select=c(temp_sbjID,HistoryL1Score,HistoryL2Score,HistoryL3Score,HistoryL4Score,UseL1Score,UseL2Score,UseL3Score,UseL4Score,ProficiencyL1Score,ProficiencyL2Score,ProficiencyL3Score,ProficiencyL4Score,AttitudeL1Score,AttitudeL2Score,AttitudeL3Score,AttitudeL4Score,L1Score,L2Score,L3Score,L4Score));
View(cluster2)
colnames(cluster1)
cluster1[2]
cluster1_means <- list();
for (x in 2:21) {
means <- aggregate(cluster1[x],list(cluster1$temp_sbjID),FUN=mean,na.rm=TRUE)
cluster1_means <- append(cluster1_means,means)
}
View(cluster1_means)
cluster1_means <- data.frame();
for (x in 2:21) {
means <- aggregate(cluster1[x],list(cluster1$temp_sbjID),FUN=mean,na.rm=TRUE)
cluster1_means <- append(cluster1_means,means)
}
cluster1_means <- data.frame(cluster1$temp_sbjID);
View(cluster1_means)
for (x in 2:21) {
means <- aggregate(cluster1[x],list(cluster1$temp_sbjID),FUN=mean,na.rm=TRUE)
cluster1_means <- append(cluster1_means,means)
}
cluster1_means <- data.frame(cluster1$temp_sbjID);
for (x in 2:21) {
means <- aggregate(cluster1[x],FUN=mean,na.rm=TRUE)
cluster1_means <- append(cluster1_means,means)
}
means <- aggregate(cluster1[1],list(cluster1$temp_sbjID),FUN=mean,na.rm=TRUE)
means
means <- aggregate(cluster1[2],list(cluster1$temp_sbjID),FUN=mean,na.rm=TRUE)
means
means
colnames(means)
View(means)
cluster1_means <- data.frame(cluster1$temp_sbjID);
for (x in 2:21) {
means <- aggregate(cluster1[x],list(cluster1$temp_sbjID),FUN=mean,na.rm=TRUE)[2]
cluster1_means <- append(cluster1_means,means)
}
View(cluster1_means)
View(means)
#getting average of scores to find dimension pulling clusters apart
cluster1_means <- data.frame(cluster1$temp_sbjID);
names(cluster1_means) <- 'temp_sbj_ID';
names(cluster1_means) <- 'temp_sbjID';
for (x in 2:21) {
means <- aggregate(cluster1[x],list(cluster1$temp_sbjID),FUN=mean,na.rm=TRUE);
cluster1_means <- merge(cluster1_means, means, by.x='temp_sbjID',by.y='temp_sbjID', all.x=T);
}
means
colnames(means)
names(cluster1_means) <- 'temp_sbjID';
for (x in 2:21) {
means <- aggregate(cluster1[x],list(cluster1$temp_sbjID),FUN=mean,na.rm=TRUE);
names(means)[1] <- 'temp_sbjID';
cluster1_means <- merge(cluster1_means, means, by.x='temp_sbjID',by.y='temp_sbjID', all.x=T);
}
View(cluster1_means)
#getting average of scores to find dimension pulling clusters apart
cluster1_means <- data.frame(cluster1$temp_sbjID);
names(cluster1_means) <- 'temp_sbjID';
for (x in 2:21) {
means <- aggregate(cluster1[x],list(cluster1$temp_sbjID),FUN=mean,na.rm=TRUE)[2];
cluster1_means$cluster1[x] <- means;
}
#getting average of scores to find dimension pulling clusters apart
cluster1_means <- data.frame();
for (x in 2:21) {
means <- aggregate(cluster1[x],list(cluster1$temp_sbjID),FUN=mean,na.rm=TRUE)[2];
cluster1_means$cluster1[x] <- means;
}
means <- aggregate(cluster1[2],list(cluster1$temp_sbjID),FUN=mean,na.rm=TRUE)[2];
cluster1[2][1]
cluster1[2,1]
means <- aggregate(cluster1[2],list(cluster1$temp_sbjID),FUN=mean,na.rm=TRUE)[2];
means
mean(cluster1[2])
summary(cluster1[2])
mean(cluster1[,2])
name(cluster1[2])
colnames[cluster1[2]]
colnames(cluster1[2])
#getting average of scores to find dimension pulling clusters apart
cluster1_means <- data.frame();
for (x in 2:21) {
mean <- mean(cluster1[,x]);
name <- colnames(cluster1[2]);
cluster1_means$name <- mean;
}
#getting average of scores to find dimension pulling clusters apart
cluster1_means <- data.frame('means','means');
for (x in 2:21) {
mean <- mean(cluster1[,x]);
name <- colnames(cluster1[2]);
cluster1_means$name <- mean;
}
View(cluster1_means)
#getting average of scores to find dimension pulling clusters apart
cluster1_means <- data.frame();
#getting average of scores to find dimension pulling clusters apart
cluster1_means <- data.frame();
#getting average of scores to find dimension pulling clusters apart
cluster1_means <- data.frame('means');
for (x in 2:21) {
mean <- mean(cluster1[,x]);
cluster1_means$name <- mean;
}
#getting average of scores to find dimension pulling clusters apart
cluster1_means <- data.frame();
for (x in 2:21) {
mean <- mean(cluster1[,x]);
cluster1_means[name] <- mean;
}
#getting average of scores to find dimension pulling clusters apart
cluster1_means <- data.frame();
for (x in 2:21) {
name <- colnames(cluster1)[x];
mean <- mean(cluster1[,x]);
cluster1_means[name] <- mean;
}
#getting average of scores to find dimension pulling clusters apart
cluster1_means <- data.frame('mean');
for (x in 2:21) {
name <- colnames(cluster1)[x];
mean <- mean(cluster1[,x]);
cluster1_means[name] <- mean;
}
View(cluster1_means)
#getting average of scores to find dimension pulling clusters apart
cluster1_means <- data.frame('cluster1');
for (x in 2:21) {
name <- colnames(cluster1)[x];
mean <- mean(cluster1[,x]);
cluster1_means[name] <- mean;
}
#getting average of scores to find dimension pulling clusters apart
cluster1_means <- data.frame('cluster_id':'1');
#getting average of scores to find dimension pulling clusters apart
cluster1_means <- data.frame(c('cluster_id','1'));
for (x in 2:21) {
name <- colnames(cluster1)[x];
mean <- mean(cluster1[,x]);
cluster1_means[name] <- mean;
}
#getting average of scores to find dimension pulling clusters apart
cluster1_means <- data.frame(c('cluster_id','1'));
cluster1_means <- data.frame('cluster_id'='1');
for (x in 2:21) {
name <- colnames(cluster1)[x];
mean <- mean(cluster1[,x]);
cluster1_means[name] <- mean;
}
cluster2_means <- data.frame('cluster_id'='2');
for (x in 2:21) {
name <- colnames(cluster2)[x];
mean <- mean(cluster2[,x]);
cluster2_means[name] <- mean;
};
cluster3_means <- data.frame('cluster_id'='3');
for (x in 2:21) {
name <- colnames(cluster3)[x];
mean <- mean(cluster3[,x]);
cluster3_means[name] <- mean;
};
cluster4_means <- data.frame('cluster_id'='4');
for (x in 2:21) {
name <- colnames(cluster4)[x];
mean <- mean(cluster4[,x]);
cluster4_means[name] <- mean;
};
cluster5_means <- data.frame('cluster_id'='5');
for (x in 2:21) {
name <- colnames(cluster5)[x];
mean <- mean(cluster5[,x]);
cluster5_means[name] <- mean;
};
View(cluster2_means)
View(cluster3_means)
View(cluster4_means)
View(cluster5_means)
cluster_means <- rbind(cluster1_means, cluster2_means, cluster3_means, cluster4_means, cluster5_means);
View(cluster_means)
summary(cluster_means)
#plot
plot(cluster_means);
#plot
plot(cluster_means);
#plot
plot(cluster_means$HistoryL1Score);
#plot
plot(cluster_means[2],ylim=c(0,55));
for (x in 3:17) {
points(cluster_means[x])
}
#plot
plot(cluster_means[2],ylim=c(0,55));
for (x in 3:17) {
points(cluster_means[x])
}
#plot
plot(cluster_means[2],ylim=c(0,55));
#plot
plot(cluster_means[2]);
cluster_means <- rbind(cluster1_means, cluster2_means, cluster3_means, cluster4_means, cluster5_means);
#plot
plot(cluster_means[2]);
#plot
plot(cluster_means[2]);
#plot
plot(cluster_means[,2]);
#plot
plot(cluster_means[,2],pch=19);
#plot
plot(cluster_means[,2],pch=19,col=cols[1]);
cols
cols2
# plot language scores per participant
#by temp_sbjID
library(paletteer);
cols2 <- paletteer_d("ggthemes::Classic_20");
plot(cluster_means[,2],pch=19,col=cols2[1]);
for (x in 3:17) {
points(cluster_means[,x],pch=19,col=cols2[x-1])
}
plot(cluster_means[,2],pch=19,col=cols2[1]);
points(cluster_means[,3],pch=19,col=cols2[2]);
cluster_means[,3]
plot(cluster_means[,2],ylim=c(0,55),pch=19,col=cols2[1]);
for (x in 3:17) {
points(cluster_means[,x],pch=19,col=cols2[x-1])
}
plot(cluster_means[,2],ylim=c(0,55),type="b",pch=19,col=cols2[1]);
for (x in 3:17) {
points(cluster_means[,x],type="b",pch=19,col=cols2[x-1])
}
plot(cluster_means[,2],ylim=c(0,55),type="b",pch=19,col=cols2[1],ylab="Score means",xlab="Cluster");
for (x in 3:17) {
points(cluster_means[,x],type="b",pch=19,col=cols2[x-1])
}
legend("right",title="Score:",c("HistL1","HistL2","HistL3","HistL4","UseL1","UseL2","UseL3","UseL4","ProfL1","ProfL2","ProfL3","ProfL4","AttL1","AttL2","AttL3","AttL4",),
fill=c(cols2[1],cols2[2],cols2[3],cols2[4],cols2[5],cols2[6],cols2[7],cols2[8],cols2[9],cols2[10],cols2[11],cols2[12],cols2[13],cols2[14],cols2[15],cols2[16]),bty = "n",
cex=1,y.intersp=0.5);
legend("right",title="Score:",c("HistL1","HistL2","HistL3","HistL4","UseL1","UseL2","UseL3","UseL4","ProfL1","ProfL2","ProfL3","ProfL4","AttL1","AttL2","AttL3","AttL4"),
fill=c(cols2[1],cols2[2],cols2[3],cols2[4],cols2[5],cols2[6],cols2[7],cols2[8],cols2[9],cols2[10],cols2[11],cols2[12],cols2[13],cols2[14],cols2[15],cols2[16]),bty = "n",
cex=1,y.intersp=0.5);
plot(cluster_means[,2],ylim=c(0,55),type="b",pch=19,col=cols2[1],ylab="Score means",xlab="Cluster");
for (x in 3:17) {
points(cluster_means[,x],type="b",pch=19,col=cols2[x-1])
}
legend("right",title="Score:",c("HistL1","HistL2","HistL3","HistL4","UseL1","UseL2","UseL3","UseL4","ProfL1","ProfL2","ProfL3","ProfL4","AttL1","AttL2","AttL3","AttL4"),
fill=c(cols2[1],cols2[2],cols2[3],cols2[4],cols2[5],cols2[6],cols2[7],cols2[8],cols2[9],cols2[10],cols2[11],cols2[12],cols2[13],cols2[14],cols2[15],cols2[16]),bty = "n",
cex=1,y.intersp=0.5);
plot(cluster_means[,2],ylim=c(0,55),type="b",cex=2,pch=19,col=cols2[1],ylab="Score means",xlab="Cluster");
plot(cluster_means[,2],ylim=c(0,55),type="b",cex=2,lty=2,pch=19,col=cols2[1],ylab="Score means",xlab="Cluster");
plot(cluster_means[,2],ylim=c(0,55),type="b",cex=2,lwd=2,pch=19,col=cols2[1],ylab="Score means",xlab="Cluster");
for (x in 3:17) {
points(cluster_means[,x],type="b",cex=2,lwd=2,pch=19,col=cols2[x-1])
}
legend("right",title="Score:",c("HistL1","HistL2","HistL3","HistL4","UseL1","UseL2","UseL3","UseL4","ProfL1","ProfL2","ProfL3","ProfL4","AttL1","AttL2","AttL3","AttL4"),
fill=c(cols2[1],cols2[2],cols2[3],cols2[4],cols2[5],cols2[6],cols2[7],cols2[8],cols2[9],cols2[10],cols2[11],cols2[12],cols2[13],cols2[14],cols2[15],cols2[16]),bty = "n",
cex=1,y.intersp=0.5);
