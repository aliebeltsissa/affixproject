'dimensions'=c('lang_group','RC1_L3','RC9_L4','RC2_use_L1vsL2','RC6_use_L4'))
data_clustering <- rbind(data_clustering,temp)
};
colnames(data_BLP_clustering)
head(data_BLP_clustering)
for (x in 1:193) {
temp_sbj_ID = sbj_ID[x]
lang_group = lang_group[x]
RC1_L3 = data_BLP_clustering[x,2]
RC9_L4 = data_BLP_clustering[x,3]
RC2_use_L1vsL2 = data_BLP_clustering[x,4]
RC6_use_L4 = data_BLP_clustering[x,5]
temp <- data.frame('sbj_ID'=rep(temp_sbj_ID,4),
'scores'=c(lang_group,RC1_L3,RC9_L4,RC2_use_L1vsL2,RC6_use_L4),
'dimensions'=c('lang_group','RC1_L3','RC9_L4','RC2_use_L1vsL2','RC6_use_L4'))
data_clustering <- rbind(data_clustering,temp)
};
for (x in 1:193) {
temp_sbj_ID = sbj_ID[x]
lang_group = lang_group[x,2]
RC1_L3 = data_BLP_clustering[x,3]
RC9_L4 = data_BLP_clustering[x,4]
RC2_use_L1vsL2 = data_BLP_clustering[x,5]
RC6_use_L4 = data_BLP_clustering[x,6]
temp <- data.frame('sbj_ID'=rep(temp_sbj_ID,4),
'scores'=c(lang_group,RC1_L3,RC9_L4,RC2_use_L1vsL2,RC6_use_L4),
'dimensions'=c('lang_group','RC1_L3','RC9_L4','RC2_use_L1vsL2','RC6_use_L4'))
data_clustering <- rbind(data_clustering,temp)
};
data_BLP_clustering <- subset(data_BLP, select=c(temp_sbjID,lang_group,RC1_L3,RC9_L4,RC2_use_L1vsL2,RC6_use_L4));
data_clustering <- data.frame();
sbj_ID <- as.character(data_BLP_clustering$temp_sbjID);
for (x in 1:193) {
temp_sbj_ID = sbj_ID[x]
lang_group = lang_group[x,2]
RC1_L3 = data_BLP_clustering[x,3]
RC9_L4 = data_BLP_clustering[x,4]
RC2_use_L1vsL2 = data_BLP_clustering[x,5]
RC6_use_L4 = data_BLP_clustering[x,6]
temp <- data.frame('sbj_ID'=rep(temp_sbj_ID,4),
'scores'=c(lang_group,RC1_L3,RC9_L4,RC2_use_L1vsL2,RC6_use_L4),
'dimensions'=c('lang_group','RC1_L3','RC9_L4','RC2_use_L1vsL2','RC6_use_L4'))
data_clustering <- rbind(data_clustering,temp)
};
for (x in 1:193) {
temp_sbj_ID = sbj_ID[x]
lang_group = data_BLP_clustering[x,2]
RC1_L3 = data_BLP_clustering[x,3]
RC9_L4 = data_BLP_clustering[x,4]
RC2_use_L1vsL2 = data_BLP_clustering[x,5]
RC6_use_L4 = data_BLP_clustering[x,6]
temp <- data.frame('sbj_ID'=rep(temp_sbj_ID,4),
'scores'=c(lang_group,RC1_L3,RC9_L4,RC2_use_L1vsL2,RC6_use_L4),
'dimensions'=c('lang_group','RC1_L3','RC9_L4','RC2_use_L1vsL2','RC6_use_L4'))
data_clustering <- rbind(data_clustering,temp)
};
data_clustering <- data.frame();
for (x in 1:193) {
temp_sbj_ID = sbj_ID[x]
lang_group = data_BLP_clustering[x,2]
RC1_L3 = data_BLP_clustering[x,3]
RC9_L4 = data_BLP_clustering[x,4]
RC2_use_L1vsL2 = data_BLP_clustering[x,5]
RC6_use_L4 = data_BLP_clustering[x,6]
temp <- data.frame('sbj_ID'=rep(temp_sbj_ID,5),
'scores'=c(lang_group,RC1_L3,RC9_L4,RC2_use_L1vsL2,RC6_use_L4),
'dimensions'=c('lang_group','RC1_L3','RC9_L4','RC2_use_L1vsL2','RC6_use_L4'))
data_clustering <- rbind(data_clustering,temp)
};
summary(data_clustering);
result <- density_peak_clustering(data_clustering$scores,data_clustering$sbj_ID,data_clustering$dimensions);
density_peak_clustering <- function(scores,
sbjId, #these are the "objects"
dimensions, #this would be the item in a psychological experiment
threshold=.2
)
{
#this just checks that the scores are numbers
if (!is.numeric(scores)) stop('The score vector should be numeric');
#this arranges the input data into a dataframe, in the wide format cause that's what the function 'dist', which we'll use below, needs
temp <- data.frame(dimension=dimensions, sbjId=sbjId, score=scores);
tempWide <- reshape(temp, timevar="dimension", idvar="sbjId", direction="wide");
#this method doesn't handle well missing data, so here I substitute them with the mean for that dimension
for (j in 2:ncol(tempWide))
{
tempWide[,j][is.na(tempWide[,j])] <- rep(mean(tempWide[,j], na.rm=T), length(tempWide[,j][is.na(tempWide[,j])]));
};
#this prepares the core data frame:
density_peaks <- data.frame(subject=tempWide$sbjId, ro=rep(0,length(tempWide$sbjId)), delta=rep(0,length(tempWide$sbjId)), cluster=rep(0,length(tempWide$sbjId)));
#this computes the distance between points
distances <- as.matrix(dist(tempWide[,2:ncol(tempWide)]));
rownames(distances) <- tempWide$sbjId;
colnames(distances) <- tempWide$sbjId;
#this computes the density for each point, ro in R&L2014 terminology
temp <- ifelse(distances > threshold*median(distances, na.rm=T), 0, 1); #here we take the median of the distance distribution as a reference point, but the method should be robust with respect to this arbitrary choice
density_peaks$ro <- rowSums(temp, na.rm=T);
#this computes the distance to the closest, higher-density point
for(j in 1:nrow(density_peaks)) density_peaks$delta[j] <- min(distances[j,which(density_peaks$ro>density_peaks$ro[j])]);
#delta is 'Inf' by definition for the highest-density point, so we change it with max(delta)
density_peaks$delta[density_peaks$ro==max(density_peaks$ro)] <- max(density_peaks$delta[density_peaks$delta!=Inf], na.rm=T);
#plot the decision plot
with(density_peaks, plot(jitter(ro,20), jitter(delta,20), type="n", axes=F, xlab='Number of relative neighbours (ro)', ylab='Minimal distance to higher density point (delta)'));
axis(1);
axis(2);
with(density_peaks, text(jitter(ro,20), jitter(delta,20), as.character(subject)));
#ask the user to identify the cluster centres
print("Pick up your cluster centres. Press ENTER when done.");
scan(what="character") ->> centres;
#assign the cluster centres their cluster ID
clusterCounter <- 1;
for (j in 1:length(centres))
{
density_peaks$cluster[density_peaks$subject==centres[j]] <- clusterCounter;
clusterCounter <- clusterCounter+1;
};
#assign all the other points their cluster ID
unassignedPoints <- which(density_peaks$cluster==0);
unassignedPoints <- unassignedPoints[order(density_peaks$ro[unassignedPoints], decreasing=T)]; #here I order the unassigned points based on their density. This eliminates the risk that points are passed through the cluster assignment algorithm when its neighbours are still all unassigned themselves.
for (j in unassignedPoints)
{
nearestHigherDensityNeighbour <- which(distances[j,] == min(distances[j,which(density_peaks$ro>density_peaks$ro[j])]));
density_peaks[j,'cluster'] <- density_peaks[nearestHigherDensityNeighbour,'cluster'];
}
#this plots the points, color-coded by cluster, in a compressed, 2D space (via Multidimensional scaling)
temp <- cmdscale(distances, k=2);
plot(temp[,1], temp[,2], bty='n', xlab='(Multidimensional scaling)', ylab='', main='', type='n');
cluster_colors <- viridis(length(centres));
for (j in 1:length(centres)) text(temp[density_peaks$cluster==j,1], temp[density_peaks$cluster==j,2], density_peaks$subject[density_peaks$cluster==j], col=cluster_colors[j]);
# create the dataframe with delta, ro, and sbjId
result <- data.frame(cluster = density_peaks$cluster, delta = density_peaks$delta, ro = density_peaks$ro, sbjId = density_peaks$subject)
# return the result
return(result)
}
result <- density_peak_clustering(data_clustering$scores,data_clustering$sbj_ID,data_clustering$dimensions);
density_peak_clustering <- function(scores,
sbjId, #these are the "objects"
dimensions, #this would be the item in a psychological experiment
threshold=.2
)
{
#this just checks that the scores are numbers
if (!is.numeric(scores)) stop('The score vector should be numeric');
#this arranges the input data into a dataframe, in the wide format cause that's what the function 'dist', which we'll use below, needs
temp <- data.frame(dimension=dimensions, sbjId=sbjId, score=scores);
tempWide <- reshape(temp, timevar="dimension", idvar="sbjId", direction="wide");
#this method doesn't handle well missing data, so here I substitute them with the mean for that dimension
for (j in 2:ncol(tempWide))
{
tempWide[,j][is.na(tempWide[,j])] <- rep(mean(tempWide[,j], na.rm=T), length(tempWide[,j][is.na(tempWide[,j])]));
};
#this prepares the core data frame:
density_peaks <- data.frame(subject=tempWide$sbjId, ro=rep(0,length(tempWide$sbjId)), delta=rep(0,length(tempWide$sbjId)), cluster=rep(0,length(tempWide$sbjId)));
#this computes the distance between points
distances <- as.matrix(dist(tempWide[,2:ncol(tempWide)]));
rownames(distances) <- tempWide$sbjId;
colnames(distances) <- tempWide$sbjId;
#this computes the density for each point, ro in R&L2014 terminology
temp <- ifelse(distances > threshold*median(distances, na.rm=T), 0, 1); #here we take the median of the distance distribution as a reference point, but the method should be robust with respect to this arbitrary choice
density_peaks$ro <- rowSums(temp, na.rm=T);
#this computes the distance to the closest, higher-density point
for(j in 1:nrow(density_peaks)) density_peaks$delta[j] <- min(distances[j,which(density_peaks$ro>density_peaks$ro[j])]);
#delta is 'Inf' by definition for the highest-density point, so we change it with max(delta)
density_peaks$delta[density_peaks$ro==max(density_peaks$ro)] <- max(density_peaks$delta[density_peaks$delta!=Inf], na.rm=T);
#plot the decision plot
with(density_peaks, plot(jitter(ro,200), jitter(delta,200), type="n", axes=F, xlab='Number of relative neighbours (ro)', ylab='Minimal distance to higher density point (delta)'));
axis(1);
axis(2);
with(density_peaks, text(jitter(ro,200), jitter(delta,200), as.character(subject)));
#ask the user to identify the cluster centres
print("Pick up your cluster centres. Press ENTER when done.");
scan(what="character") ->> centres;
#assign the cluster centres their cluster ID
clusterCounter <- 1;
for (j in 1:length(centres))
{
density_peaks$cluster[density_peaks$subject==centres[j]] <- clusterCounter;
clusterCounter <- clusterCounter+1;
};
#assign all the other points their cluster ID
unassignedPoints <- which(density_peaks$cluster==0);
unassignedPoints <- unassignedPoints[order(density_peaks$ro[unassignedPoints], decreasing=T)]; #here I order the unassigned points based on their density. This eliminates the risk that points are passed through the cluster assignment algorithm when its neighbours are still all unassigned themselves.
for (j in unassignedPoints)
{
nearestHigherDensityNeighbour <- which(distances[j,] == min(distances[j,which(density_peaks$ro>density_peaks$ro[j])]));
density_peaks[j,'cluster'] <- density_peaks[nearestHigherDensityNeighbour,'cluster'];
}
#this plots the points, color-coded by cluster, in a compressed, 2D space (via Multidimensional scaling)
temp <- cmdscale(distances, k=2);
plot(temp[,1], temp[,2], bty='n', xlab='(Multidimensional scaling)', ylab='', main='', type='n');
cluster_colors <- viridis(length(centres));
for (j in 1:length(centres)) text(temp[density_peaks$cluster==j,1], temp[density_peaks$cluster==j,2], density_peaks$subject[density_peaks$cluster==j], col=cluster_colors[j]);
# create the dataframe with delta, ro, and sbjId
result <- data.frame(cluster = density_peaks$cluster, delta = density_peaks$delta, ro = density_peaks$ro, sbjId = density_peaks$subject)
# return the result
return(result)
}
result <- density_peak_clustering(data_clustering$scores,data_clustering$sbj_ID,data_clustering$dimensions);
plot(data_BLP_monos$ProficiencyL1Score)
plot(data_BLP_monos$ProficiencyL1Score,pch=19)
plot(data_BLP_monos$ProficiencyL1Score,pch=19,ylim=c(0,55))
plot(data_BLP_monos$ProficiencyL2Score,pch=19,ylim=c(0,55))
plot(data_BLP_monos$ProficiencyL3Score,pch=19,ylim=c(0,55))
plot(data_BLP_monos$ProficiencyL4Score,pch=19,ylim=c(0,55))
# proficiency plots for each language group
par(mfrow=c(2,2));
plot(data_BLP_monos$ProficiencyL1Score,pch=19,ylim=c(0,55));
plot(data_BLP_monos$ProficiencyL2Score,pch=19,ylim=c(0,55));
plot(data_BLP_monos$ProficiencyL3Score,pch=19,ylim=c(0,55));
plot(data_BLP_monos$ProficiencyL4Score,pch=19,ylim=c(0,55));
plot(data_BLP_monos$ProficiencyL1Score,pch=19,ylim=c(0,55),ylab="");
plot(data_BLP_monos$ProficiencyL2Score,pch=19,ylim=c(0,55));
plot(data_BLP_monos$ProficiencyL3Score,pch=19,ylim=c(0,55));
plot(data_BLP_monos$ProficiencyL4Score,pch=19,ylim=c(0,55));
abline(h=45.4,lty=5);
plot(data_BLP_monos$ProficiencyL1Score,pch=19,ylim=c(0,55),ylab="Monolingual L1 Proficiency");
abline(h=45.4,lty=5);
plot(data_BLP_monos$ProficiencyL2Score,pch=19,ylim=c(0,55),ylab="Monolingual L2 Proficiency");
abline(h=45.4,lty=5);
plot(data_BLP_monos$ProficiencyL3Score,pch=19,ylim=c(0,55),ylab="Monolingual L3 Proficiency");
abline(h=45.4,lty=5);
plot(data_BLP_monos$ProficiencyL4Score,pch=19,ylim=c(0,55),ylab="Monolingual L4 Proficiency");
abline(h=45.4,lty=5);
# proficiency plots for each language group
library(paletteer);
cols2 <- paletteer_d("ggthemes::Classic_20");
plot(data_BLP_monos$ProficiencyL1Score,pch=19,ylim=c(0,55),ylab="Monolingual L1 Proficiency",col=cols2[1]);
abline(h=45.4,lty=5);
plot(data_BLP_monos$ProficiencyL2Score,pch=19,ylim=c(0,55),ylab="Monolingual L2 Proficiency",col=cols2[2]);
abline(h=45.4,lty=5);
plot(data_BLP_monos$ProficiencyL3Score,pch=19,ylim=c(0,55),ylab="Monolingual L3 Proficiency",col=cols2[3]);
abline(h=45.4,lty=5);
plot(data_BLP_monos$ProficiencyL4Score,pch=19,ylim=c(0,55),ylab="Monolingual L4 Proficiency",col=cols2[4]);
abline(h=45.4,lty=5);
plot(data_BLP_monos$ProficiencyL1Score,pch=19,ylim=c(0,55),ylab="Monolingual L1 Proficiency",xlab='Participant',col=cols2[1]);
abline(h=45.4,lty=5);
plot(data_BLP_monos$ProficiencyL2Score,pch=19,ylim=c(0,55),ylab="Monolingual L2 Proficiency",xlab='Participant',col=cols2[2]);
abline(h=45.4,lty=5);
plot(data_BLP_monos$ProficiencyL3Score,pch=19,ylim=c(0,55),ylab="Monolingual L3 Proficiency",xlab='Participant',col=cols2[3]);
abline(h=45.4,lty=5);
plot(data_BLP_monos$ProficiencyL4Score,pch=19,ylim=c(0,55),ylab="Monolingual L4 Proficiency",xlab='Participant',col=cols2[4]);
abline(h=45.4,lty=5);
plot(data_BLP_bis$ProficiencyL1Score,pch=19,ylim=c(0,55),ylab="Monolingual L1 Proficiency",xlab='Participant',col=cols2[1]);
abline(h=45.4,lty=5);
plot(data_BLP_bis$ProficiencyL2Score,pch=19,ylim=c(0,55),ylab="Monolingual L2 Proficiency",xlab='Participant',col=cols2[2]);
abline(h=45.4,lty=5);
plot(data_BLP_bis$ProficiencyL3Score,pch=19,ylim=c(0,55),ylab="Monolingual L3 Proficiency",xlab='Participant',col=cols2[3]);
abline(h=45.4,lty=5);
plot(data_BLP_bis$ProficiencyL4Score,pch=19,ylim=c(0,55),ylab="Monolingual L4 Proficiency",xlab='Participant',col=cols2[4]);
abline(h=45.4,lty=5);
#trilinguals
plot(data_BLP_tris$ProficiencyL1Score,pch=19,ylim=c(0,55),ylab="Monolingual L1 Proficiency",xlab='Participant',col=cols2[1]);
plot(data_BLP_monos$ProficiencyL2Score,pch=19,ylim=c(0,55),ylab="Monolingual L2 Proficiency",xlab='Participant',col=cols2[2]);
abline(h=45.4,lty=5);
plot(data_BLP_monos$ProficiencyL3Score,pch=19,ylim=c(0,55),ylab="Monolingual L3 Proficiency",xlab='Participant',col=cols2[3]);
abline(h=45.4,lty=5);
plot(data_BLP_monos$ProficiencyL4Score,pch=19,ylim=c(0,55),ylab="Monolingual L4 Proficiency",xlab='Participant',col=cols2[4]);
abline(h=45.4,lty=5);
colnames(data_BLP_tris)
# BLP ---------------------------------------------------------------------
data_all_BLP <- read.csv("BLP_preprocessed.csv",header=T,sep=",");
data_all_BLP <- subset(data_all_BLP, select = -c(X)) # remove redundant column added by Pavlovia
data_BLP <- data_all_BLP[data_all_BLP$sbj_ID %in% participants,]; # n = 196 participants
data_BLP <- data_BLP[!data_BLP$sbj_ID %in% c('615b41767003d4ece749ed9d','5e8b66490d48450346bf2755','615b042301e3a24311563ee4'),] # same participants excluded as for testing
data_BLP <- subset(data_BLP, select = -c(AoAgioL1, AoAgioL2, AoAgioL3, AoAgioL4, anniInstrL1, anniInstrL2, anniInstrL3, anniInstrL4, anniPaeseL1, anniPaeseL2, anniPaeseL3, anniPaeseL4, anniFamigliaL1, anniFamigliaL2, anniFamigliaL3, anniFamigliaL4, anniLavoroL1, anniLavoroL2, anniLavoroL3, anniLavoroL4, PercAmiciL1, PercAmiciL2, PercAmiciL3, PercAmiciL4, PercFamigliaL1, PercFamigliaL2, PercFamigliaL3, PercFamigliaL4, PercLavoroL1, PercLavoroL2, PercLavoroL3, PercLavoroL4, PercStessoL1, PercStessoL2, PercStessoL3, PercStessoL4, PercCalcoliL1, PercCalcoliL2, PercCalcoliL3, PercCalcoliL4, ProfParlaL1, ProfParlaL2, ProfParlaL3, ProfParlaL4, ProfCapisceL1, ProfCapisceL2, ProfCapisceL3, ProfCapisceL4, ProfLeggeL1, ProfLeggeL2, ProfLeggeL3, ProfLeggeL4, ProfScriveL1, ProfScriveL2, ProfScriveL3, ProfScriveL4, AttMiStessoL1, AttMiStessoL2, AttMiStessoL3, AttMiStessoL4, AttCulturaL1, AttCulturaL2, AttCulturaL3, AttCulturaL4, AttLivNativoL1, AttLivNativoL2, AttLivNativoL3, AttLivNativoL4, AttMadrelinguaL1, AttMadrelinguaL2, AttMadrelinguaL3, AttMadrelinguaL4));
# standardise language responses
data_BLP[data_BLP == "polish"|data_BLP == "POLISH"] <- "Polish";
data_BLP[data_BLP == "portuguese"|data_BLP == "Portugal"] <- "Portuguese";
data_BLP[data_BLP == "italian"] <- "Italian";
data_BLP[data_BLP == "spanish"] <- "Spanish";
data_BLP[data_BLP == "greek"|data_BLP=="Greece"] <- "Greek";
data_BLP[data_BLP == "french"|data_BLP=="fRANCH"] <- "French";
data_BLP[data_BLP == "arabic"] <- "Arabic";
data_BLP[data_BLP == "ENGLISH"|data_BLP == "english"|data_BLP=="english "|data_BLP == "englis"|data_BLP == "eanglish"|data_BLP == "Enlish"] <- "English";
data_BLP[data_BLP == "xhosa"|data_BLP=="XHOSA"] <- "Xhosa";
data_BLP[data_BLP == "tshivenda"] <- "Tshivenda";
data_BLP[data_BLP == "SETSWANA"] <- "Setswana";
data_BLP[data_BLP == "zulu"] <- "Zulu";
data_BLP[data_BLP == "TSWANA"] <- "Tswana";
data_BLP[data_BLP == "sotho"] <- "Sotho";
data_BLP[data_BLP == "SHONA"] <- "Shona";
data_BLP[data_BLP == "hungarian"] <- "Hungarian";
data_BLP[data_BLP == "afrikaans"|data_BLP=="AFRIKAANS"] <- "Afrikaans";
data_BLP[data_BLP == "german"|data_BLP=="GERMAN"|data_BLP=="germany"|data_BLP=="Deustch"] <- "German";
data_BLP[data_BLP == "sweedish"] <- "Swedish";
data_BLP[data_BLP == "Deutch"] <- "Dutch"; # probably - maybe Deutsch?
data_BLP[data_BLP == "SESOTHO"] <- "Sesotho";
data_BLP[data_BLP == "RUSSIAN"|data_BLP=="russian"] <- "Russian";
data_BLP[data_BLP == "tswana"] <- "Tswana";
data_BLP[data_BLP == "SEPEDI"|data_BLP=="sepedi"] <- "Sepedi";
data_BLP[data_BLP == "XItsonga"] <- "Xitsonga";
data_BLP[data_BLP == "N/A"] <- "n/a";
# correcting some participants' demographic information - correction based off of Prolific's information
data_BLP["Age"][data_BLP["sbj_ID"] == "5aa787c66219a30001c765f8"] <- "24";
data_BLP["Gender"][data_BLP["sbj_ID"] == "5aa787c66219a30001c765f8"] <- "Man";
data_BLP["Gender"][data_BLP["sbj_ID"] == "5bcd11401662020001fe82c1"] <- "Man";
data_BLP["Gender"][data_BLP["sbj_ID"] == "5e3ff59bf2160b23942ada93"] <- "Man";
data_BLP["Age"][data_BLP["sbj_ID"] == "5e577e79ce30ae13226e61ae"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "5e8c57d9b4483e012006e7aa"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5ecbb4c00bc62403dae2df59"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5ee942381a22491bbb7170f8"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5f219602670e5a0af2cf5237"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5f47e34858dd331165bf9f00"] <- "21";
data_BLP["Gender"][data_BLP["sbj_ID"] == "5f5a713d37f71112463ab4d9"] <- "Woman";
data_BLP["Age"][data_BLP["sbj_ID"] == "5f99cee5a2a7d109a1624e10"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5fa4725a186c050edc3bcc20"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "5fc2d2d79da439201ab6addc"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "5fc44d83862e3e79b02e0438"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "5fd9c5c67fa7c74ec42bb318"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "6065d7d47409810344f7e6bb"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "60883a7e91c0be66dbb96fc8"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "608c2e566d92c2aa3543e2d2"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "60e3b18d3d4205b4c52ada56"] <- "24";
data_BLP["Gender"][data_BLP["sbj_ID"] == "60e9ea97d19e613e60a994da"] <- "Man";
data_BLP["Age"][data_BLP["sbj_ID"] == "611eafa6011b0423f7d7230f"] <- "20";
data_BLP["Age"][data_BLP["sbj_ID"] == "612a98181f4b6d1cf01f926c"] <- "21";
data_BLP["Age"][data_BLP["sbj_ID"] == "61301fcb49db2f170cb02b93"] <- "25";
data_BLP["Age"][data_BLP["sbj_ID"] == "6156b68cc77b48d6693b361c"] <- "21";
data_BLP["Age"][data_BLP["sbj_ID"] == "616891e25a026e1f7262116c"] <- "22";
data_BLP["Gender"][data_BLP["sbj_ID"] == "616eb493bb7e4ab4fa1de8d4"] <- "Woman";
data_BLP["Age"][data_BLP["sbj_ID"] == "6171d922c871ba795b6a4827"] <- "23";
# make some variables factors
data_BLP$task <- as.factor(data_BLP$task)
data_BLP$sbj_ID <- as.factor(data_BLP$sbj_ID);
data_BLP$Age <- as.numeric(data_BLP$Age);
data_BLP$Gender <- as.factor(data_BLP$Gender);
data_BLP$Education <- as.factor(data_BLP$Education);
data_BLP$L1 <- as.factor(data_BLP$L1);
data_BLP$L2 <- as.factor(data_BLP$L2);
data_BLP$L3 <- as.factor(data_BLP$L3);
data_BLP$L4 <- as.factor(data_BLP$L4);
data_BLP$otherLs <- as.factor(data_BLP$otherLs);
data_BLP$AttentionL1 <- as.factor(data_BLP$AttentionL1);
data_BLP$AttentionL2 <- as.factor(data_BLP$AttentionL2);
data_BLP$AttentionL3 <- as.factor(data_BLP$AttentionL3);
data_BLP$AttentionL4 <- as.factor(data_BLP$AttentionL4);
library(toolbox);
scores_list <- combineCols(data_BLP, cols=c('L1Score','L2Score','L3Score','L4Score'),by_name=TRUE); # combine scores into 1 list
data_BLP$temp_sbjID <- c(1:193); # necessary: R doesn't like format of Prolific IDs
# multilingual balance: variance
vars <- list();
for (i in 1:193) { # calculate variance for each participant
temp <- unlist(scores_list[i]);
var <- var(temp,na.rm=TRUE);
vars <- append(vars, var)
};
data_BLP$lang_var <- vars;
data_BLP$lang_var <- as.numeric(data_BLP$lang_var);
# multilingual balance: entropy
entropies <- list();
library(DescTools);
for (i in 1:193) { # calculate entropy for each participant
temp <- unlist(scores_list[i]);
entropy <- Entropy(temp,na.rm=TRUE);
entropies <- append(entropies, entropy)
};
data_BLP$lang_ent <- entropies;
data_BLP$lang_ent <- as.numeric(data_BLP$lang_ent);
# multilingual experience: summing all language scores
data_BLP["L2Score"][is.na(data_BLP["L2Score"])] <- 0;
data_BLP["L3Score"][is.na(data_BLP["L3Score"])] <- 0;
data_BLP["L4Score"][is.na(data_BLP["L4Score"])] <- 0;
data_BLP$multi_exp <- data_BLP$L1Score + data_BLP$L2Score + data_BLP$L3Score + data_BLP$L4Score;
# L1 - L2 score
data_BLP$L1_L2_diff <- data_BLP$L1Score - data_BLP$L2Score;
# determining language groups by proficiency
#chose to set 5/6 as lower boundary for fluency -> so a minimum score of 45.8
data_BLP$langfilter1 <- TRUE;
data_BLP$langfilter1[data_BLP$ProficiencyL1Score<45.4] <- FALSE;
data_BLP$langfilter2 <- TRUE;
data_BLP$langfilter2[data_BLP$ProficiencyL2Score<45.4] <- FALSE;
data_BLP$langfilter3 <- TRUE;
data_BLP$langfilter3[data_BLP$ProficiencyL3Score<45.4] <- FALSE;
data_BLP$langfilter4 <- TRUE;
data_BLP$langfilter4[data_BLP$ProficiencyL4Score<45.4] <- FALSE;
#if they're only fluent in one language, they're a monolingual
data_BLP$lang_group <- 'mono';
#if they're fluent in two languages, they're a bilingual
data_BLP$lang_group[data_BLP$langfilter1+data_BLP$langfilter2+data_BLP$langfilter3+data_BLP$langfilter4==2] <- 'bi';
#if they're fluent in three languages, they're a trilingual
data_BLP$lang_group[data_BLP$langfilter1+data_BLP$langfilter2+data_BLP$langfilter3+data_BLP$langfilter4==3] <- 'tri';
#if they're fluent in four languages, they're a quadrilingual
data_BLP$lang_group[data_BLP$langfilter1+data_BLP$langfilter2+data_BLP$langfilter3+data_BLP$langfilter4==4] <- 'quadri';
data_BLP$lang_group <- as.factor(data_BLP$lang_group);
data_BLP <- subset(data_BLP, select=-c(langfilter1,langfilter2,langfilter3,langfilter4))
data_BLP_monos <- subset(data_BLP[data_BLP$lang_group=='mono',]);
data_BLP_bis <- subset(data_BLP[data_BLP$lang_group=='bi',]);
data_BLP_tris <- subset(data_BLP[data_BLP$lang_group=='tri',]);
data_BLP_quadris <- subset(data_BLP[data_BLP$lang_group=='quadri',]);
#trilinguals
plot(data_BLP_tris$ProficiencyL1Score,pch=19,ylim=c(0,55),ylab="Monolingual L1 Proficiency",xlab='Participant',col=cols2[1]);
abline(h=45.4,lty=5);
plot(data_BLP_tris$ProficiencyL2Score,pch=19,ylim=c(0,55),ylab="Monolingual L2 Proficiency",xlab='Participant',col=cols2[2]);
abline(h=45.4,lty=5);
plot(data_BLP_tris$ProficiencyL3Score,pch=19,ylim=c(0,55),ylab="Monolingual L3 Proficiency",xlab='Participant',col=cols2[3]);
abline(h=45.4,lty=5);
plot(data_BLP_tris$ProficiencyL4Score,pch=19,ylim=c(0,55),ylab="Monolingual L4 Proficiency",xlab='Participant',col=cols2[4]);
abline(h=45.4,lty=5);
#quadrilinguals
plot(data_BLP_quadris$ProficiencyL1Score,pch=19,ylim=c(0,55),ylab="Monolingual L1 Proficiency",xlab='Participant',col=cols2[1]);
abline(h=45.4,lty=5);
plot(data_BLP_quadris$ProficiencyL2Score,pch=19,ylim=c(0,55),ylab="Monolingual L2 Proficiency",xlab='Participant',col=cols2[2]);
abline(h=45.4,lty=5);
plot(data_BLP_quadris$ProficiencyL3Score,pch=19,ylim=c(0,55),ylab="Monolingual L3 Proficiency",xlab='Participant',col=cols2[3]);
abline(h=45.4,lty=5);
plot(data_BLP_quadris$ProficiencyL4Score,pch=19,ylim=c(0,55),ylab="Monolingual L4 Proficiency",xlab='Participant',col=cols2[4]);
abline(h=45.4,lty=5);
# BLP ---------------------------------------------------------------------
data_all_BLP <- read.csv("BLP_preprocessed.csv",header=T,sep=",");
data_all_BLP <- subset(data_all_BLP, select = -c(X)) # remove redundant column added by Pavlovia
data_BLP <- data_all_BLP[data_all_BLP$sbj_ID %in% participants,]; # n = 196 participants
data_BLP <- data_BLP[!data_BLP$sbj_ID %in% c('615b41767003d4ece749ed9d','5e8b66490d48450346bf2755','615b042301e3a24311563ee4'),] # same participants excluded as for testing
data_BLP <- subset(data_BLP, select = -c(AoAgioL1, AoAgioL2, AoAgioL3, AoAgioL4, anniInstrL1, anniInstrL2, anniInstrL3, anniInstrL4, anniPaeseL1, anniPaeseL2, anniPaeseL3, anniPaeseL4, anniFamigliaL1, anniFamigliaL2, anniFamigliaL3, anniFamigliaL4, anniLavoroL1, anniLavoroL2, anniLavoroL3, anniLavoroL4, PercAmiciL1, PercAmiciL2, PercAmiciL3, PercAmiciL4, PercFamigliaL1, PercFamigliaL2, PercFamigliaL3, PercFamigliaL4, PercLavoroL1, PercLavoroL2, PercLavoroL3, PercLavoroL4, PercStessoL1, PercStessoL2, PercStessoL3, PercStessoL4, PercCalcoliL1, PercCalcoliL2, PercCalcoliL3, PercCalcoliL4, ProfParlaL1, ProfParlaL2, ProfParlaL3, ProfParlaL4, ProfCapisceL1, ProfCapisceL2, ProfCapisceL3, ProfCapisceL4, ProfLeggeL1, ProfLeggeL2, ProfLeggeL3, ProfLeggeL4, ProfScriveL1, ProfScriveL2, ProfScriveL3, ProfScriveL4, AttMiStessoL1, AttMiStessoL2, AttMiStessoL3, AttMiStessoL4, AttCulturaL1, AttCulturaL2, AttCulturaL3, AttCulturaL4, AttLivNativoL1, AttLivNativoL2, AttLivNativoL3, AttLivNativoL4, AttMadrelinguaL1, AttMadrelinguaL2, AttMadrelinguaL3, AttMadrelinguaL4));
# standardise language responses
data_BLP[data_BLP == "polish"|data_BLP == "POLISH"] <- "Polish";
data_BLP[data_BLP == "portuguese"|data_BLP == "Portugal"] <- "Portuguese";
data_BLP[data_BLP == "italian"] <- "Italian";
data_BLP[data_BLP == "spanish"] <- "Spanish";
data_BLP[data_BLP == "greek"|data_BLP=="Greece"] <- "Greek";
data_BLP[data_BLP == "french"|data_BLP=="fRANCH"] <- "French";
data_BLP[data_BLP == "arabic"] <- "Arabic";
data_BLP[data_BLP == "ENGLISH"|data_BLP == "english"|data_BLP=="english "|data_BLP == "englis"|data_BLP == "eanglish"|data_BLP == "Enlish"] <- "English";
data_BLP[data_BLP == "xhosa"|data_BLP=="XHOSA"] <- "Xhosa";
data_BLP[data_BLP == "tshivenda"] <- "Tshivenda";
data_BLP[data_BLP == "SETSWANA"] <- "Setswana";
data_BLP[data_BLP == "zulu"] <- "Zulu";
data_BLP[data_BLP == "TSWANA"] <- "Tswana";
data_BLP[data_BLP == "sotho"] <- "Sotho";
data_BLP[data_BLP == "SHONA"] <- "Shona";
data_BLP[data_BLP == "hungarian"] <- "Hungarian";
data_BLP[data_BLP == "afrikaans"|data_BLP=="AFRIKAANS"] <- "Afrikaans";
data_BLP[data_BLP == "german"|data_BLP=="GERMAN"|data_BLP=="germany"|data_BLP=="Deustch"] <- "German";
data_BLP[data_BLP == "sweedish"] <- "Swedish";
data_BLP[data_BLP == "Deutch"] <- "Dutch"; # probably - maybe Deutsch?
data_BLP[data_BLP == "SESOTHO"] <- "Sesotho";
data_BLP[data_BLP == "RUSSIAN"|data_BLP=="russian"] <- "Russian";
data_BLP[data_BLP == "tswana"] <- "Tswana";
data_BLP[data_BLP == "SEPEDI"|data_BLP=="sepedi"] <- "Sepedi";
data_BLP[data_BLP == "XItsonga"] <- "Xitsonga";
data_BLP[data_BLP == "N/A"] <- "n/a";
# correcting some participants' demographic information - correction based off of Prolific's information
data_BLP["Age"][data_BLP["sbj_ID"] == "5aa787c66219a30001c765f8"] <- "24";
data_BLP["Gender"][data_BLP["sbj_ID"] == "5aa787c66219a30001c765f8"] <- "Man";
data_BLP["Gender"][data_BLP["sbj_ID"] == "5bcd11401662020001fe82c1"] <- "Man";
data_BLP["Gender"][data_BLP["sbj_ID"] == "5e3ff59bf2160b23942ada93"] <- "Man";
data_BLP["Age"][data_BLP["sbj_ID"] == "5e577e79ce30ae13226e61ae"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "5e8c57d9b4483e012006e7aa"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5ecbb4c00bc62403dae2df59"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5ee942381a22491bbb7170f8"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5f219602670e5a0af2cf5237"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5f47e34858dd331165bf9f00"] <- "21";
data_BLP["Gender"][data_BLP["sbj_ID"] == "5f5a713d37f71112463ab4d9"] <- "Woman";
data_BLP["Age"][data_BLP["sbj_ID"] == "5f99cee5a2a7d109a1624e10"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "5fa4725a186c050edc3bcc20"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "5fc2d2d79da439201ab6addc"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "5fc44d83862e3e79b02e0438"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "5fd9c5c67fa7c74ec42bb318"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "6065d7d47409810344f7e6bb"] <- "24";
data_BLP["Age"][data_BLP["sbj_ID"] == "60883a7e91c0be66dbb96fc8"] <- "23";
data_BLP["Age"][data_BLP["sbj_ID"] == "608c2e566d92c2aa3543e2d2"] <- "22";
data_BLP["Age"][data_BLP["sbj_ID"] == "60e3b18d3d4205b4c52ada56"] <- "24";
data_BLP["Gender"][data_BLP["sbj_ID"] == "60e9ea97d19e613e60a994da"] <- "Man";
data_BLP["Age"][data_BLP["sbj_ID"] == "611eafa6011b0423f7d7230f"] <- "20";
data_BLP["Age"][data_BLP["sbj_ID"] == "612a98181f4b6d1cf01f926c"] <- "21";
data_BLP["Age"][data_BLP["sbj_ID"] == "61301fcb49db2f170cb02b93"] <- "25";
data_BLP["Age"][data_BLP["sbj_ID"] == "6156b68cc77b48d6693b361c"] <- "21";
data_BLP["Age"][data_BLP["sbj_ID"] == "616891e25a026e1f7262116c"] <- "22";
data_BLP["Gender"][data_BLP["sbj_ID"] == "616eb493bb7e4ab4fa1de8d4"] <- "Woman";
data_BLP["Age"][data_BLP["sbj_ID"] == "6171d922c871ba795b6a4827"] <- "23";
# make some variables factors
data_BLP$task <- as.factor(data_BLP$task)
data_BLP$sbj_ID <- as.factor(data_BLP$sbj_ID);
data_BLP$Age <- as.numeric(data_BLP$Age);
data_BLP$Gender <- as.factor(data_BLP$Gender);
data_BLP$Education <- as.factor(data_BLP$Education);
data_BLP$L1 <- as.factor(data_BLP$L1);
data_BLP$L2 <- as.factor(data_BLP$L2);
data_BLP$L3 <- as.factor(data_BLP$L3);
data_BLP$L4 <- as.factor(data_BLP$L4);
data_BLP$otherLs <- as.factor(data_BLP$otherLs);
data_BLP$AttentionL1 <- as.factor(data_BLP$AttentionL1);
data_BLP$AttentionL2 <- as.factor(data_BLP$AttentionL2);
data_BLP$AttentionL3 <- as.factor(data_BLP$AttentionL3);
data_BLP$AttentionL4 <- as.factor(data_BLP$AttentionL4);
library(toolbox);
scores_list <- combineCols(data_BLP, cols=c('L1Score','L2Score','L3Score','L4Score'),by_name=TRUE); # combine scores into 1 list
data_BLP$temp_sbjID <- c(1:193); # necessary: R doesn't like format of Prolific IDs
# multilingual balance: variance
vars <- list();
for (i in 1:193) { # calculate variance for each participant
temp <- unlist(scores_list[i]);
var <- var(temp,na.rm=TRUE);
vars <- append(vars, var)
};
data_BLP$lang_var <- vars;
data_BLP$lang_var <- as.numeric(data_BLP$lang_var);
# multilingual balance: entropy
entropies <- list();
library(DescTools);
for (i in 1:193) { # calculate entropy for each participant
temp <- unlist(scores_list[i]);
entropy <- Entropy(temp,na.rm=TRUE);
entropies <- append(entropies, entropy)
};
data_BLP$lang_ent <- entropies;
data_BLP$lang_ent <- as.numeric(data_BLP$lang_ent);
# multilingual experience: summing all language scores
data_BLP["L2Score"][is.na(data_BLP["L2Score"])] <- 0;
data_BLP["L3Score"][is.na(data_BLP["L3Score"])] <- 0;
data_BLP["L4Score"][is.na(data_BLP["L4Score"])] <- 0;
data_BLP$multi_exp <- data_BLP$L1Score + data_BLP$L2Score + data_BLP$L3Score + data_BLP$L4Score;
# L1 - L2 score
data_BLP$L1_L2_diff <- data_BLP$L1Score - data_BLP$L2Score;
